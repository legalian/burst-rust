<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="485.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="485.00"> </text><svg id="frames" x="10" width="1180" total_samples="3271"><g><title>burst`alloc::slice::merge_sort (1 samples, 0.03%)</title><rect x="0.0000%" y="341" width="0.0306%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>burst`std::path::compare_components (1 samples, 0.03%)</title><rect x="0.0000%" y="325" width="0.0306%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>burst`&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="0.0000%" y="309" width="0.0306%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="0.0306%" y="325" width="0.0611%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="2"/><text x="0.2806%" y="335.50"></text></g><g><title>burst`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="0.0917%" y="325" width="0.0306%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="1"/><text x="0.3417%" y="335.50"></text></g><g><title>burst`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (440 samples, 13.45%)</title><rect x="0.1223%" y="325" width="13.4515%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="440"/><text x="0.3723%" y="335.50">burst`alloc::collect..</text></g><g><title>burst`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::push (7 samples, 0.21%)</title><rect x="13.5738%" y="325" width="0.2140%" height="15" fill="rgb(207,160,47)" fg:x="444" fg:w="7"/><text x="13.8238%" y="335.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.06%)</title><rect x="13.7878%" y="325" width="0.0611%" height="15" fill="rgb(228,23,34)" fg:x="451" fg:w="2"/><text x="14.0378%" y="335.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (1 samples, 0.03%)</title><rect x="20.5442%" y="277" width="0.0306%" height="15" fill="rgb(218,30,26)" fg:x="672" fg:w="1"/><text x="20.7942%" y="287.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (1 samples, 0.03%)</title><rect x="20.5442%" y="261" width="0.0306%" height="15" fill="rgb(220,122,19)" fg:x="672" fg:w="1"/><text x="20.7942%" y="271.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (1 samples, 0.03%)</title><rect x="20.5442%" y="245" width="0.0306%" height="15" fill="rgb(250,228,42)" fg:x="672" fg:w="1"/><text x="20.7942%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="20.5442%" y="229" width="0.0306%" height="15" fill="rgb(240,193,28)" fg:x="672" fg:w="1"/><text x="20.7942%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="20.5442%" y="213" width="0.0306%" height="15" fill="rgb(216,20,37)" fg:x="672" fg:w="1"/><text x="20.7942%" y="223.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (5 samples, 0.15%)</title><rect x="20.4525%" y="293" width="0.1529%" height="15" fill="rgb(206,188,39)" fg:x="669" fg:w="5"/><text x="20.7025%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="20.5747%" y="277" width="0.0306%" height="15" fill="rgb(217,207,13)" fg:x="673" fg:w="1"/><text x="20.8247%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="20.5747%" y="261" width="0.0306%" height="15" fill="rgb(231,73,38)" fg:x="673" fg:w="1"/><text x="20.8247%" y="271.50"></text></g><g><title>burst`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.28%)</title><rect x="20.4525%" y="309" width="0.2751%" height="15" fill="rgb(225,20,46)" fg:x="669" fg:w="9"/><text x="20.7025%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.12%)</title><rect x="20.6053%" y="293" width="0.1223%" height="15" fill="rgb(210,31,41)" fg:x="674" fg:w="4"/><text x="20.8553%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (4 samples, 0.12%)</title><rect x="20.6053%" y="277" width="0.1223%" height="15" fill="rgb(221,200,47)" fg:x="674" fg:w="4"/><text x="20.8553%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.12%)</title><rect x="20.6053%" y="261" width="0.1223%" height="15" fill="rgb(226,26,5)" fg:x="674" fg:w="4"/><text x="20.8553%" y="271.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.15%)</title><rect x="20.7276%" y="309" width="0.1529%" height="15" fill="rgb(249,33,26)" fg:x="678" fg:w="5"/><text x="20.9776%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.09%)</title><rect x="20.9416%" y="277" width="0.0917%" height="15" fill="rgb(235,183,28)" fg:x="685" fg:w="3"/><text x="21.1916%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="21.0028%" y="261" width="0.0306%" height="15" fill="rgb(221,5,38)" fg:x="687" fg:w="1"/><text x="21.2528%" y="271.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.18%)</title><rect x="20.8805%" y="293" width="0.1834%" height="15" fill="rgb(247,18,42)" fg:x="683" fg:w="6"/><text x="21.1305%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="21.0333%" y="277" width="0.0306%" height="15" fill="rgb(241,131,45)" fg:x="688" fg:w="1"/><text x="21.2833%" y="287.50"></text></g><g><title>burst`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.24%)</title><rect x="20.8805%" y="309" width="0.2446%" height="15" fill="rgb(249,31,29)" fg:x="683" fg:w="8"/><text x="21.1305%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.06%)</title><rect x="21.0639%" y="293" width="0.0611%" height="15" fill="rgb(225,111,53)" fg:x="689" fg:w="2"/><text x="21.3139%" y="303.50"></text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (47 samples, 1.44%)</title><rect x="21.1250%" y="309" width="1.4369%" height="15" fill="rgb(238,160,17)" fg:x="691" fg:w="47"/><text x="21.3750%" y="319.50"></text></g><g><title>burst`DYLD-STUB$$free (6 samples, 0.18%)</title><rect x="22.5619%" y="309" width="0.1834%" height="15" fill="rgb(214,148,48)" fg:x="738" fg:w="6"/><text x="22.8119%" y="319.50"></text></g><g><title>burst`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="22.7453%" y="309" width="0.0306%" height="15" fill="rgb(232,36,49)" fg:x="744" fg:w="1"/><text x="22.9953%" y="319.50"></text></g><g><title>burst`__rdl_alloc (1 samples, 0.03%)</title><rect x="22.7759%" y="309" width="0.0306%" height="15" fill="rgb(209,103,24)" fg:x="745" fg:w="1"/><text x="23.0259%" y="319.50"></text></g><g><title>burst`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::push (59 samples, 1.80%)</title><rect x="22.8065%" y="309" width="1.8037%" height="15" fill="rgb(229,88,8)" fg:x="746" fg:w="59"/><text x="23.0565%" y="319.50">b..</text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="24.5796%" y="293" width="0.0306%" height="15" fill="rgb(213,181,19)" fg:x="804" fg:w="1"/><text x="24.8296%" y="303.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="24.5796%" y="277" width="0.0306%" height="15" fill="rgb(254,191,54)" fg:x="804" fg:w="1"/><text x="24.8296%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.03%)</title><rect x="24.5796%" y="261" width="0.0306%" height="15" fill="rgb(241,83,37)" fg:x="804" fg:w="1"/><text x="24.8296%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.03%)</title><rect x="24.5796%" y="245" width="0.0306%" height="15" fill="rgb(233,36,39)" fg:x="804" fg:w="1"/><text x="24.8296%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.03%)</title><rect x="24.5796%" y="229" width="0.0306%" height="15" fill="rgb(226,3,54)" fg:x="804" fg:w="1"/><text x="24.8296%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (1 samples, 0.03%)</title><rect x="24.5796%" y="213" width="0.0306%" height="15" fill="rgb(245,192,40)" fg:x="804" fg:w="1"/><text x="24.8296%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (1 samples, 0.03%)</title><rect x="24.5796%" y="197" width="0.0306%" height="15" fill="rgb(238,167,29)" fg:x="804" fg:w="1"/><text x="24.8296%" y="207.50"></text></g><g><title>burst`DYLD-STUB$$malloc (2 samples, 0.06%)</title><rect x="24.7936%" y="293" width="0.0611%" height="15" fill="rgb(232,182,51)" fg:x="811" fg:w="2"/><text x="25.0436%" y="303.50"></text></g><g><title>burst`DYLD-STUB$$realloc (1 samples, 0.03%)</title><rect x="24.8548%" y="293" width="0.0306%" height="15" fill="rgb(231,60,39)" fg:x="813" fg:w="1"/><text x="25.1048%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="24.9771%" y="261" width="0.0306%" height="15" fill="rgb(208,69,12)" fg:x="817" fg:w="1"/><text x="25.2271%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.09%)</title><rect x="25.1911%" y="229" width="0.0917%" height="15" fill="rgb(235,93,37)" fg:x="824" fg:w="3"/><text x="25.4411%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (31 samples, 0.95%)</title><rect x="25.0382%" y="245" width="0.9477%" height="15" fill="rgb(213,116,39)" fg:x="819" fg:w="31"/><text x="25.2882%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (23 samples, 0.70%)</title><rect x="25.2828%" y="229" width="0.7031%" height="15" fill="rgb(222,207,29)" fg:x="827" fg:w="23"/><text x="25.5328%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.06%)</title><rect x="25.9248%" y="213" width="0.0611%" height="15" fill="rgb(206,96,30)" fg:x="848" fg:w="2"/><text x="26.1748%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.09%)</title><rect x="25.9859%" y="245" width="0.0917%" height="15" fill="rgb(218,138,4)" fg:x="850" fg:w="3"/><text x="26.2359%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (38 samples, 1.16%)</title><rect x="24.9465%" y="277" width="1.1617%" height="15" fill="rgb(250,191,14)" fg:x="816" fg:w="38"/><text x="25.1965%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (36 samples, 1.10%)</title><rect x="25.0076%" y="261" width="1.1006%" height="15" fill="rgb(239,60,40)" fg:x="818" fg:w="36"/><text x="25.2576%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.03%)</title><rect x="26.0777%" y="245" width="0.0306%" height="15" fill="rgb(206,27,48)" fg:x="853" fg:w="1"/><text x="26.3277%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="26.1082%" y="277" width="0.0306%" height="15" fill="rgb(225,35,8)" fg:x="854" fg:w="1"/><text x="26.3582%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="26.1388%" y="277" width="0.0306%" height="15" fill="rgb(250,213,24)" fg:x="855" fg:w="1"/><text x="26.3888%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.03%)</title><rect x="26.2611%" y="245" width="0.0306%" height="15" fill="rgb(247,123,22)" fg:x="859" fg:w="1"/><text x="26.5111%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (1 samples, 0.03%)</title><rect x="26.2917%" y="245" width="0.0306%" height="15" fill="rgb(231,138,38)" fg:x="860" fg:w="1"/><text x="26.5417%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (4 samples, 0.12%)</title><rect x="26.3528%" y="229" width="0.1223%" height="15" fill="rgb(231,145,46)" fg:x="862" fg:w="4"/><text x="26.6028%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.12%)</title><rect x="26.3528%" y="213" width="0.1223%" height="15" fill="rgb(251,118,11)" fg:x="862" fg:w="4"/><text x="26.6028%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.06%)</title><rect x="26.5668%" y="213" width="0.0611%" height="15" fill="rgb(217,147,25)" fg:x="869" fg:w="2"/><text x="26.8168%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (2 samples, 0.06%)</title><rect x="26.6279%" y="213" width="0.0611%" height="15" fill="rgb(247,81,37)" fg:x="871" fg:w="2"/><text x="26.8779%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.06%)</title><rect x="26.6279%" y="197" width="0.0611%" height="15" fill="rgb(209,12,38)" fg:x="871" fg:w="2"/><text x="26.8779%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (10 samples, 0.31%)</title><rect x="26.4751%" y="229" width="0.3057%" height="15" fill="rgb(227,1,9)" fg:x="866" fg:w="10"/><text x="26.7251%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (3 samples, 0.09%)</title><rect x="26.6891%" y="213" width="0.0917%" height="15" fill="rgb(248,47,43)" fg:x="873" fg:w="3"/><text x="26.9391%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.09%)</title><rect x="26.6891%" y="197" width="0.0917%" height="15" fill="rgb(221,10,30)" fg:x="873" fg:w="3"/><text x="26.9391%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="26.7808%" y="229" width="0.0306%" height="15" fill="rgb(210,229,1)" fg:x="876" fg:w="1"/><text x="27.0308%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="26.7808%" y="213" width="0.0306%" height="15" fill="rgb(222,148,37)" fg:x="876" fg:w="1"/><text x="27.0308%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="26.7808%" y="197" width="0.0306%" height="15" fill="rgb(234,67,33)" fg:x="876" fg:w="1"/><text x="27.0308%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (5 samples, 0.15%)</title><rect x="26.9337%" y="181" width="0.1529%" height="15" fill="rgb(247,98,35)" fg:x="881" fg:w="5"/><text x="27.1837%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.34%)</title><rect x="26.8114%" y="229" width="0.3363%" height="15" fill="rgb(247,138,52)" fg:x="877" fg:w="11"/><text x="27.0614%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (10 samples, 0.31%)</title><rect x="26.8419%" y="213" width="0.3057%" height="15" fill="rgb(213,79,30)" fg:x="878" fg:w="10"/><text x="27.0919%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (10 samples, 0.31%)</title><rect x="26.8419%" y="197" width="0.3057%" height="15" fill="rgb(246,177,23)" fg:x="878" fg:w="10"/><text x="27.0919%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.06%)</title><rect x="27.0865%" y="181" width="0.0611%" height="15" fill="rgb(230,62,27)" fg:x="886" fg:w="2"/><text x="27.3365%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (29 samples, 0.89%)</title><rect x="26.3222%" y="245" width="0.8866%" height="15" fill="rgb(216,154,8)" fg:x="861" fg:w="29"/><text x="26.5722%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.06%)</title><rect x="27.1477%" y="229" width="0.0611%" height="15" fill="rgb(244,35,45)" fg:x="888" fg:w="2"/><text x="27.3977%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (71 samples, 2.17%)</title><rect x="26.1999%" y="261" width="2.1706%" height="15" fill="rgb(251,115,12)" fg:x="857" fg:w="71"/><text x="26.4499%" y="271.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (38 samples, 1.16%)</title><rect x="27.2088%" y="245" width="1.1617%" height="15" fill="rgb(240,54,50)" fg:x="890" fg:w="38"/><text x="27.4588%" y="255.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (124 samples, 3.79%)</title><rect x="24.6102%" y="309" width="3.7909%" height="15" fill="rgb(233,84,52)" fg:x="805" fg:w="124"/><text x="24.8602%" y="319.50">burs..</text></g><g><title>burst`alloc::raw_vec::finish_grow (115 samples, 3.52%)</title><rect x="24.8854%" y="293" width="3.5157%" height="15" fill="rgb(207,117,47)" fg:x="814" fg:w="115"/><text x="25.1354%" y="303.50">bur..</text></g><g><title>libsystem_malloc.dylib`realloc (73 samples, 2.23%)</title><rect x="26.1694%" y="277" width="2.2317%" height="15" fill="rgb(249,43,39)" fg:x="856" fg:w="73"/><text x="26.4194%" y="287.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="28.3705%" y="261" width="0.0306%" height="15" fill="rgb(209,38,44)" fg:x="928" fg:w="1"/><text x="28.6205%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="30.1743%" y="197" width="0.0306%" height="15" fill="rgb(236,212,23)" fg:x="987" fg:w="1"/><text x="30.4243%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="30.1743%" y="181" width="0.0306%" height="15" fill="rgb(242,79,21)" fg:x="987" fg:w="1"/><text x="30.4243%" y="191.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (2 samples, 0.06%)</title><rect x="30.1743%" y="245" width="0.0611%" height="15" fill="rgb(211,96,35)" fg:x="987" fg:w="2"/><text x="30.4243%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="30.1743%" y="229" width="0.0611%" height="15" fill="rgb(253,215,40)" fg:x="987" fg:w="2"/><text x="30.4243%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="30.1743%" y="213" width="0.0611%" height="15" fill="rgb(211,81,21)" fg:x="987" fg:w="2"/><text x="30.4243%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="30.2048%" y="197" width="0.0306%" height="15" fill="rgb(208,190,38)" fg:x="988" fg:w="1"/><text x="30.4548%" y="207.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="30.2354%" y="165" width="0.0306%" height="15" fill="rgb(235,213,38)" fg:x="989" fg:w="1"/><text x="30.4854%" y="175.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (3 samples, 0.09%)</title><rect x="30.2354%" y="245" width="0.0917%" height="15" fill="rgb(237,122,38)" fg:x="989" fg:w="3"/><text x="30.4854%" y="255.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (3 samples, 0.09%)</title><rect x="30.2354%" y="229" width="0.0917%" height="15" fill="rgb(244,218,35)" fg:x="989" fg:w="3"/><text x="30.4854%" y="239.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (3 samples, 0.09%)</title><rect x="30.2354%" y="213" width="0.0917%" height="15" fill="rgb(240,68,47)" fg:x="989" fg:w="3"/><text x="30.4854%" y="223.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (3 samples, 0.09%)</title><rect x="30.2354%" y="197" width="0.0917%" height="15" fill="rgb(210,16,53)" fg:x="989" fg:w="3"/><text x="30.4854%" y="207.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (3 samples, 0.09%)</title><rect x="30.2354%" y="181" width="0.0917%" height="15" fill="rgb(235,124,12)" fg:x="989" fg:w="3"/><text x="30.4854%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="30.2660%" y="165" width="0.0611%" height="15" fill="rgb(224,169,11)" fg:x="990" fg:w="2"/><text x="30.5160%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="30.2660%" y="149" width="0.0611%" height="15" fill="rgb(250,166,2)" fg:x="990" fg:w="2"/><text x="30.5160%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="30.2965%" y="133" width="0.0306%" height="15" fill="rgb(242,216,29)" fg:x="991" fg:w="1"/><text x="30.5465%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.03%)</title><rect x="30.2965%" y="117" width="0.0306%" height="15" fill="rgb(230,116,27)" fg:x="991" fg:w="1"/><text x="30.5465%" y="127.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (13 samples, 0.40%)</title><rect x="30.0214%" y="261" width="0.3974%" height="15" fill="rgb(228,99,48)" fg:x="982" fg:w="13"/><text x="30.2714%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.09%)</title><rect x="30.3271%" y="245" width="0.0917%" height="15" fill="rgb(253,11,6)" fg:x="992" fg:w="3"/><text x="30.5771%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.09%)</title><rect x="30.3271%" y="229" width="0.0917%" height="15" fill="rgb(247,143,39)" fg:x="992" fg:w="3"/><text x="30.5771%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.09%)</title><rect x="30.3271%" y="213" width="0.0917%" height="15" fill="rgb(236,97,10)" fg:x="992" fg:w="3"/><text x="30.5771%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.06%)</title><rect x="30.3577%" y="197" width="0.0611%" height="15" fill="rgb(233,208,19)" fg:x="993" fg:w="2"/><text x="30.6077%" y="207.50"></text></g><g><title>burst`__rdl_alloc (2 samples, 0.06%)</title><rect x="30.4188%" y="261" width="0.0611%" height="15" fill="rgb(216,164,2)" fg:x="995" fg:w="2"/><text x="30.6688%" y="271.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="30.9997%" y="197" width="0.0306%" height="15" fill="rgb(220,129,5)" fg:x="1014" fg:w="1"/><text x="31.2497%" y="207.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (1 samples, 0.03%)</title><rect x="30.9997%" y="181" width="0.0306%" height="15" fill="rgb(242,17,10)" fg:x="1014" fg:w="1"/><text x="31.2497%" y="191.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="30.9997%" y="165" width="0.0306%" height="15" fill="rgb(242,107,0)" fg:x="1014" fg:w="1"/><text x="31.2497%" y="175.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (1 samples, 0.03%)</title><rect x="30.9997%" y="149" width="0.0306%" height="15" fill="rgb(251,28,31)" fg:x="1014" fg:w="1"/><text x="31.2497%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="30.9997%" y="133" width="0.0306%" height="15" fill="rgb(233,223,10)" fg:x="1014" fg:w="1"/><text x="31.2497%" y="143.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (4 samples, 0.12%)</title><rect x="30.9997%" y="213" width="0.1223%" height="15" fill="rgb(215,21,27)" fg:x="1014" fg:w="4"/><text x="31.2497%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.09%)</title><rect x="31.0303%" y="197" width="0.0917%" height="15" fill="rgb(232,23,21)" fg:x="1015" fg:w="3"/><text x="31.2803%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.09%)</title><rect x="31.0303%" y="181" width="0.0917%" height="15" fill="rgb(244,5,23)" fg:x="1015" fg:w="3"/><text x="31.2803%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.06%)</title><rect x="31.0608%" y="165" width="0.0611%" height="15" fill="rgb(226,81,46)" fg:x="1016" fg:w="2"/><text x="31.3108%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.03%)</title><rect x="31.0914%" y="149" width="0.0306%" height="15" fill="rgb(247,70,30)" fg:x="1017" fg:w="1"/><text x="31.3414%" y="159.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (11 samples, 0.34%)</title><rect x="30.8163%" y="229" width="0.3363%" height="15" fill="rgb(212,68,19)" fg:x="1008" fg:w="11"/><text x="31.0663%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="31.1220%" y="213" width="0.0306%" height="15" fill="rgb(240,187,13)" fg:x="1018" fg:w="1"/><text x="31.3720%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="31.1220%" y="197" width="0.0306%" height="15" fill="rgb(223,113,26)" fg:x="1018" fg:w="1"/><text x="31.3720%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="31.1220%" y="181" width="0.0306%" height="15" fill="rgb(206,192,2)" fg:x="1018" fg:w="1"/><text x="31.3720%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.31%)</title><rect x="31.8251%" y="181" width="0.3057%" height="15" fill="rgb(241,108,4)" fg:x="1041" fg:w="10"/><text x="32.0751%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.24%)</title><rect x="31.8863%" y="165" width="0.2446%" height="15" fill="rgb(247,173,49)" fg:x="1043" fg:w="8"/><text x="32.1363%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.15%)</title><rect x="31.9780%" y="149" width="0.1529%" height="15" fill="rgb(224,114,35)" fg:x="1046" fg:w="5"/><text x="32.2280%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.06%)</title><rect x="32.0697%" y="133" width="0.0611%" height="15" fill="rgb(245,159,27)" fg:x="1049" fg:w="2"/><text x="32.3197%" y="143.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (15 samples, 0.46%)</title><rect x="31.7028%" y="197" width="0.4586%" height="15" fill="rgb(245,172,44)" fg:x="1037" fg:w="15"/><text x="31.9528%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="32.1308%" y="181" width="0.0306%" height="15" fill="rgb(236,23,11)" fg:x="1051" fg:w="1"/><text x="32.3808%" y="191.50"></text></g><g><title>burst`__rdl_alloc (2 samples, 0.06%)</title><rect x="32.1614%" y="197" width="0.0611%" height="15" fill="rgb(205,117,38)" fg:x="1052" fg:w="2"/><text x="32.4114%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="32.7423%" y="133" width="0.0306%" height="15" fill="rgb(237,72,25)" fg:x="1071" fg:w="1"/><text x="32.9923%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="32.9257%" y="101" width="0.0306%" height="15" fill="rgb(244,70,9)" fg:x="1077" fg:w="1"/><text x="33.1757%" y="111.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (15 samples, 0.46%)</title><rect x="32.5894%" y="165" width="0.4586%" height="15" fill="rgb(217,125,39)" fg:x="1066" fg:w="15"/><text x="32.8394%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.34%)</title><rect x="32.7117%" y="149" width="0.3363%" height="15" fill="rgb(235,36,10)" fg:x="1070" fg:w="11"/><text x="32.9617%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.28%)</title><rect x="32.7729%" y="133" width="0.2751%" height="15" fill="rgb(251,123,47)" fg:x="1072" fg:w="9"/><text x="33.0229%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.24%)</title><rect x="32.8034%" y="117" width="0.2446%" height="15" fill="rgb(221,13,13)" fg:x="1073" fg:w="8"/><text x="33.0534%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.09%)</title><rect x="32.9563%" y="101" width="0.0917%" height="15" fill="rgb(238,131,9)" fg:x="1078" fg:w="3"/><text x="33.2063%" y="111.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="33.3843%" y="117" width="0.0306%" height="15" fill="rgb(211,50,8)" fg:x="1092" fg:w="1"/><text x="33.6343%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="33.6900%" y="69" width="0.0306%" height="15" fill="rgb(245,182,24)" fg:x="1102" fg:w="1"/><text x="33.9400%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.31%)</title><rect x="33.4760%" y="85" width="0.3057%" height="15" fill="rgb(242,14,37)" fg:x="1095" fg:w="10"/><text x="33.7260%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.06%)</title><rect x="33.7206%" y="69" width="0.0611%" height="15" fill="rgb(246,228,12)" fg:x="1103" fg:w="2"/><text x="33.9706%" y="79.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (16 samples, 0.49%)</title><rect x="33.3231%" y="133" width="0.4891%" height="15" fill="rgb(213,55,15)" fg:x="1090" fg:w="16"/><text x="33.5731%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.40%)</title><rect x="33.4149%" y="117" width="0.3974%" height="15" fill="rgb(209,9,3)" fg:x="1093" fg:w="13"/><text x="33.6649%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.34%)</title><rect x="33.4760%" y="101" width="0.3363%" height="15" fill="rgb(230,59,30)" fg:x="1095" fg:w="11"/><text x="33.7260%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="33.7817%" y="85" width="0.0306%" height="15" fill="rgb(209,121,21)" fg:x="1105" fg:w="1"/><text x="34.0317%" y="95.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="33.9346%" y="101" width="0.0306%" height="15" fill="rgb(220,109,13)" fg:x="1110" fg:w="1"/><text x="34.1846%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="33.9346%" y="85" width="0.0306%" height="15" fill="rgb(232,18,1)" fg:x="1110" fg:w="1"/><text x="34.1846%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="33.9346%" y="69" width="0.0306%" height="15" fill="rgb(215,41,42)" fg:x="1110" fg:w="1"/><text x="34.1846%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="33.9346%" y="53" width="0.0306%" height="15" fill="rgb(224,123,36)" fg:x="1110" fg:w="1"/><text x="34.1846%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.03%)</title><rect x="33.9346%" y="37" width="0.0306%" height="15" fill="rgb(240,125,3)" fg:x="1110" fg:w="1"/><text x="34.1846%" y="47.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (1 samples, 0.03%)</title><rect x="33.9651%" y="101" width="0.0306%" height="15" fill="rgb(205,98,50)" fg:x="1111" fg:w="1"/><text x="34.2151%" y="111.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (5 samples, 0.15%)</title><rect x="33.9040%" y="117" width="0.1529%" height="15" fill="rgb(205,185,37)" fg:x="1109" fg:w="5"/><text x="34.1540%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="33.9957%" y="101" width="0.0611%" height="15" fill="rgb(238,207,15)" fg:x="1112" fg:w="2"/><text x="34.2457%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="33.9957%" y="85" width="0.0611%" height="15" fill="rgb(213,199,42)" fg:x="1112" fg:w="2"/><text x="34.2457%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.06%)</title><rect x="33.9957%" y="69" width="0.0611%" height="15" fill="rgb(235,201,11)" fg:x="1112" fg:w="2"/><text x="34.2457%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="34.0569%" y="101" width="0.0306%" height="15" fill="rgb(207,46,11)" fg:x="1114" fg:w="1"/><text x="34.3069%" y="111.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (11 samples, 0.34%)</title><rect x="33.8123%" y="133" width="0.3363%" height="15" fill="rgb(241,35,35)" fg:x="1106" fg:w="11"/><text x="34.0623%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.09%)</title><rect x="34.0569%" y="117" width="0.0917%" height="15" fill="rgb(243,32,47)" fg:x="1114" fg:w="3"/><text x="34.3069%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="34.0874%" y="101" width="0.0611%" height="15" fill="rgb(247,202,23)" fg:x="1115" fg:w="2"/><text x="34.3374%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.06%)</title><rect x="34.0874%" y="85" width="0.0611%" height="15" fill="rgb(219,102,11)" fg:x="1115" fg:w="2"/><text x="34.3374%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.03%)</title><rect x="34.1180%" y="69" width="0.0306%" height="15" fill="rgb(243,110,44)" fg:x="1116" fg:w="1"/><text x="34.3680%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.24%)</title><rect x="34.1792%" y="101" width="0.2446%" height="15" fill="rgb(222,74,54)" fg:x="1118" fg:w="8"/><text x="34.4292%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.09%)</title><rect x="34.3320%" y="85" width="0.0917%" height="15" fill="rgb(216,99,12)" fg:x="1123" fg:w="3"/><text x="34.5820%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.31%)</title><rect x="34.1486%" y="133" width="0.3057%" height="15" fill="rgb(226,22,26)" fg:x="1117" fg:w="10"/><text x="34.3986%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.31%)</title><rect x="34.1486%" y="117" width="0.3057%" height="15" fill="rgb(217,163,10)" fg:x="1117" fg:w="10"/><text x="34.3986%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="34.4237%" y="101" width="0.0306%" height="15" fill="rgb(213,25,53)" fg:x="1126" fg:w="1"/><text x="34.6737%" y="111.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (42 samples, 1.28%)</title><rect x="33.2009%" y="149" width="1.2840%" height="15" fill="rgb(252,105,26)" fg:x="1086" fg:w="42"/><text x="33.4509%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="34.4543%" y="133" width="0.0306%" height="15" fill="rgb(220,39,43)" fg:x="1127" fg:w="1"/><text x="34.7043%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.06%)</title><rect x="34.8517%" y="101" width="0.0611%" height="15" fill="rgb(229,68,48)" fg:x="1140" fg:w="2"/><text x="35.1017%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (14 samples, 0.43%)</title><rect x="34.6377%" y="117" width="0.4280%" height="15" fill="rgb(252,8,32)" fg:x="1133" fg:w="14"/><text x="34.8877%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (5 samples, 0.15%)</title><rect x="34.9129%" y="101" width="0.1529%" height="15" fill="rgb(223,20,43)" fg:x="1142" fg:w="5"/><text x="35.1629%" y="111.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (67 samples, 2.05%)</title><rect x="33.0480%" y="165" width="2.0483%" height="15" fill="rgb(229,81,49)" fg:x="1081" fg:w="67"/><text x="33.2980%" y="175.50">b..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.61%)</title><rect x="34.4849%" y="149" width="0.6114%" height="15" fill="rgb(236,28,36)" fg:x="1128" fg:w="20"/><text x="34.7349%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (17 samples, 0.52%)</title><rect x="34.5766%" y="133" width="0.5197%" height="15" fill="rgb(249,185,26)" fg:x="1131" fg:w="17"/><text x="34.8266%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="35.0657%" y="117" width="0.0306%" height="15" fill="rgb(249,174,33)" fg:x="1147" fg:w="1"/><text x="35.3157%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="35.1880%" y="117" width="0.0306%" height="15" fill="rgb(233,201,37)" fg:x="1151" fg:w="1"/><text x="35.4380%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.18%)</title><rect x="35.1574%" y="133" width="0.1834%" height="15" fill="rgb(221,78,26)" fg:x="1150" fg:w="6"/><text x="35.4074%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (4 samples, 0.12%)</title><rect x="35.2186%" y="117" width="0.1223%" height="15" fill="rgb(250,127,30)" fg:x="1152" fg:w="4"/><text x="35.4686%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.28%)</title><rect x="35.0963%" y="165" width="0.2751%" height="15" fill="rgb(230,49,44)" fg:x="1148" fg:w="9"/><text x="35.3463%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.21%)</title><rect x="35.1574%" y="149" width="0.2140%" height="15" fill="rgb(229,67,23)" fg:x="1150" fg:w="7"/><text x="35.4074%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="35.3409%" y="133" width="0.0306%" height="15" fill="rgb(249,83,47)" fg:x="1156" fg:w="1"/><text x="35.5909%" y="143.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (96 samples, 2.93%)</title><rect x="32.4671%" y="181" width="2.9349%" height="15" fill="rgb(215,43,3)" fg:x="1062" fg:w="96"/><text x="32.7171%" y="191.50">bu..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="35.3714%" y="165" width="0.0306%" height="15" fill="rgb(238,154,13)" fg:x="1157" fg:w="1"/><text x="35.6214%" y="175.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (3 samples, 0.09%)</title><rect x="35.4020%" y="181" width="0.0917%" height="15" fill="rgb(219,56,2)" fg:x="1158" fg:w="3"/><text x="35.6520%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="35.5854%" y="165" width="0.0306%" height="15" fill="rgb(233,0,4)" fg:x="1164" fg:w="1"/><text x="35.8354%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.12%)</title><rect x="35.8912%" y="133" width="0.1223%" height="15" fill="rgb(235,30,7)" fg:x="1174" fg:w="4"/><text x="36.1412%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (23 samples, 0.70%)</title><rect x="35.6160%" y="149" width="0.7031%" height="15" fill="rgb(250,79,13)" fg:x="1165" fg:w="23"/><text x="35.8660%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (10 samples, 0.31%)</title><rect x="36.0135%" y="133" width="0.3057%" height="15" fill="rgb(211,146,34)" fg:x="1178" fg:w="10"/><text x="36.2635%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (29 samples, 0.89%)</title><rect x="35.4937%" y="181" width="0.8866%" height="15" fill="rgb(228,22,38)" fg:x="1161" fg:w="29"/><text x="35.7437%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (25 samples, 0.76%)</title><rect x="35.6160%" y="165" width="0.7643%" height="15" fill="rgb(235,168,5)" fg:x="1165" fg:w="25"/><text x="35.8660%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.06%)</title><rect x="36.3192%" y="149" width="0.0611%" height="15" fill="rgb(221,155,16)" fg:x="1188" fg:w="2"/><text x="36.5692%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.09%)</title><rect x="36.3803%" y="181" width="0.0917%" height="15" fill="rgb(215,215,53)" fg:x="1190" fg:w="3"/><text x="36.6303%" y="191.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (140 samples, 4.28%)</title><rect x="32.2226%" y="197" width="4.2800%" height="15" fill="rgb(223,4,10)" fg:x="1054" fg:w="140"/><text x="32.4726%" y="207.50">burst..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="36.4720%" y="181" width="0.0306%" height="15" fill="rgb(234,103,6)" fg:x="1193" fg:w="1"/><text x="36.7220%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="36.6249%" y="181" width="0.0306%" height="15" fill="rgb(227,97,0)" fg:x="1198" fg:w="1"/><text x="36.8749%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.09%)</title><rect x="37.2669%" y="149" width="0.0917%" height="15" fill="rgb(234,150,53)" fg:x="1219" fg:w="3"/><text x="37.5169%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (32 samples, 0.98%)</title><rect x="36.7166%" y="165" width="0.9783%" height="15" fill="rgb(228,201,54)" fg:x="1201" fg:w="32"/><text x="36.9666%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (11 samples, 0.34%)</title><rect x="37.3586%" y="149" width="0.3363%" height="15" fill="rgb(222,22,37)" fg:x="1222" fg:w="11"/><text x="37.6086%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (42 samples, 1.28%)</title><rect x="36.5026%" y="197" width="1.2840%" height="15" fill="rgb(237,53,32)" fg:x="1194" fg:w="42"/><text x="36.7526%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (37 samples, 1.13%)</title><rect x="36.6555%" y="181" width="1.1312%" height="15" fill="rgb(233,25,53)" fg:x="1199" fg:w="37"/><text x="36.9055%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.09%)</title><rect x="37.6949%" y="165" width="0.0917%" height="15" fill="rgb(210,40,34)" fg:x="1233" fg:w="3"/><text x="37.9449%" y="175.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (211 samples, 6.45%)</title><rect x="31.4277%" y="213" width="6.4506%" height="15" fill="rgb(241,220,44)" fg:x="1028" fg:w="211"/><text x="31.6777%" y="223.50">burst`&lt;b..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.09%)</title><rect x="37.7866%" y="197" width="0.0917%" height="15" fill="rgb(235,28,35)" fg:x="1236" fg:w="3"/><text x="38.0366%" y="207.50"></text></g><g><title>burst`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="37.8783%" y="213" width="0.0306%" height="15" fill="rgb(210,56,17)" fg:x="1239" fg:w="1"/><text x="38.1283%" y="223.50"></text></g><g><title>burst`__rdl_alloc (1 samples, 0.03%)</title><rect x="37.9089%" y="213" width="0.0306%" height="15" fill="rgb(224,130,29)" fg:x="1240" fg:w="1"/><text x="38.1589%" y="223.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (3 samples, 0.09%)</title><rect x="37.9395%" y="213" width="0.0917%" height="15" fill="rgb(235,212,8)" fg:x="1241" fg:w="3"/><text x="38.1895%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.09%)</title><rect x="38.1840%" y="197" width="0.0917%" height="15" fill="rgb(223,33,50)" fg:x="1249" fg:w="3"/><text x="38.4340%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.24%)</title><rect x="39.1318%" y="165" width="0.2446%" height="15" fill="rgb(219,149,13)" fg:x="1280" fg:w="8"/><text x="39.3818%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (49 samples, 1.50%)</title><rect x="38.3980%" y="181" width="1.4980%" height="15" fill="rgb(250,156,29)" fg:x="1256" fg:w="49"/><text x="38.6480%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (17 samples, 0.52%)</title><rect x="39.3763%" y="165" width="0.5197%" height="15" fill="rgb(216,193,19)" fg:x="1288" fg:w="17"/><text x="39.6263%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (63 samples, 1.93%)</title><rect x="38.0312%" y="213" width="1.9260%" height="15" fill="rgb(216,135,14)" fg:x="1244" fg:w="63"/><text x="38.2812%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (55 samples, 1.68%)</title><rect x="38.2758%" y="197" width="1.6814%" height="15" fill="rgb(241,47,5)" fg:x="1252" fg:w="55"/><text x="38.5258%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.06%)</title><rect x="39.8961%" y="181" width="0.0611%" height="15" fill="rgb(233,42,35)" fg:x="1305" fg:w="2"/><text x="40.1461%" y="191.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (291 samples, 8.90%)</title><rect x="31.1526%" y="229" width="8.8964%" height="15" fill="rgb(231,13,6)" fg:x="1019" fg:w="291"/><text x="31.4026%" y="239.50">burst`alloc::..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.09%)</title><rect x="39.9572%" y="213" width="0.0917%" height="15" fill="rgb(207,181,40)" fg:x="1307" fg:w="3"/><text x="40.2072%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.06%)</title><rect x="40.0795%" y="213" width="0.0611%" height="15" fill="rgb(254,173,49)" fg:x="1311" fg:w="2"/><text x="40.3295%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="40.3241%" y="181" width="0.0306%" height="15" fill="rgb(221,1,38)" fg:x="1319" fg:w="1"/><text x="40.5741%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.40%)</title><rect x="40.1406%" y="197" width="0.3974%" height="15" fill="rgb(206,124,46)" fg:x="1313" fg:w="13"/><text x="40.3906%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (6 samples, 0.18%)</title><rect x="40.3546%" y="181" width="0.1834%" height="15" fill="rgb(249,21,11)" fg:x="1320" fg:w="6"/><text x="40.6046%" y="191.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (324 samples, 9.91%)</title><rect x="30.6940%" y="245" width="9.9052%" height="15" fill="rgb(222,201,40)" fg:x="1004" fg:w="324"/><text x="30.9440%" y="255.50">burst`&lt;burst::..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.55%)</title><rect x="40.0489%" y="229" width="0.5503%" height="15" fill="rgb(235,61,29)" fg:x="1310" fg:w="18"/><text x="40.2989%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.46%)</title><rect x="40.1406%" y="213" width="0.4586%" height="15" fill="rgb(219,207,3)" fg:x="1313" fg:w="15"/><text x="40.3906%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.06%)</title><rect x="40.5381%" y="197" width="0.0611%" height="15" fill="rgb(222,56,46)" fg:x="1326" fg:w="2"/><text x="40.7881%" y="207.50"></text></g><g><title>burst`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="40.5992%" y="245" width="0.0306%" height="15" fill="rgb(239,76,54)" fg:x="1328" fg:w="1"/><text x="40.8492%" y="255.50"></text></g><g><title>burst`__rdl_alloc (1 samples, 0.03%)</title><rect x="40.6298%" y="245" width="0.0306%" height="15" fill="rgb(231,124,27)" fg:x="1329" fg:w="1"/><text x="40.8798%" y="255.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (5 samples, 0.15%)</title><rect x="40.6603%" y="245" width="0.1529%" height="15" fill="rgb(249,195,6)" fg:x="1330" fg:w="5"/><text x="40.9103%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.06%)</title><rect x="40.9661%" y="229" width="0.0611%" height="15" fill="rgb(237,174,47)" fg:x="1340" fg:w="2"/><text x="41.2161%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.12%)</title><rect x="41.8832%" y="197" width="0.1223%" height="15" fill="rgb(206,201,31)" fg:x="1370" fg:w="4"/><text x="42.1332%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (45 samples, 1.38%)</title><rect x="41.0884%" y="213" width="1.3757%" height="15" fill="rgb(231,57,52)" fg:x="1344" fg:w="45"/><text x="41.3384%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (15 samples, 0.46%)</title><rect x="42.0055%" y="197" width="0.4586%" height="15" fill="rgb(248,177,22)" fg:x="1374" fg:w="15"/><text x="42.2555%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (56 samples, 1.71%)</title><rect x="40.8132%" y="245" width="1.7120%" height="15" fill="rgb(215,211,37)" fg:x="1335" fg:w="56"/><text x="41.0632%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (49 samples, 1.50%)</title><rect x="41.0272%" y="229" width="1.4980%" height="15" fill="rgb(241,128,51)" fg:x="1342" fg:w="49"/><text x="41.2772%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.06%)</title><rect x="42.4641%" y="213" width="0.0611%" height="15" fill="rgb(227,165,31)" fg:x="1389" fg:w="2"/><text x="42.7141%" y="223.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (397 samples, 12.14%)</title><rect x="30.4800%" y="261" width="12.1370%" height="15" fill="rgb(228,167,24)" fg:x="997" fg:w="397"/><text x="30.7300%" y="271.50">burst`alloc::slice..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.09%)</title><rect x="42.5252%" y="245" width="0.0917%" height="15" fill="rgb(228,143,12)" fg:x="1391" fg:w="3"/><text x="42.7752%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="42.8309%" y="245" width="0.0306%" height="15" fill="rgb(249,149,8)" fg:x="1401" fg:w="1"/><text x="43.0809%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.15%)</title><rect x="43.5647%" y="213" width="0.1529%" height="15" fill="rgb(243,35,44)" fg:x="1425" fg:w="5"/><text x="43.8147%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (43 samples, 1.31%)</title><rect x="42.9227%" y="229" width="1.3146%" height="15" fill="rgb(246,89,9)" fg:x="1404" fg:w="43"/><text x="43.1727%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (17 samples, 0.52%)</title><rect x="43.7175%" y="213" width="0.5197%" height="15" fill="rgb(233,213,13)" fg:x="1430" fg:w="17"/><text x="43.9675%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (55 samples, 1.68%)</title><rect x="42.6169%" y="261" width="1.6814%" height="15" fill="rgb(233,141,41)" fg:x="1394" fg:w="55"/><text x="42.8669%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (47 samples, 1.44%)</title><rect x="42.8615%" y="245" width="1.4369%" height="15" fill="rgb(239,167,4)" fg:x="1402" fg:w="47"/><text x="43.1115%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.06%)</title><rect x="44.2372%" y="229" width="0.0611%" height="15" fill="rgb(209,217,16)" fg:x="1447" fg:w="2"/><text x="44.4872%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.09%)</title><rect x="44.2984%" y="261" width="0.0917%" height="15" fill="rgb(219,88,35)" fg:x="1449" fg:w="3"/><text x="44.5484%" y="271.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (485 samples, 14.83%)</title><rect x="29.5934%" y="277" width="14.8273%" height="15" fill="rgb(220,193,23)" fg:x="968" fg:w="485"/><text x="29.8434%" y="287.50">burst`&lt;burst::dsl::Dsl ..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="44.3901%" y="261" width="0.0306%" height="15" fill="rgb(230,90,52)" fg:x="1452" fg:w="1"/><text x="44.6401%" y="271.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (3 samples, 0.09%)</title><rect x="44.4207%" y="277" width="0.0917%" height="15" fill="rgb(252,106,19)" fg:x="1453" fg:w="3"/><text x="44.6707%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.24%)</title><rect x="44.6958%" y="261" width="0.2446%" height="15" fill="rgb(206,74,20)" fg:x="1462" fg:w="8"/><text x="44.9458%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.15%)</title><rect x="46.1327%" y="229" width="0.1529%" height="15" fill="rgb(230,138,44)" fg:x="1509" fg:w="5"/><text x="46.3827%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (52 samples, 1.59%)</title><rect x="45.0015%" y="245" width="1.5897%" height="15" fill="rgb(235,182,43)" fg:x="1472" fg:w="52"/><text x="45.2515%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (10 samples, 0.31%)</title><rect x="46.2855%" y="229" width="0.3057%" height="15" fill="rgb(242,16,51)" fg:x="1514" fg:w="10"/><text x="46.5355%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (74 samples, 2.26%)</title><rect x="44.5124%" y="277" width="2.2623%" height="15" fill="rgb(248,9,4)" fg:x="1456" fg:w="74"/><text x="44.7624%" y="287.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (60 samples, 1.83%)</title><rect x="44.9404%" y="261" width="1.8343%" height="15" fill="rgb(210,31,22)" fg:x="1470" fg:w="60"/><text x="45.1904%" y="271.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.18%)</title><rect x="46.5913%" y="245" width="0.1834%" height="15" fill="rgb(239,54,39)" fg:x="1524" fg:w="6"/><text x="46.8413%" y="255.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (587 samples, 17.95%)</title><rect x="28.9514%" y="293" width="17.9456%" height="15" fill="rgb(230,99,41)" fg:x="947" fg:w="587"/><text x="29.2014%" y="303.50">burst`&lt;alloc::vec::Vec&lt;T&gt; as..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.12%)</title><rect x="46.7747%" y="277" width="0.1223%" height="15" fill="rgb(253,106,12)" fg:x="1530" fg:w="4"/><text x="47.0247%" y="287.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (7 samples, 0.21%)</title><rect x="46.8970%" y="293" width="0.2140%" height="15" fill="rgb(213,46,41)" fg:x="1534" fg:w="7"/><text x="47.1470%" y="303.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.09%)</title><rect x="47.1110%" y="293" width="0.0917%" height="15" fill="rgb(215,133,35)" fg:x="1541" fg:w="3"/><text x="47.3610%" y="303.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="47.1721%" y="277" width="0.0306%" height="15" fill="rgb(213,28,5)" fg:x="1543" fg:w="1"/><text x="47.4221%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="47.1721%" y="261" width="0.0306%" height="15" fill="rgb(215,77,49)" fg:x="1543" fg:w="1"/><text x="47.4221%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="47.1721%" y="245" width="0.0306%" height="15" fill="rgb(248,100,22)" fg:x="1543" fg:w="1"/><text x="47.4221%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="47.1721%" y="229" width="0.0306%" height="15" fill="rgb(208,67,9)" fg:x="1543" fg:w="1"/><text x="47.4221%" y="239.50"></text></g><g><title>burst`alloc::vec::Vec&lt;T,A&gt;::retain (6 samples, 0.18%)</title><rect x="47.2027%" y="293" width="0.1834%" height="15" fill="rgb(219,133,21)" fg:x="1544" fg:w="6"/><text x="47.4527%" y="303.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.09%)</title><rect x="47.2944%" y="277" width="0.0917%" height="15" fill="rgb(246,46,29)" fg:x="1547" fg:w="3"/><text x="47.5444%" y="287.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (3 samples, 0.09%)</title><rect x="47.2944%" y="261" width="0.0917%" height="15" fill="rgb(246,185,52)" fg:x="1547" fg:w="3"/><text x="47.5444%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.09%)</title><rect x="47.2944%" y="245" width="0.0917%" height="15" fill="rgb(252,136,11)" fg:x="1547" fg:w="3"/><text x="47.5444%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="47.3250%" y="229" width="0.0611%" height="15" fill="rgb(219,138,53)" fg:x="1548" fg:w="2"/><text x="47.5750%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="47.3555%" y="213" width="0.0306%" height="15" fill="rgb(211,51,23)" fg:x="1549" fg:w="1"/><text x="47.6055%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="47.3555%" y="197" width="0.0306%" height="15" fill="rgb(247,221,28)" fg:x="1549" fg:w="1"/><text x="47.6055%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="47.7836%" y="277" width="0.0306%" height="15" fill="rgb(251,222,45)" fg:x="1563" fg:w="1"/><text x="48.0336%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.28%)</title><rect x="48.3338%" y="245" width="0.2751%" height="15" fill="rgb(217,162,53)" fg:x="1581" fg:w="9"/><text x="48.5838%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (34 samples, 1.04%)</title><rect x="47.9058%" y="261" width="1.0394%" height="15" fill="rgb(229,93,14)" fg:x="1567" fg:w="34"/><text x="48.1558%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (11 samples, 0.34%)</title><rect x="48.6090%" y="245" width="0.3363%" height="15" fill="rgb(209,67,49)" fg:x="1590" fg:w="11"/><text x="48.8590%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (54 samples, 1.65%)</title><rect x="47.3861%" y="293" width="1.6509%" height="15" fill="rgb(213,87,29)" fg:x="1550" fg:w="54"/><text x="47.6361%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (40 samples, 1.22%)</title><rect x="47.8141%" y="277" width="1.2229%" height="15" fill="rgb(205,151,52)" fg:x="1564" fg:w="40"/><text x="48.0641%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.09%)</title><rect x="48.9453%" y="261" width="0.0917%" height="15" fill="rgb(253,215,39)" fg:x="1601" fg:w="3"/><text x="49.1953%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.06%)</title><rect x="49.0370%" y="293" width="0.0611%" height="15" fill="rgb(221,220,41)" fg:x="1604" fg:w="2"/><text x="49.2870%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.40%)</title><rect x="49.0981%" y="293" width="0.3974%" height="15" fill="rgb(218,133,21)" fg:x="1606" fg:w="13"/><text x="49.3481%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.18%)</title><rect x="49.3121%" y="277" width="0.1834%" height="15" fill="rgb(221,193,43)" fg:x="1613" fg:w="6"/><text x="49.5621%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.15%)</title><rect x="49.4956%" y="293" width="0.1529%" height="15" fill="rgb(240,128,52)" fg:x="1619" fg:w="5"/><text x="49.7456%" y="303.50"></text></g><g><title>burst`burst::acceptingrun::SolutionStatus&lt;M&gt;::transfix (697 samples, 21.31%)</title><rect x="28.4011%" y="309" width="21.3085%" height="15" fill="rgb(253,114,12)" fg:x="929" fg:w="697"/><text x="28.6511%" y="319.50">burst`burst::acceptingrun::Solutio..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.06%)</title><rect x="49.6484%" y="293" width="0.0611%" height="15" fill="rgb(215,223,47)" fg:x="1624" fg:w="2"/><text x="49.8984%" y="303.50"></text></g><g><title>burst`DYLD-STUB$$free (5 samples, 0.15%)</title><rect x="49.8624%" y="293" width="0.1529%" height="15" fill="rgb(248,225,23)" fg:x="1631" fg:w="5"/><text x="50.1124%" y="303.50"></text></g><g><title>burst`__rust_dealloc (1 samples, 0.03%)</title><rect x="50.0153%" y="293" width="0.0306%" height="15" fill="rgb(250,108,0)" fg:x="1636" fg:w="1"/><text x="50.2653%" y="303.50"></text></g><g><title>burst`DYLD-STUB$$free (3 samples, 0.09%)</title><rect x="52.2164%" y="277" width="0.0917%" height="15" fill="rgb(228,208,7)" fg:x="1708" fg:w="3"/><text x="52.4664%" y="287.50"></text></g><g><title>burst`DYLD-STUB$$free (4 samples, 0.12%)</title><rect x="53.2865%" y="261" width="0.1223%" height="15" fill="rgb(244,45,10)" fg:x="1743" fg:w="4"/><text x="53.5365%" y="271.50"></text></g><g><title>burst`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="58.6671%" y="229" width="0.0306%" height="15" fill="rgb(207,125,25)" fg:x="1919" fg:w="1"/><text x="58.9171%" y="239.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (2 samples, 0.06%)</title><rect x="59.2174%" y="197" width="0.0611%" height="15" fill="rgb(210,195,18)" fg:x="1937" fg:w="2"/><text x="59.4674%" y="207.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (10 samples, 0.31%)</title><rect x="59.0034%" y="213" width="0.3057%" height="15" fill="rgb(249,80,12)" fg:x="1930" fg:w="10"/><text x="59.2534%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="59.2785%" y="197" width="0.0306%" height="15" fill="rgb(221,65,9)" fg:x="1939" fg:w="1"/><text x="59.5285%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (15 samples, 0.46%)</title><rect x="59.3091%" y="213" width="0.4586%" height="15" fill="rgb(235,49,36)" fg:x="1940" fg:w="15"/><text x="59.5591%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.21%)</title><rect x="59.5537%" y="197" width="0.2140%" height="15" fill="rgb(225,32,20)" fg:x="1948" fg:w="7"/><text x="59.8037%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="59.7677%" y="213" width="0.0306%" height="15" fill="rgb(215,141,46)" fg:x="1955" fg:w="1"/><text x="60.0177%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.15%)</title><rect x="59.7982%" y="213" width="0.1529%" height="15" fill="rgb(250,160,47)" fg:x="1956" fg:w="5"/><text x="60.0482%" y="223.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (47 samples, 1.44%)</title><rect x="58.6976%" y="229" width="1.4369%" height="15" fill="rgb(216,222,40)" fg:x="1920" fg:w="47"/><text x="58.9476%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.18%)</title><rect x="59.9511%" y="213" width="0.1834%" height="15" fill="rgb(234,217,39)" fg:x="1961" fg:w="6"/><text x="60.2011%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.43%)</title><rect x="60.1345%" y="229" width="0.4280%" height="15" fill="rgb(207,178,40)" fg:x="1967" fg:w="14"/><text x="60.3845%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.18%)</title><rect x="60.3791%" y="213" width="0.1834%" height="15" fill="rgb(221,136,13)" fg:x="1975" fg:w="6"/><text x="60.6291%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="60.5625%" y="229" width="0.0306%" height="15" fill="rgb(249,199,10)" fg:x="1981" fg:w="1"/><text x="60.8125%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.15%)</title><rect x="60.5931%" y="229" width="0.1529%" height="15" fill="rgb(249,222,13)" fg:x="1982" fg:w="5"/><text x="60.8431%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (2 samples, 0.06%)</title><rect x="60.6848%" y="213" width="0.0611%" height="15" fill="rgb(244,185,38)" fg:x="1985" fg:w="2"/><text x="60.9348%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.06%)</title><rect x="60.6848%" y="197" width="0.0611%" height="15" fill="rgb(236,202,9)" fg:x="1985" fg:w="2"/><text x="60.9348%" y="207.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (111 samples, 3.39%)</title><rect x="57.4136%" y="245" width="3.3935%" height="15" fill="rgb(250,229,37)" fg:x="1878" fg:w="111"/><text x="57.6636%" y="255.50">bur..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.06%)</title><rect x="60.7459%" y="229" width="0.0611%" height="15" fill="rgb(206,174,23)" fg:x="1987" fg:w="2"/><text x="60.9959%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="60.8071%" y="245" width="0.0306%" height="15" fill="rgb(211,33,43)" fg:x="1989" fg:w="1"/><text x="61.0571%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (52 samples, 1.59%)</title><rect x="60.8377%" y="245" width="1.5897%" height="15" fill="rgb(245,58,50)" fg:x="1990" fg:w="52"/><text x="61.0877%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (28 samples, 0.86%)</title><rect x="61.5714%" y="229" width="0.8560%" height="15" fill="rgb(244,68,36)" fg:x="2014" fg:w="28"/><text x="61.8214%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.09%)</title><rect x="62.4274%" y="245" width="0.0917%" height="15" fill="rgb(232,229,15)" fg:x="2042" fg:w="3"/><text x="62.6774%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (14 samples, 0.43%)</title><rect x="62.5191%" y="245" width="0.4280%" height="15" fill="rgb(254,30,23)" fg:x="2045" fg:w="14"/><text x="62.7691%" y="255.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (318 samples, 9.72%)</title><rect x="53.4087%" y="261" width="9.7218%" height="15" fill="rgb(235,160,14)" fg:x="1747" fg:w="318"/><text x="53.6587%" y="271.50">burst`core::pt..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.18%)</title><rect x="62.9471%" y="245" width="0.1834%" height="15" fill="rgb(212,155,44)" fg:x="2059" fg:w="6"/><text x="63.1971%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.06%)</title><rect x="63.1305%" y="261" width="0.0611%" height="15" fill="rgb(226,2,50)" fg:x="2065" fg:w="2"/><text x="63.3805%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (19 samples, 0.58%)</title><rect x="63.9865%" y="245" width="0.5809%" height="15" fill="rgb(234,177,6)" fg:x="2093" fg:w="19"/><text x="64.2365%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (46 samples, 1.41%)</title><rect x="63.1917%" y="261" width="1.4063%" height="15" fill="rgb(217,24,9)" fg:x="2067" fg:w="46"/><text x="63.4417%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="64.5674%" y="245" width="0.0306%" height="15" fill="rgb(220,13,46)" fg:x="2112" fg:w="1"/><text x="64.8174%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.09%)</title><rect x="64.5980%" y="261" width="0.0917%" height="15" fill="rgb(239,221,27)" fg:x="2113" fg:w="3"/><text x="64.8480%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (34 samples, 1.04%)</title><rect x="64.6897%" y="261" width="1.0394%" height="15" fill="rgb(222,198,25)" fg:x="2116" fg:w="34"/><text x="64.9397%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (3 samples, 0.09%)</title><rect x="65.6374%" y="245" width="0.0917%" height="15" fill="rgb(211,99,13)" fg:x="2147" fg:w="3"/><text x="65.8874%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.09%)</title><rect x="65.6374%" y="229" width="0.0917%" height="15" fill="rgb(232,111,31)" fg:x="2147" fg:w="3"/><text x="65.8874%" y="239.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (442 samples, 13.51%)</title><rect x="52.3082%" y="277" width="13.5127%" height="15" fill="rgb(245,82,37)" fg:x="1711" fg:w="442"/><text x="52.5582%" y="287.50">burst`core::ptr::dro..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.09%)</title><rect x="65.7291%" y="261" width="0.0917%" height="15" fill="rgb(227,149,46)" fg:x="2150" fg:w="3"/><text x="65.9791%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="65.8208%" y="277" width="0.0306%" height="15" fill="rgb(218,36,50)" fg:x="2153" fg:w="1"/><text x="66.0708%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (66 samples, 2.02%)</title><rect x="65.8514%" y="277" width="2.0177%" height="15" fill="rgb(226,80,48)" fg:x="2154" fg:w="66"/><text x="66.1014%" y="287.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (27 samples, 0.83%)</title><rect x="67.0437%" y="261" width="0.8254%" height="15" fill="rgb(238,224,15)" fg:x="2193" fg:w="27"/><text x="67.2937%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.12%)</title><rect x="67.8692%" y="277" width="0.1223%" height="15" fill="rgb(241,136,10)" fg:x="2220" fg:w="4"/><text x="68.1192%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (23 samples, 0.70%)</title><rect x="67.9914%" y="277" width="0.7031%" height="15" fill="rgb(208,32,45)" fg:x="2224" fg:w="23"/><text x="68.2414%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (11 samples, 0.34%)</title><rect x="68.3583%" y="261" width="0.3363%" height="15" fill="rgb(207,135,9)" fg:x="2236" fg:w="11"/><text x="68.6083%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (11 samples, 0.34%)</title><rect x="68.3583%" y="245" width="0.3363%" height="15" fill="rgb(206,86,44)" fg:x="2236" fg:w="11"/><text x="68.6083%" y="255.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (612 samples, 18.71%)</title><rect x="50.0459%" y="293" width="18.7099%" height="15" fill="rgb(245,177,15)" fg:x="1637" fg:w="612"/><text x="50.2959%" y="303.50">burst`core::ptr::drop_in_plac..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.06%)</title><rect x="68.6946%" y="277" width="0.0611%" height="15" fill="rgb(206,64,50)" fg:x="2247" fg:w="2"/><text x="68.9446%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (7 samples, 0.21%)</title><rect x="68.7557%" y="293" width="0.2140%" height="15" fill="rgb(234,36,40)" fg:x="2249" fg:w="7"/><text x="69.0057%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (43 samples, 1.31%)</title><rect x="68.9697%" y="293" width="1.3146%" height="15" fill="rgb(213,64,8)" fg:x="2256" fg:w="43"/><text x="69.2197%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (17 samples, 0.52%)</title><rect x="69.7646%" y="277" width="0.5197%" height="15" fill="rgb(210,75,36)" fg:x="2282" fg:w="17"/><text x="70.0146%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.21%)</title><rect x="70.2843%" y="293" width="0.2140%" height="15" fill="rgb(229,88,21)" fg:x="2299" fg:w="7"/><text x="70.5343%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (22 samples, 0.67%)</title><rect x="70.4983%" y="293" width="0.6726%" height="15" fill="rgb(252,204,47)" fg:x="2306" fg:w="22"/><text x="70.7483%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (8 samples, 0.24%)</title><rect x="70.9263%" y="277" width="0.2446%" height="15" fill="rgb(208,77,27)" fg:x="2320" fg:w="8"/><text x="71.1763%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.24%)</title><rect x="70.9263%" y="261" width="0.2446%" height="15" fill="rgb(221,76,26)" fg:x="2320" fg:w="8"/><text x="71.1763%" y="271.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (705 samples, 21.55%)</title><rect x="49.7096%" y="309" width="21.5530%" height="15" fill="rgb(225,139,18)" fg:x="1626" fg:w="705"/><text x="49.9596%" y="319.50">burst`core::ptr::drop_in_place&lt;bur..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.09%)</title><rect x="71.1709%" y="293" width="0.0917%" height="15" fill="rgb(230,137,11)" fg:x="2328" fg:w="3"/><text x="71.4209%" y="303.50"></text></g><g><title>burst`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (23 samples, 0.70%)</title><rect x="71.2626%" y="309" width="0.7031%" height="15" fill="rgb(212,28,1)" fg:x="2331" fg:w="23"/><text x="71.5126%" y="319.50"></text></g><g><title>burst`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.03%)</title><rect x="71.9352%" y="293" width="0.0306%" height="15" fill="rgb(248,164,17)" fg:x="2353" fg:w="1"/><text x="72.1852%" y="303.50"></text></g><g><title>burst`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="71.9352%" y="277" width="0.0306%" height="15" fill="rgb(222,171,42)" fg:x="2353" fg:w="1"/><text x="72.1852%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="71.9352%" y="261" width="0.0306%" height="15" fill="rgb(243,84,45)" fg:x="2353" fg:w="1"/><text x="72.1852%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="71.9352%" y="245" width="0.0306%" height="15" fill="rgb(252,49,23)" fg:x="2353" fg:w="1"/><text x="72.1852%" y="255.50"></text></g><g><title>burst`hashbrown::map::make_hash (24 samples, 0.73%)</title><rect x="71.9658%" y="309" width="0.7337%" height="15" fill="rgb(215,19,7)" fg:x="2354" fg:w="24"/><text x="72.2158%" y="319.50"></text></g><g><title>burst`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (42 samples, 1.28%)</title><rect x="72.6995%" y="309" width="1.2840%" height="15" fill="rgb(238,81,41)" fg:x="2378" fg:w="42"/><text x="72.9495%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="73.9835%" y="309" width="0.0306%" height="15" fill="rgb(210,199,37)" fg:x="2420" fg:w="1"/><text x="74.2335%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="74.0141%" y="309" width="0.0306%" height="15" fill="rgb(244,192,49)" fg:x="2421" fg:w="1"/><text x="74.2641%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.12%)</title><rect x="74.0446%" y="309" width="0.1223%" height="15" fill="rgb(226,211,11)" fg:x="2422" fg:w="4"/><text x="74.2946%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (15 samples, 0.46%)</title><rect x="75.0841%" y="293" width="0.4586%" height="15" fill="rgb(236,162,54)" fg:x="2456" fg:w="15"/><text x="75.3341%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (46 samples, 1.41%)</title><rect x="74.1669%" y="309" width="1.4063%" height="15" fill="rgb(220,229,9)" fg:x="2426" fg:w="46"/><text x="74.4169%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.03%)</title><rect x="75.5426%" y="293" width="0.0306%" height="15" fill="rgb(250,87,22)" fg:x="2471" fg:w="1"/><text x="75.7926%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (10 samples, 0.31%)</title><rect x="75.6038%" y="293" width="0.3057%" height="15" fill="rgb(239,43,17)" fg:x="2473" fg:w="10"/><text x="75.8538%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (12 samples, 0.37%)</title><rect x="75.5732%" y="309" width="0.3669%" height="15" fill="rgb(231,177,25)" fg:x="2472" fg:w="12"/><text x="75.8232%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_add_ptr (1 samples, 0.03%)</title><rect x="75.9095%" y="293" width="0.0306%" height="15" fill="rgb(219,179,1)" fg:x="2483" fg:w="1"/><text x="76.1595%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.03%)</title><rect x="75.9401%" y="309" width="0.0306%" height="15" fill="rgb(238,219,53)" fg:x="2484" fg:w="1"/><text x="76.1901%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (1 samples, 0.03%)</title><rect x="75.9401%" y="293" width="0.0306%" height="15" fill="rgb(232,167,36)" fg:x="2484" fg:w="1"/><text x="76.1901%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="75.9401%" y="277" width="0.0306%" height="15" fill="rgb(244,19,51)" fg:x="2484" fg:w="1"/><text x="76.1901%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (10 samples, 0.31%)</title><rect x="75.9707%" y="309" width="0.3057%" height="15" fill="rgb(224,6,22)" fg:x="2485" fg:w="10"/><text x="76.2207%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (83 samples, 2.54%)</title><rect x="76.2764%" y="309" width="2.5375%" height="15" fill="rgb(224,145,5)" fg:x="2495" fg:w="83"/><text x="76.5264%" y="319.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (64 samples, 1.96%)</title><rect x="76.8572%" y="293" width="1.9566%" height="15" fill="rgb(234,130,49)" fg:x="2514" fg:w="64"/><text x="77.1072%" y="303.50">l..</text></g><g><title>libsystem_kernel.dylib`madvise (64 samples, 1.96%)</title><rect x="76.8572%" y="277" width="1.9566%" height="15" fill="rgb(254,6,2)" fg:x="2514" fg:w="64"/><text x="77.1072%" y="287.50">l..</text></g><g><title>burst`burst::acceptingrun::_&lt;impl burst::ntfa::NTFABuilder&gt;::get_boring_accepting_run (2,130 samples, 65.12%)</title><rect x="13.8490%" y="325" width="65.1177%" height="15" fill="rgb(208,96,46)" fg:x="453" fg:w="2130"/><text x="14.0990%" y="335.50">burst`burst::acceptingrun::_&lt;impl burst::ntfa::NTFABuilder&gt;::get_boring_accepting_run</text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.15%)</title><rect x="78.8138%" y="309" width="0.1529%" height="15" fill="rgb(239,3,39)" fg:x="2578" fg:w="5"/><text x="79.0638%" y="319.50"></text></g><g><title>burst`burst::intersect::_&lt;impl burst::ntfa::NTFABuilder&gt;::intersect (96 samples, 2.93%)</title><rect x="78.9667%" y="325" width="2.9349%" height="15" fill="rgb(233,210,1)" fg:x="2583" fg:w="96"/><text x="79.2167%" y="335.50">bu..</text></g><g><title>burst`burst::intersect::_&lt;impl burst::ntfa::NTFABuilder&gt;::intersect::getmergedvl (3 samples, 0.09%)</title><rect x="81.9016%" y="325" width="0.0917%" height="15" fill="rgb(244,137,37)" fg:x="2679" fg:w="3"/><text x="82.1516%" y="335.50"></text></g><g><title>burst`&lt;burst::ntfa::Transition as core::cmp::PartialOrd&gt;::partial_cmp (83 samples, 2.54%)</title><rect x="81.9933%" y="309" width="2.5375%" height="15" fill="rgb(240,136,2)" fg:x="2682" fg:w="83"/><text x="82.2433%" y="319.50">bu..</text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (19 samples, 0.58%)</title><rect x="84.5307%" y="309" width="0.5809%" height="15" fill="rgb(239,18,37)" fg:x="2765" fg:w="19"/><text x="84.7807%" y="319.50"></text></g><g><title>burst`DYLD-STUB$$malloc (3 samples, 0.09%)</title><rect x="85.1116%" y="309" width="0.0917%" height="15" fill="rgb(218,185,22)" fg:x="2784" fg:w="3"/><text x="85.3616%" y="319.50"></text></g><g><title>burst`__rdl_alloc (2 samples, 0.06%)</title><rect x="85.2033%" y="309" width="0.0611%" height="15" fill="rgb(225,218,4)" fg:x="2787" fg:w="2"/><text x="85.4533%" y="319.50"></text></g><g><title>burst`__rdl_alloc (2 samples, 0.06%)</title><rect x="85.3867%" y="293" width="0.0611%" height="15" fill="rgb(230,182,32)" fg:x="2793" fg:w="2"/><text x="85.6367%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.06%)</title><rect x="85.8453%" y="229" width="0.0611%" height="15" fill="rgb(242,56,43)" fg:x="2808" fg:w="2"/><text x="86.0953%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (24 samples, 0.73%)</title><rect x="85.4479%" y="277" width="0.7337%" height="15" fill="rgb(233,99,24)" fg:x="2795" fg:w="24"/><text x="85.6979%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (22 samples, 0.67%)</title><rect x="85.5090%" y="261" width="0.6726%" height="15" fill="rgb(234,209,42)" fg:x="2797" fg:w="22"/><text x="85.7590%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (21 samples, 0.64%)</title><rect x="85.5396%" y="245" width="0.6420%" height="15" fill="rgb(227,7,12)" fg:x="2798" fg:w="21"/><text x="85.7896%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (9 samples, 0.28%)</title><rect x="85.9065%" y="229" width="0.2751%" height="15" fill="rgb(245,203,43)" fg:x="2810" fg:w="9"/><text x="86.1565%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="86.1816%" y="277" width="0.0306%" height="15" fill="rgb(238,205,33)" fg:x="2819" fg:w="1"/><text x="86.4316%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="86.2122%" y="277" width="0.0611%" height="15" fill="rgb(231,56,7)" fg:x="2820" fg:w="2"/><text x="86.4622%" y="287.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (34 samples, 1.04%)</title><rect x="85.2644%" y="309" width="1.0394%" height="15" fill="rgb(244,186,29)" fg:x="2789" fg:w="34"/><text x="85.5144%" y="319.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (28 samples, 0.86%)</title><rect x="85.4479%" y="293" width="0.8560%" height="15" fill="rgb(234,111,31)" fg:x="2795" fg:w="28"/><text x="85.6979%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.03%)</title><rect x="86.2733%" y="277" width="0.0306%" height="15" fill="rgb(241,149,10)" fg:x="2822" fg:w="1"/><text x="86.5233%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.03%)</title><rect x="86.2733%" y="261" width="0.0306%" height="15" fill="rgb(249,206,44)" fg:x="2822" fg:w="1"/><text x="86.5233%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.03%)</title><rect x="86.2733%" y="245" width="0.0306%" height="15" fill="rgb(251,153,30)" fg:x="2822" fg:w="1"/><text x="86.5233%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="86.2733%" y="229" width="0.0306%" height="15" fill="rgb(239,152,38)" fg:x="2822" fg:w="1"/><text x="86.5233%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="86.2733%" y="213" width="0.0306%" height="15" fill="rgb(249,139,47)" fg:x="2822" fg:w="1"/><text x="86.5233%" y="223.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (2 samples, 0.06%)</title><rect x="86.3039%" y="309" width="0.0611%" height="15" fill="rgb(244,64,35)" fg:x="2823" fg:w="2"/><text x="86.5539%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="87.9242%" y="213" width="0.0306%" height="15" fill="rgb(216,46,15)" fg:x="2876" fg:w="1"/><text x="88.1742%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.06%)</title><rect x="87.9242%" y="229" width="0.0611%" height="15" fill="rgb(250,74,19)" fg:x="2876" fg:w="2"/><text x="88.1742%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="87.9548%" y="213" width="0.0306%" height="15" fill="rgb(249,42,33)" fg:x="2877" fg:w="1"/><text x="88.2048%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="87.9548%" y="197" width="0.0306%" height="15" fill="rgb(242,149,17)" fg:x="2877" fg:w="1"/><text x="88.2048%" y="207.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.18%)</title><rect x="87.9242%" y="293" width="0.1834%" height="15" fill="rgb(244,29,21)" fg:x="2876" fg:w="6"/><text x="88.1742%" y="303.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (6 samples, 0.18%)</title><rect x="87.9242%" y="277" width="0.1834%" height="15" fill="rgb(220,130,37)" fg:x="2876" fg:w="6"/><text x="88.1742%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`realloc (6 samples, 0.18%)</title><rect x="87.9242%" y="261" width="0.1834%" height="15" fill="rgb(211,67,2)" fg:x="2876" fg:w="6"/><text x="88.1742%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (6 samples, 0.18%)</title><rect x="87.9242%" y="245" width="0.1834%" height="15" fill="rgb(235,68,52)" fg:x="2876" fg:w="6"/><text x="88.1742%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.12%)</title><rect x="87.9853%" y="229" width="0.1223%" height="15" fill="rgb(246,142,3)" fg:x="2878" fg:w="4"/><text x="88.2353%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.09%)</title><rect x="88.9025%" y="245" width="0.0917%" height="15" fill="rgb(241,25,7)" fg:x="2908" fg:w="3"/><text x="89.1525%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (30 samples, 0.92%)</title><rect x="88.3522%" y="261" width="0.9172%" height="15" fill="rgb(242,119,39)" fg:x="2890" fg:w="30"/><text x="88.6022%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (9 samples, 0.28%)</title><rect x="88.9942%" y="245" width="0.2751%" height="15" fill="rgb(241,98,45)" fg:x="2911" fg:w="9"/><text x="89.2442%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (40 samples, 1.22%)</title><rect x="88.1076%" y="293" width="1.2229%" height="15" fill="rgb(254,28,30)" fg:x="2882" fg:w="40"/><text x="88.3576%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (35 samples, 1.07%)</title><rect x="88.2605%" y="277" width="1.0700%" height="15" fill="rgb(241,142,54)" fg:x="2887" fg:w="35"/><text x="88.5105%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.06%)</title><rect x="89.2693%" y="261" width="0.0611%" height="15" fill="rgb(222,85,15)" fg:x="2920" fg:w="2"/><text x="89.5193%" y="271.50"></text></g><g><title>burst`burst::intersect::_&lt;impl burst::ntfa::NTFABuilder&gt;::intersect::getmergedvl (99 samples, 3.03%)</title><rect x="86.3650%" y="309" width="3.0266%" height="15" fill="rgb(210,85,47)" fg:x="2825" fg:w="99"/><text x="86.6150%" y="319.50">bur..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.06%)</title><rect x="89.3305%" y="293" width="0.0611%" height="15" fill="rgb(224,206,25)" fg:x="2922" fg:w="2"/><text x="89.5805%" y="303.50"></text></g><g><title>burst`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.34%)</title><rect x="90.5839%" y="293" width="0.3363%" height="15" fill="rgb(243,201,19)" fg:x="2963" fg:w="11"/><text x="90.8339%" y="303.50"></text></g><g><title>burst`burst::ntfa::NTFABuilder::accessibility_cleaning (51 samples, 1.56%)</title><rect x="89.3916%" y="309" width="1.5592%" height="15" fill="rgb(236,59,4)" fg:x="2924" fg:w="51"/><text x="89.6416%" y="319.50"></text></g><g><title>burst`alloc::vec::Vec&lt;T,A&gt;::retain (1 samples, 0.03%)</title><rect x="90.9202%" y="293" width="0.0306%" height="15" fill="rgb(254,179,45)" fg:x="2974" fg:w="1"/><text x="91.1702%" y="303.50"></text></g><g><title>burst`DYLD-STUB$$memcmp (1 samples, 0.03%)</title><rect x="91.1342%" y="293" width="0.0306%" height="15" fill="rgb(226,14,10)" fg:x="2981" fg:w="1"/><text x="91.3842%" y="303.50"></text></g><g><title>burst`alloc::vec::Vec&lt;T,A&gt;::dedup_by (9 samples, 0.28%)</title><rect x="91.1648%" y="293" width="0.2751%" height="15" fill="rgb(244,27,41)" fg:x="2982" fg:w="9"/><text x="91.4148%" y="303.50"></text></g><g><title>burst`core::slice::sort::partial_insertion_sort (1 samples, 0.03%)</title><rect x="91.9596%" y="261" width="0.0306%" height="15" fill="rgb(235,35,32)" fg:x="3008" fg:w="1"/><text x="92.2096%" y="271.50"></text></g><g><title>burst`core::slice::sort::partial_insertion_sort (1 samples, 0.03%)</title><rect x="92.3876%" y="245" width="0.0306%" height="15" fill="rgb(218,68,31)" fg:x="3022" fg:w="1"/><text x="92.6376%" y="255.50"></text></g><g><title>burst`core::slice::sort::partial_insertion_sort (1 samples, 0.03%)</title><rect x="92.8462%" y="213" width="0.0306%" height="15" fill="rgb(207,120,37)" fg:x="3037" fg:w="1"/><text x="93.0962%" y="223.50"></text></g><g><title>burst`core::slice::sort::recurse (2 samples, 0.06%)</title><rect x="92.8768%" y="197" width="0.0611%" height="15" fill="rgb(227,98,0)" fg:x="3038" fg:w="2"/><text x="93.1268%" y="207.50"></text></g><g><title>burst`core::slice::sort::shift_tail (2 samples, 0.06%)</title><rect x="92.8768%" y="181" width="0.0611%" height="15" fill="rgb(207,7,3)" fg:x="3038" fg:w="2"/><text x="93.1268%" y="191.50"></text></g><g><title>burst`core::slice::sort::recurse (7 samples, 0.21%)</title><rect x="92.8768%" y="213" width="0.2140%" height="15" fill="rgb(206,98,19)" fg:x="3038" fg:w="7"/><text x="93.1268%" y="223.50"></text></g><g><title>burst`core::slice::sort::shift_tail (5 samples, 0.15%)</title><rect x="92.9379%" y="197" width="0.1529%" height="15" fill="rgb(217,5,26)" fg:x="3040" fg:w="5"/><text x="93.1879%" y="207.50"></text></g><g><title>burst`core::slice::sort::recurse (19 samples, 0.58%)</title><rect x="92.7239%" y="229" width="0.5809%" height="15" fill="rgb(235,190,38)" fg:x="3033" fg:w="19"/><text x="92.9739%" y="239.50"></text></g><g><title>burst`core::slice::sort::shift_tail (7 samples, 0.21%)</title><rect x="93.0908%" y="213" width="0.2140%" height="15" fill="rgb(247,86,24)" fg:x="3045" fg:w="7"/><text x="93.3408%" y="223.50"></text></g><g><title>burst`core::slice::sort::recurse (42 samples, 1.28%)</title><rect x="92.4182%" y="245" width="1.2840%" height="15" fill="rgb(205,101,16)" fg:x="3023" fg:w="42"/><text x="92.6682%" y="255.50"></text></g><g><title>burst`core::slice::sort::shift_tail (13 samples, 0.40%)</title><rect x="93.3048%" y="229" width="0.3974%" height="15" fill="rgb(246,168,33)" fg:x="3052" fg:w="13"/><text x="93.5548%" y="239.50"></text></g><g><title>burst`core::slice::sort::recurse (62 samples, 1.90%)</title><rect x="91.9902%" y="261" width="1.8954%" height="15" fill="rgb(231,114,1)" fg:x="3009" fg:w="62"/><text x="92.2402%" y="271.50">b..</text></g><g><title>burst`core::slice::sort::shift_tail (6 samples, 0.18%)</title><rect x="93.7022%" y="245" width="0.1834%" height="15" fill="rgb(207,184,53)" fg:x="3065" fg:w="6"/><text x="93.9522%" y="255.50"></text></g><g><title>burst`core::slice::sort::recurse (74 samples, 2.26%)</title><rect x="91.7151%" y="277" width="2.2623%" height="15" fill="rgb(224,95,51)" fg:x="3000" fg:w="74"/><text x="91.9651%" y="287.50">b..</text></g><g><title>burst`core::slice::sort::shift_tail (3 samples, 0.09%)</title><rect x="93.8857%" y="261" width="0.0917%" height="15" fill="rgb(212,188,45)" fg:x="3071" fg:w="3"/><text x="94.1357%" y="271.50"></text></g><g><title>burst`core::slice::sort::recurse (84 samples, 2.57%)</title><rect x="91.4399%" y="293" width="2.5680%" height="15" fill="rgb(223,154,38)" fg:x="2991" fg:w="84"/><text x="91.6899%" y="303.50">bu..</text></g><g><title>burst`core::slice::sort::shift_tail (1 samples, 0.03%)</title><rect x="93.9774%" y="277" width="0.0306%" height="15" fill="rgb(251,22,52)" fg:x="3074" fg:w="1"/><text x="94.2274%" y="287.50"></text></g><g><title>burst`core::slice::sort::shift_tail (1 samples, 0.03%)</title><rect x="94.0079%" y="293" width="0.0306%" height="15" fill="rgb(229,209,22)" fg:x="3075" fg:w="1"/><text x="94.2579%" y="303.50"></text></g><g><title>burst`burst::ntfa::NTFABuilder::insert_into_placeholder (102 samples, 3.12%)</title><rect x="90.9508%" y="309" width="3.1183%" height="15" fill="rgb(234,138,34)" fg:x="2975" fg:w="102"/><text x="91.2008%" y="319.50">bur..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.03%)</title><rect x="94.0385%" y="293" width="0.0306%" height="15" fill="rgb(212,95,11)" fg:x="3076" fg:w="1"/><text x="94.2885%" y="303.50"></text></g><g><title>burst`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="94.0691%" y="309" width="0.0306%" height="15" fill="rgb(240,179,47)" fg:x="3077" fg:w="1"/><text x="94.3191%" y="319.50"></text></g><g><title>burst`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.03%)</title><rect x="94.0691%" y="293" width="0.0306%" height="15" fill="rgb(240,163,11)" fg:x="3077" fg:w="1"/><text x="94.3191%" y="303.50"></text></g><g><title>burst`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="94.0691%" y="277" width="0.0306%" height="15" fill="rgb(236,37,12)" fg:x="3077" fg:w="1"/><text x="94.3191%" y="287.50"></text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="94.0691%" y="261" width="0.0306%" height="15" fill="rgb(232,164,16)" fg:x="3077" fg:w="1"/><text x="94.3191%" y="271.50"></text></g><g><title>burst`hashbrown::map::make_hash (21 samples, 0.64%)</title><rect x="94.0997%" y="309" width="0.6420%" height="15" fill="rgb(244,205,15)" fg:x="3078" fg:w="21"/><text x="94.3497%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (17 samples, 0.52%)</title><rect x="95.1085%" y="293" width="0.5197%" height="15" fill="rgb(223,117,47)" fg:x="3111" fg:w="17"/><text x="95.3585%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (32 samples, 0.98%)</title><rect x="94.7417%" y="309" width="0.9783%" height="15" fill="rgb(244,107,35)" fg:x="3099" fg:w="32"/><text x="94.9917%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.09%)</title><rect x="95.6282%" y="293" width="0.0917%" height="15" fill="rgb(205,140,8)" fg:x="3128" fg:w="3"/><text x="95.8782%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.03%)</title><rect x="95.7200%" y="309" width="0.0306%" height="15" fill="rgb(228,84,46)" fg:x="3131" fg:w="1"/><text x="95.9700%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="95.7200%" y="293" width="0.0306%" height="15" fill="rgb(254,188,9)" fg:x="3131" fg:w="1"/><text x="95.9700%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.03%)</title><rect x="95.7505%" y="309" width="0.0306%" height="15" fill="rgb(206,112,54)" fg:x="3132" fg:w="1"/><text x="96.0005%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.06%)</title><rect x="95.7811%" y="309" width="0.0611%" height="15" fill="rgb(216,84,49)" fg:x="3133" fg:w="2"/><text x="96.0311%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (20 samples, 0.61%)</title><rect x="95.8423%" y="309" width="0.6114%" height="15" fill="rgb(214,194,35)" fg:x="3135" fg:w="20"/><text x="96.0923%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (11 samples, 0.34%)</title><rect x="96.1174%" y="293" width="0.3363%" height="15" fill="rgb(249,28,3)" fg:x="3144" fg:w="11"/><text x="96.3674%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (11 samples, 0.34%)</title><rect x="96.1174%" y="277" width="0.3363%" height="15" fill="rgb(222,56,52)" fg:x="3144" fg:w="11"/><text x="96.3674%" y="287.50"></text></g><g><title>burst`burst::intersect::_&lt;impl burst::ntfa::NTFABuilder&gt;::intersect (476 samples, 14.55%)</title><rect x="81.9933%" y="325" width="14.5521%" height="15" fill="rgb(245,217,50)" fg:x="2682" fg:w="476"/><text x="82.2433%" y="335.50">burst`burst::intersect..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.09%)</title><rect x="96.4537%" y="309" width="0.0917%" height="15" fill="rgb(213,201,24)" fg:x="3155" fg:w="3"/><text x="96.7037%" y="319.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="96.6065%" y="309" width="0.0306%" height="15" fill="rgb(248,116,28)" fg:x="3160" fg:w="1"/><text x="96.8565%" y="319.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="96.6065%" y="293" width="0.0306%" height="15" fill="rgb(219,72,43)" fg:x="3160" fg:w="1"/><text x="96.8565%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="96.6065%" y="277" width="0.0306%" height="15" fill="rgb(209,138,14)" fg:x="3160" fg:w="1"/><text x="96.8565%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="96.6065%" y="261" width="0.0306%" height="15" fill="rgb(222,18,33)" fg:x="3160" fg:w="1"/><text x="96.8565%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="96.6065%" y="245" width="0.0306%" height="15" fill="rgb(213,199,7)" fg:x="3160" fg:w="1"/><text x="96.8565%" y="255.50"></text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="96.6677%" y="293" width="0.0306%" height="15" fill="rgb(250,110,10)" fg:x="3162" fg:w="1"/><text x="96.9177%" y="303.50"></text></g><g><title>burst`burst::nftabuilder::ExpressionBuilder::get_constructed (3 samples, 0.09%)</title><rect x="96.6371%" y="309" width="0.0917%" height="15" fill="rgb(248,123,6)" fg:x="3161" fg:w="3"/><text x="96.8871%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="96.6983%" y="293" width="0.0306%" height="15" fill="rgb(206,91,31)" fg:x="3163" fg:w="1"/><text x="96.9483%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="96.6983%" y="277" width="0.0306%" height="15" fill="rgb(211,154,13)" fg:x="3163" fg:w="1"/><text x="96.9483%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="96.6983%" y="261" width="0.0306%" height="15" fill="rgb(225,148,7)" fg:x="3163" fg:w="1"/><text x="96.9483%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="96.7288%" y="213" width="0.0306%" height="15" fill="rgb(220,160,43)" fg:x="3164" fg:w="1"/><text x="96.9788%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="96.7288%" y="197" width="0.0306%" height="15" fill="rgb(213,52,39)" fg:x="3164" fg:w="1"/><text x="96.9788%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="96.7288%" y="181" width="0.0306%" height="15" fill="rgb(243,137,7)" fg:x="3164" fg:w="1"/><text x="96.9788%" y="191.50"></text></g><g><title>burst`burst::ntfa::PartialNTFA::add_rule (3 samples, 0.09%)</title><rect x="96.7288%" y="309" width="0.0917%" height="15" fill="rgb(230,79,13)" fg:x="3164" fg:w="3"/><text x="96.9788%" y="319.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.09%)</title><rect x="96.7288%" y="293" width="0.0917%" height="15" fill="rgb(247,105,23)" fg:x="3164" fg:w="3"/><text x="96.9788%" y="303.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (3 samples, 0.09%)</title><rect x="96.7288%" y="277" width="0.0917%" height="15" fill="rgb(223,179,41)" fg:x="3164" fg:w="3"/><text x="96.9788%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.09%)</title><rect x="96.7288%" y="261" width="0.0917%" height="15" fill="rgb(218,9,34)" fg:x="3164" fg:w="3"/><text x="96.9788%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.09%)</title><rect x="96.7288%" y="245" width="0.0917%" height="15" fill="rgb(222,106,8)" fg:x="3164" fg:w="3"/><text x="96.9788%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 0.09%)</title><rect x="96.7288%" y="229" width="0.0917%" height="15" fill="rgb(211,220,0)" fg:x="3164" fg:w="3"/><text x="96.9788%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.06%)</title><rect x="96.7594%" y="213" width="0.0611%" height="15" fill="rgb(229,52,16)" fg:x="3165" fg:w="2"/><text x="97.0094%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.06%)</title><rect x="96.7594%" y="197" width="0.0611%" height="15" fill="rgb(212,155,18)" fg:x="3165" fg:w="2"/><text x="97.0094%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.03%)</title><rect x="96.7900%" y="181" width="0.0306%" height="15" fill="rgb(242,21,14)" fg:x="3166" fg:w="1"/><text x="97.0400%" y="191.50"></text></g><g><title>burst`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.03%)</title><rect x="96.8205%" y="309" width="0.0306%" height="15" fill="rgb(222,19,48)" fg:x="3167" fg:w="1"/><text x="97.0705%" y="319.50"></text></g><g><title>burst`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="96.8205%" y="293" width="0.0306%" height="15" fill="rgb(232,45,27)" fg:x="3167" fg:w="1"/><text x="97.0705%" y="303.50"></text></g><g><title>burst`hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="96.8205%" y="277" width="0.0306%" height="15" fill="rgb(249,103,42)" fg:x="3167" fg:w="1"/><text x="97.0705%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="96.8511%" y="277" width="0.0306%" height="15" fill="rgb(246,81,33)" fg:x="3168" fg:w="1"/><text x="97.1011%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="96.8511%" y="309" width="0.0611%" height="15" fill="rgb(252,33,42)" fg:x="3168" fg:w="2"/><text x="97.1011%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="96.8511%" y="293" width="0.0611%" height="15" fill="rgb(209,212,41)" fg:x="3168" fg:w="2"/><text x="97.1011%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="96.8817%" y="277" width="0.0306%" height="15" fill="rgb(207,154,6)" fg:x="3169" fg:w="1"/><text x="97.1317%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.06%)</title><rect x="96.9123%" y="309" width="0.0611%" height="15" fill="rgb(223,64,47)" fg:x="3170" fg:w="2"/><text x="97.1623%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="96.9428%" y="293" width="0.0306%" height="15" fill="rgb(211,161,38)" fg:x="3171" fg:w="1"/><text x="97.1928%" y="303.50"></text></g><g><title>burst`burst::nftabuilder::_&lt;impl burst::ntfa::NTFABuilder&gt;::build_ntfa (15 samples, 0.46%)</title><rect x="96.5454%" y="325" width="0.4586%" height="15" fill="rgb(219,138,40)" fg:x="3158" fg:w="15"/><text x="96.7954%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="96.9734%" y="309" width="0.0306%" height="15" fill="rgb(241,228,46)" fg:x="3172" fg:w="1"/><text x="97.2234%" y="319.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::nftabuilder::ExpressionBuilder&gt; (1 samples, 0.03%)</title><rect x="97.0040%" y="325" width="0.0306%" height="15" fill="rgb(223,209,38)" fg:x="3173" fg:w="1"/><text x="97.2540%" y="335.50"></text></g><g><title>burst`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="97.0040%" y="309" width="0.0306%" height="15" fill="rgb(236,164,45)" fg:x="3173" fg:w="1"/><text x="97.2540%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="97.0040%" y="293" width="0.0306%" height="15" fill="rgb(231,15,5)" fg:x="3173" fg:w="1"/><text x="97.2540%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.49%)</title><rect x="97.0957%" y="293" width="0.4891%" height="15" fill="rgb(252,35,15)" fg:x="3176" fg:w="16"/><text x="97.3457%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (11 samples, 0.34%)</title><rect x="97.2485%" y="277" width="0.3363%" height="15" fill="rgb(248,181,18)" fg:x="3181" fg:w="11"/><text x="97.4985%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.09%)</title><rect x="97.5848%" y="277" width="0.0917%" height="15" fill="rgb(233,39,42)" fg:x="3192" fg:w="3"/><text x="97.8348%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (4 samples, 0.12%)</title><rect x="97.5848%" y="293" width="0.1223%" height="15" fill="rgb(238,110,33)" fg:x="3192" fg:w="4"/><text x="97.8348%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (1 samples, 0.03%)</title><rect x="97.6766%" y="277" width="0.0306%" height="15" fill="rgb(233,195,10)" fg:x="3195" fg:w="1"/><text x="97.9266%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="97.6766%" y="261" width="0.0306%" height="15" fill="rgb(254,105,3)" fg:x="3195" fg:w="1"/><text x="97.9266%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="97.7071%" y="293" width="0.0306%" height="15" fill="rgb(221,225,9)" fg:x="3196" fg:w="1"/><text x="97.9571%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.24%)</title><rect x="97.7377%" y="293" width="0.2446%" height="15" fill="rgb(224,227,45)" fg:x="3197" fg:w="8"/><text x="97.9877%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (6 samples, 0.18%)</title><rect x="97.7988%" y="277" width="0.1834%" height="15" fill="rgb(229,198,43)" fg:x="3199" fg:w="6"/><text x="98.0488%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.18%)</title><rect x="97.7988%" y="261" width="0.1834%" height="15" fill="rgb(206,209,35)" fg:x="3199" fg:w="6"/><text x="98.0488%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.03%)</title><rect x="97.9823%" y="293" width="0.0306%" height="15" fill="rgb(245,195,53)" fg:x="3205" fg:w="1"/><text x="98.2323%" y="303.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 1.04%)</title><rect x="97.0345%" y="309" width="1.0394%" height="15" fill="rgb(240,92,26)" fg:x="3174" fg:w="34"/><text x="97.2845%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.06%)</title><rect x="98.0128%" y="293" width="0.0611%" height="15" fill="rgb(207,40,23)" fg:x="3206" fg:w="2"/><text x="98.2628%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.06%)</title><rect x="98.0740%" y="309" width="0.0611%" height="15" fill="rgb(223,111,35)" fg:x="3208" fg:w="2"/><text x="98.3240%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="98.1351%" y="309" width="0.0306%" height="15" fill="rgb(229,147,28)" fg:x="3210" fg:w="1"/><text x="98.3851%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.03%)</title><rect x="98.1657%" y="309" width="0.0306%" height="15" fill="rgb(211,29,28)" fg:x="3211" fg:w="1"/><text x="98.4157%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="98.1657%" y="293" width="0.0306%" height="15" fill="rgb(228,72,33)" fg:x="3211" fg:w="1"/><text x="98.4157%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.09%)</title><rect x="98.1963%" y="309" width="0.0917%" height="15" fill="rgb(205,214,31)" fg:x="3212" fg:w="3"/><text x="98.4463%" y="319.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::ntfa::NTFABuilder&gt; (42 samples, 1.28%)</title><rect x="97.0345%" y="325" width="1.2840%" height="15" fill="rgb(224,111,15)" fg:x="3174" fg:w="42"/><text x="97.2845%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="98.2880%" y="309" width="0.0306%" height="15" fill="rgb(253,21,26)" fg:x="3215" fg:w="1"/><text x="98.5380%" y="319.50"></text></g><g><title>burst`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="98.3186%" y="325" width="0.0306%" height="15" fill="rgb(245,139,43)" fg:x="3216" fg:w="1"/><text x="98.5686%" y="335.50"></text></g><g><title>burst`hashbrown::map::make_hash (3 samples, 0.09%)</title><rect x="98.3491%" y="325" width="0.0917%" height="15" fill="rgb(252,170,7)" fg:x="3217" fg:w="3"/><text x="98.5991%" y="335.50"></text></g><g><title>burst`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (9 samples, 0.28%)</title><rect x="98.4408%" y="325" width="0.2751%" height="15" fill="rgb(231,118,14)" fg:x="3220" fg:w="9"/><text x="98.6908%" y="335.50"></text></g><g><title>burst`std::io::stdio::_print (1 samples, 0.03%)</title><rect x="98.7160%" y="325" width="0.0306%" height="15" fill="rgb(238,83,0)" fg:x="3229" fg:w="1"/><text x="98.9660%" y="335.50"></text></g><g><title>burst`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.03%)</title><rect x="98.7160%" y="309" width="0.0306%" height="15" fill="rgb(221,39,39)" fg:x="3229" fg:w="1"/><text x="98.9660%" y="319.50"></text></g><g><title>burst`core::fmt::write (1 samples, 0.03%)</title><rect x="98.7160%" y="293" width="0.0306%" height="15" fill="rgb(222,119,46)" fg:x="3229" fg:w="1"/><text x="98.9660%" y="303.50"></text></g><g><title>burst`&lt;burst::debug::EnhancedPrintDsl as core::fmt::Debug&gt;::fmt (1 samples, 0.03%)</title><rect x="98.7160%" y="277" width="0.0306%" height="15" fill="rgb(222,165,49)" fg:x="3229" fg:w="1"/><text x="98.9660%" y="287.50"></text></g><g><title>burst`core::fmt::builders::DebugTuple::field (1 samples, 0.03%)</title><rect x="98.7160%" y="261" width="0.0306%" height="15" fill="rgb(219,113,52)" fg:x="3229" fg:w="1"/><text x="98.9660%" y="271.50"></text></g><g><title>burst`&lt;burst::debug::EnhancedPrintDsl as core::fmt::Debug&gt;::fmt (1 samples, 0.03%)</title><rect x="98.7160%" y="245" width="0.0306%" height="15" fill="rgb(214,7,15)" fg:x="3229" fg:w="1"/><text x="98.9660%" y="255.50"></text></g><g><title>burst`core::fmt::builders::DebugTuple::field (1 samples, 0.03%)</title><rect x="98.7160%" y="229" width="0.0306%" height="15" fill="rgb(235,32,4)" fg:x="3229" fg:w="1"/><text x="98.9660%" y="239.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T,A&gt; as core::fmt::Debug&gt;::fmt (1 samples, 0.03%)</title><rect x="98.7160%" y="213" width="0.0306%" height="15" fill="rgb(238,90,54)" fg:x="3229" fg:w="1"/><text x="98.9660%" y="223.50"></text></g><g><title>burst`core::fmt::builders::DebugSet::entry (1 samples, 0.03%)</title><rect x="98.7160%" y="197" width="0.0306%" height="15" fill="rgb(213,208,19)" fg:x="3229" fg:w="1"/><text x="98.9660%" y="207.50"></text></g><g><title>burst`core::fmt::builders::DebugInner::entry (1 samples, 0.03%)</title><rect x="98.7160%" y="181" width="0.0306%" height="15" fill="rgb(233,156,4)" fg:x="3229" fg:w="1"/><text x="98.9660%" y="191.50"></text></g><g><title>burst`&lt;burst::debug::EnhancedPrintDsl as core::fmt::Debug&gt;::fmt (1 samples, 0.03%)</title><rect x="98.7160%" y="165" width="0.0306%" height="15" fill="rgb(207,194,5)" fg:x="3229" fg:w="1"/><text x="98.9660%" y="175.50"></text></g><g><title>burst`core::fmt::builders::DebugTuple::field (1 samples, 0.03%)</title><rect x="98.7160%" y="149" width="0.0306%" height="15" fill="rgb(206,111,30)" fg:x="3229" fg:w="1"/><text x="98.9660%" y="159.50"></text></g><g><title>burst`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="98.7160%" y="133" width="0.0306%" height="15" fill="rgb(243,70,54)" fg:x="3229" fg:w="1"/><text x="98.9660%" y="143.50"></text></g><g><title>burst`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="98.7160%" y="117" width="0.0306%" height="15" fill="rgb(242,28,8)" fg:x="3229" fg:w="1"/><text x="98.9660%" y="127.50"></text></g><g><title>burst`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="98.7160%" y="101" width="0.0306%" height="15" fill="rgb(219,106,18)" fg:x="3229" fg:w="1"/><text x="98.9660%" y="111.50"></text></g><g><title>burst`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="98.7160%" y="85" width="0.0306%" height="15" fill="rgb(244,222,10)" fg:x="3229" fg:w="1"/><text x="98.9660%" y="95.50"></text></g><g><title>burst`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.03%)</title><rect x="98.7160%" y="69" width="0.0306%" height="15" fill="rgb(236,179,52)" fg:x="3229" fg:w="1"/><text x="98.9660%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.03%)</title><rect x="98.7160%" y="53" width="0.0306%" height="15" fill="rgb(213,23,39)" fg:x="3229" fg:w="1"/><text x="98.9660%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (5 samples, 0.15%)</title><rect x="98.7466%" y="325" width="0.1529%" height="15" fill="rgb(238,48,10)" fg:x="3230" fg:w="5"/><text x="98.9966%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.34%)</title><rect x="98.8994%" y="325" width="0.3363%" height="15" fill="rgb(251,196,23)" fg:x="3235" fg:w="11"/><text x="99.1494%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.06%)</title><rect x="99.2357%" y="325" width="0.0611%" height="15" fill="rgb(250,152,24)" fg:x="3246" fg:w="2"/><text x="99.4857%" y="335.50"></text></g><g><title>burst`main (3,249 samples, 99.33%)</title><rect x="0.0000%" y="421" width="99.3274%" height="15" fill="rgb(209,150,17)" fg:x="0" fg:w="3249"/><text x="0.2500%" y="431.50">burst`main</text></g><g><title>burst`std::rt::lang_start_internal (3,249 samples, 99.33%)</title><rect x="0.0000%" y="405" width="99.3274%" height="15" fill="rgb(234,202,34)" fg:x="0" fg:w="3249"/><text x="0.2500%" y="415.50">burst`std::rt::lang_start_internal</text></g><g><title>burst`std::rt::lang_start::_{{closure}} (3,249 samples, 99.33%)</title><rect x="0.0000%" y="389" width="99.3274%" height="15" fill="rgb(253,148,53)" fg:x="0" fg:w="3249"/><text x="0.2500%" y="399.50">burst`std::rt::lang_start::_{{closure}}</text></g><g><title>burst`std::sys_common::backtrace::__rust_begin_short_backtrace (3,249 samples, 99.33%)</title><rect x="0.0000%" y="373" width="99.3274%" height="15" fill="rgb(218,129,16)" fg:x="0" fg:w="3249"/><text x="0.2500%" y="383.50">burst`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>burst`burst::main (3,249 samples, 99.33%)</title><rect x="0.0000%" y="357" width="99.3274%" height="15" fill="rgb(216,85,19)" fg:x="0" fg:w="3249"/><text x="0.2500%" y="367.50">burst`burst::main</text></g><g><title>burst`burst::synthesis::synthesize (3,248 samples, 99.30%)</title><rect x="0.0306%" y="341" width="99.2969%" height="15" fill="rgb(235,228,7)" fg:x="1" fg:w="3248"/><text x="0.2806%" y="351.50">burst`burst::synthesis::synthesize</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="99.2969%" y="325" width="0.0306%" height="15" fill="rgb(245,175,0)" fg:x="3248" fg:w="1"/><text x="99.5469%" y="335.50"></text></g><g><title>dyld`start (3,258 samples, 99.60%)</title><rect x="0.0000%" y="437" width="99.6026%" height="15" fill="rgb(208,168,36)" fg:x="0" fg:w="3258"/><text x="0.2500%" y="447.50">dyld`start</text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (9 samples, 0.28%)</title><rect x="99.3274%" y="421" width="0.2751%" height="15" fill="rgb(246,171,24)" fg:x="3249" fg:w="9"/><text x="99.5774%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`__exit (9 samples, 0.28%)</title><rect x="99.3274%" y="405" width="0.2751%" height="15" fill="rgb(215,142,24)" fg:x="3249" fg:w="9"/><text x="99.5774%" y="415.50"></text></g><g><title>all (3,271 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(250,187,7)" fg:x="0" fg:w="3271"/><text x="0.2500%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`__exit (13 samples, 0.40%)</title><rect x="99.6026%" y="437" width="0.3974%" height="15" fill="rgb(228,66,33)" fg:x="3258" fg:w="13"/><text x="99.8526%" y="447.50"></text></g></svg></svg>