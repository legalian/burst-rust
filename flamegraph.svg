<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="437.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="3833"><g><title>burst`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="0.0000%" y="277" width="0.0522%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="287.50"></text></g><g><title>burst`DYLD-STUB$$free (3 samples, 0.08%)</title><rect x="0.0522%" y="277" width="0.0783%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="3"/><text x="0.3022%" y="287.50"></text></g><g><title>burst`DYLD-STUB$$memmove (1 samples, 0.03%)</title><rect x="0.1304%" y="277" width="0.0261%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="1"/><text x="0.3804%" y="287.50"></text></g><g><title>burst`__rdl_dealloc (1 samples, 0.03%)</title><rect x="0.1565%" y="277" width="0.0261%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="1"/><text x="0.4065%" y="287.50"></text></g><g><title>burst`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (469 samples, 12.24%)</title><rect x="0.1826%" y="277" width="12.2358%" height="15" fill="rgb(208,68,35)" fg:x="7" fg:w="469"/><text x="0.4326%" y="287.50">burst`alloc::colle..</text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.10%)</title><rect x="12.4185%" y="277" width="0.1044%" height="15" fill="rgb(232,128,0)" fg:x="476" fg:w="4"/><text x="12.6685%" y="287.50"></text></g><g><title>burst`burst::ntfa::PartialNTFA::add_rule (1 samples, 0.03%)</title><rect x="12.5228%" y="261" width="0.0261%" height="15" fill="rgb(207,160,47)" fg:x="480" fg:w="1"/><text x="12.7728%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="12.5228%" y="245" width="0.0261%" height="15" fill="rgb(228,23,34)" fg:x="480" fg:w="1"/><text x="12.7728%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="12.5228%" y="229" width="0.0261%" height="15" fill="rgb(218,30,26)" fg:x="480" fg:w="1"/><text x="12.7728%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="12.5228%" y="213" width="0.0261%" height="15" fill="rgb(220,122,19)" fg:x="480" fg:w="1"/><text x="12.7728%" y="223.50"></text></g><g><title>burst`burst::nftabuilder::_&lt;impl burst::ntfa::NTFABuilder&gt;::build_ntfa (2 samples, 0.05%)</title><rect x="12.5228%" y="277" width="0.0522%" height="15" fill="rgb(250,228,42)" fg:x="480" fg:w="2"/><text x="12.7728%" y="287.50"></text></g><g><title>burst`hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="12.5489%" y="261" width="0.0261%" height="15" fill="rgb(240,193,28)" fg:x="481" fg:w="1"/><text x="12.7989%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.16%)</title><rect x="20.4018%" y="229" width="0.1565%" height="15" fill="rgb(216,20,37)" fg:x="782" fg:w="6"/><text x="20.6518%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (30 samples, 0.78%)</title><rect x="20.2974%" y="245" width="0.7827%" height="15" fill="rgb(206,188,39)" fg:x="778" fg:w="30"/><text x="20.5474%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (20 samples, 0.52%)</title><rect x="20.5583%" y="229" width="0.5218%" height="15" fill="rgb(217,207,13)" fg:x="788" fg:w="20"/><text x="20.8083%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (15 samples, 0.39%)</title><rect x="20.6888%" y="213" width="0.3913%" height="15" fill="rgb(231,73,38)" fg:x="793" fg:w="15"/><text x="20.9388%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.08%)</title><rect x="21.0018%" y="197" width="0.0783%" height="15" fill="rgb(225,20,46)" fg:x="805" fg:w="3"/><text x="21.2518%" y="207.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (42 samples, 1.10%)</title><rect x="20.0104%" y="261" width="1.0957%" height="15" fill="rgb(210,31,41)" fg:x="767" fg:w="42"/><text x="20.2604%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="21.0801%" y="245" width="0.0261%" height="15" fill="rgb(221,200,47)" fg:x="808" fg:w="1"/><text x="21.3301%" y="255.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.31%)</title><rect x="21.1062%" y="261" width="0.3131%" height="15" fill="rgb(226,26,5)" fg:x="809" fg:w="12"/><text x="21.3562%" y="271.50"></text></g><g><title>burst`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.10%)</title><rect x="21.4193%" y="261" width="0.1044%" height="15" fill="rgb(249,33,26)" fg:x="821" fg:w="4"/><text x="21.6693%" y="271.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (7 samples, 0.18%)</title><rect x="21.5236%" y="261" width="0.1826%" height="15" fill="rgb(235,183,28)" fg:x="825" fg:w="7"/><text x="21.7736%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (18 samples, 0.47%)</title><rect x="22.0715%" y="229" width="0.4696%" height="15" fill="rgb(221,5,38)" fg:x="846" fg:w="18"/><text x="22.3215%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.13%)</title><rect x="22.4106%" y="213" width="0.1304%" height="15" fill="rgb(247,18,42)" fg:x="859" fg:w="5"/><text x="22.6606%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="22.5411%" y="229" width="0.0261%" height="15" fill="rgb(241,131,45)" fg:x="864" fg:w="1"/><text x="22.7911%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (13 samples, 0.34%)</title><rect x="22.5672%" y="229" width="0.3392%" height="15" fill="rgb(249,31,29)" fg:x="865" fg:w="13"/><text x="22.8172%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (5 samples, 0.13%)</title><rect x="22.7759%" y="213" width="0.1304%" height="15" fill="rgb(225,111,53)" fg:x="873" fg:w="5"/><text x="23.0259%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.13%)</title><rect x="22.7759%" y="197" width="0.1304%" height="15" fill="rgb(238,160,17)" fg:x="873" fg:w="5"/><text x="23.0259%" y="207.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 1.33%)</title><rect x="21.7062%" y="245" width="1.3306%" height="15" fill="rgb(214,148,48)" fg:x="832" fg:w="51"/><text x="21.9562%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.13%)</title><rect x="22.9063%" y="229" width="0.1304%" height="15" fill="rgb(232,36,49)" fg:x="878" fg:w="5"/><text x="23.1563%" y="239.50"></text></g><g><title>burst`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="23.0368%" y="245" width="0.0261%" height="15" fill="rgb(209,103,24)" fg:x="883" fg:w="1"/><text x="23.2868%" y="255.50"></text></g><g><title>burst`__rust_dealloc (5 samples, 0.13%)</title><rect x="23.0629%" y="245" width="0.1304%" height="15" fill="rgb(229,88,8)" fg:x="884" fg:w="5"/><text x="23.3129%" y="255.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (3 samples, 0.08%)</title><rect x="23.1933%" y="213" width="0.0783%" height="15" fill="rgb(213,181,19)" fg:x="889" fg:w="3"/><text x="23.4433%" y="223.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (2 samples, 0.05%)</title><rect x="23.2194%" y="197" width="0.0522%" height="15" fill="rgb(254,191,54)" fg:x="890" fg:w="2"/><text x="23.4694%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.05%)</title><rect x="23.2194%" y="181" width="0.0522%" height="15" fill="rgb(241,83,37)" fg:x="890" fg:w="2"/><text x="23.4694%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.05%)</title><rect x="23.2194%" y="165" width="0.0522%" height="15" fill="rgb(233,36,39)" fg:x="890" fg:w="2"/><text x="23.4694%" y="175.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (4 samples, 0.10%)</title><rect x="23.1933%" y="229" width="0.1044%" height="15" fill="rgb(226,3,54)" fg:x="889" fg:w="4"/><text x="23.4433%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="23.2716%" y="213" width="0.0261%" height="15" fill="rgb(245,192,40)" fg:x="892" fg:w="1"/><text x="23.5216%" y="223.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::ntfa::SolutionStatus&gt; (13 samples, 0.34%)</title><rect x="23.1933%" y="245" width="0.3392%" height="15" fill="rgb(238,167,29)" fg:x="889" fg:w="13"/><text x="23.4433%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.23%)</title><rect x="23.2977%" y="229" width="0.2348%" height="15" fill="rgb(232,182,51)" fg:x="893" fg:w="9"/><text x="23.5477%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (7 samples, 0.18%)</title><rect x="23.3499%" y="213" width="0.1826%" height="15" fill="rgb(231,60,39)" fg:x="895" fg:w="7"/><text x="23.5999%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.18%)</title><rect x="23.3499%" y="197" width="0.1826%" height="15" fill="rgb(208,69,12)" fg:x="895" fg:w="7"/><text x="23.5999%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.05%)</title><rect x="23.5325%" y="245" width="0.0522%" height="15" fill="rgb(235,93,37)" fg:x="902" fg:w="2"/><text x="23.7825%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.16%)</title><rect x="23.5847%" y="245" width="0.1565%" height="15" fill="rgb(213,116,39)" fg:x="904" fg:w="6"/><text x="23.8347%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.18%)</title><rect x="23.7412%" y="229" width="0.1826%" height="15" fill="rgb(222,207,29)" fg:x="910" fg:w="7"/><text x="23.9912%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_scan_madvise_free (1 samples, 0.03%)</title><rect x="23.9238%" y="229" width="0.0261%" height="15" fill="rgb(206,96,30)" fg:x="917" fg:w="1"/><text x="24.1738%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="23.9238%" y="213" width="0.0261%" height="15" fill="rgb(218,138,4)" fg:x="917" fg:w="1"/><text x="24.1738%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (9 samples, 0.23%)</title><rect x="23.7412%" y="245" width="0.2348%" height="15" fill="rgb(250,191,14)" fg:x="910" fg:w="9"/><text x="23.9912%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (1 samples, 0.03%)</title><rect x="23.9499%" y="229" width="0.0261%" height="15" fill="rgb(239,60,40)" fg:x="918" fg:w="1"/><text x="24.1999%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="23.9499%" y="213" width="0.0261%" height="15" fill="rgb(206,27,48)" fg:x="918" fg:w="1"/><text x="24.1999%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.05%)</title><rect x="23.9760%" y="245" width="0.0522%" height="15" fill="rgb(225,35,8)" fg:x="919" fg:w="2"/><text x="24.2260%" y="255.50"></text></g><g><title>burst`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (90 samples, 2.35%)</title><rect x="21.7062%" y="261" width="2.3480%" height="15" fill="rgb(250,213,24)" fg:x="832" fg:w="90"/><text x="21.9562%" y="271.50">b..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="24.0282%" y="245" width="0.0261%" height="15" fill="rgb(247,123,22)" fg:x="921" fg:w="1"/><text x="24.2782%" y="255.50"></text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (61 samples, 1.59%)</title><rect x="24.0543%" y="261" width="1.5914%" height="15" fill="rgb(231,138,38)" fg:x="922" fg:w="61"/><text x="24.3043%" y="271.50"></text></g><g><title>burst`DYLD-STUB$$free (6 samples, 0.16%)</title><rect x="25.6457%" y="261" width="0.1565%" height="15" fill="rgb(231,145,46)" fg:x="983" fg:w="6"/><text x="25.8957%" y="271.50"></text></g><g><title>burst`DYLD-STUB$$malloc (2 samples, 0.05%)</title><rect x="25.8022%" y="261" width="0.0522%" height="15" fill="rgb(251,118,11)" fg:x="989" fg:w="2"/><text x="26.0522%" y="271.50"></text></g><g><title>burst`__rdl_alloc (3 samples, 0.08%)</title><rect x="25.8544%" y="261" width="0.0783%" height="15" fill="rgb(217,147,25)" fg:x="991" fg:w="3"/><text x="26.1044%" y="271.50"></text></g><g><title>burst`__rdl_dealloc (1 samples, 0.03%)</title><rect x="25.9327%" y="261" width="0.0261%" height="15" fill="rgb(247,81,37)" fg:x="994" fg:w="1"/><text x="26.1827%" y="271.50"></text></g><g><title>burst`__rdl_realloc (1 samples, 0.03%)</title><rect x="26.3762%" y="229" width="0.0261%" height="15" fill="rgb(209,12,38)" fg:x="1011" fg:w="1"/><text x="26.6262%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.05%)</title><rect x="26.5327%" y="181" width="0.0522%" height="15" fill="rgb(227,1,9)" fg:x="1017" fg:w="2"/><text x="26.7827%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.21%)</title><rect x="26.4023%" y="229" width="0.2087%" height="15" fill="rgb(248,47,43)" fg:x="1012" fg:w="8"/><text x="26.6523%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.18%)</title><rect x="26.4284%" y="213" width="0.1826%" height="15" fill="rgb(221,10,30)" fg:x="1013" fg:w="7"/><text x="26.6784%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.18%)</title><rect x="26.4284%" y="197" width="0.1826%" height="15" fill="rgb(210,229,1)" fg:x="1013" fg:w="7"/><text x="26.6784%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.03%)</title><rect x="26.5849%" y="181" width="0.0261%" height="15" fill="rgb(222,148,37)" fg:x="1019" fg:w="1"/><text x="26.8349%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="26.6110%" y="229" width="0.0522%" height="15" fill="rgb(234,67,33)" fg:x="1020" fg:w="2"/><text x="26.8610%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="26.6632%" y="229" width="0.0261%" height="15" fill="rgb(247,98,35)" fg:x="1022" fg:w="1"/><text x="26.9132%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (3 samples, 0.08%)</title><rect x="27.1328%" y="213" width="0.0783%" height="15" fill="rgb(247,138,52)" fg:x="1040" fg:w="3"/><text x="27.3828%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.03%)</title><rect x="27.3676%" y="197" width="0.0261%" height="15" fill="rgb(213,79,30)" fg:x="1049" fg:w="1"/><text x="27.6176%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="27.3937%" y="197" width="0.0261%" height="15" fill="rgb(246,177,23)" fg:x="1050" fg:w="1"/><text x="27.6437%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="27.4198%" y="197" width="0.0261%" height="15" fill="rgb(230,62,27)" fg:x="1051" fg:w="1"/><text x="27.6698%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.23%)</title><rect x="27.4459%" y="197" width="0.2348%" height="15" fill="rgb(216,154,8)" fg:x="1052" fg:w="9"/><text x="27.6959%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (1 samples, 0.03%)</title><rect x="27.8372%" y="181" width="0.0261%" height="15" fill="rgb(244,35,45)" fg:x="1067" fg:w="1"/><text x="28.0872%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (17 samples, 0.44%)</title><rect x="27.8633%" y="181" width="0.4435%" height="15" fill="rgb(251,115,12)" fg:x="1068" fg:w="17"/><text x="28.1133%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.21%)</title><rect x="28.5677%" y="149" width="0.2087%" height="15" fill="rgb(240,54,50)" fg:x="1095" fg:w="8"/><text x="28.8177%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (20 samples, 0.52%)</title><rect x="28.3590%" y="165" width="0.5218%" height="15" fill="rgb(233,84,52)" fg:x="1087" fg:w="20"/><text x="28.6090%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (4 samples, 0.10%)</title><rect x="28.7764%" y="149" width="0.1044%" height="15" fill="rgb(207,117,47)" fg:x="1103" fg:w="4"/><text x="29.0264%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (28 samples, 0.73%)</title><rect x="28.3068%" y="181" width="0.7305%" height="15" fill="rgb(249,43,39)" fg:x="1085" fg:w="28"/><text x="28.5568%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.16%)</title><rect x="28.8808%" y="165" width="0.1565%" height="15" fill="rgb(209,38,44)" fg:x="1107" fg:w="6"/><text x="29.1308%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (66 samples, 1.72%)</title><rect x="27.6807%" y="197" width="1.7219%" height="15" fill="rgb(236,212,23)" fg:x="1061" fg:w="66"/><text x="27.9307%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (14 samples, 0.37%)</title><rect x="29.0373%" y="181" width="0.3652%" height="15" fill="rgb(242,79,21)" fg:x="1113" fg:w="14"/><text x="29.2873%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (1 samples, 0.03%)</title><rect x="29.4026%" y="181" width="0.0261%" height="15" fill="rgb(211,96,35)" fg:x="1127" fg:w="1"/><text x="29.6526%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (1 samples, 0.03%)</title><rect x="29.4026%" y="165" width="0.0261%" height="15" fill="rgb(253,215,40)" fg:x="1127" fg:w="1"/><text x="29.6526%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.03%)</title><rect x="29.4286%" y="181" width="0.0261%" height="15" fill="rgb(211,81,21)" fg:x="1128" fg:w="1"/><text x="29.6786%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="29.4547%" y="181" width="0.0261%" height="15" fill="rgb(208,190,38)" fg:x="1129" fg:w="1"/><text x="29.7047%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="29.4547%" y="165" width="0.0261%" height="15" fill="rgb(235,213,38)" fg:x="1129" fg:w="1"/><text x="29.7047%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="29.4547%" y="149" width="0.0261%" height="15" fill="rgb(237,122,38)" fg:x="1129" fg:w="1"/><text x="29.7047%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`large_try_realloc_in_place (1 samples, 0.03%)</title><rect x="29.4808%" y="181" width="0.0261%" height="15" fill="rgb(244,218,35)" fg:x="1130" fg:w="1"/><text x="29.7308%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`vm_allocate (1 samples, 0.03%)</title><rect x="29.4808%" y="165" width="0.0261%" height="15" fill="rgb(240,68,47)" fg:x="1130" fg:w="1"/><text x="29.7308%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_allocate_trap (1 samples, 0.03%)</title><rect x="29.4808%" y="149" width="0.0261%" height="15" fill="rgb(210,16,53)" fg:x="1130" fg:w="1"/><text x="29.7308%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.03%)</title><rect x="29.5069%" y="181" width="0.0261%" height="15" fill="rgb(235,124,12)" fg:x="1131" fg:w="1"/><text x="29.7569%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (6 samples, 0.16%)</title><rect x="29.4026%" y="197" width="0.1565%" height="15" fill="rgb(224,169,11)" fg:x="1127" fg:w="6"/><text x="29.6526%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (1 samples, 0.03%)</title><rect x="29.5330%" y="181" width="0.0261%" height="15" fill="rgb(250,166,2)" fg:x="1132" fg:w="1"/><text x="29.7830%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (108 samples, 2.82%)</title><rect x="27.2111%" y="213" width="2.8176%" height="15" fill="rgb(242,216,29)" fg:x="1043" fg:w="108"/><text x="27.4611%" y="223.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.47%)</title><rect x="29.5591%" y="197" width="0.4696%" height="15" fill="rgb(230,116,27)" fg:x="1133" fg:w="18"/><text x="29.8091%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.23%)</title><rect x="30.0287%" y="213" width="0.2348%" height="15" fill="rgb(228,99,48)" fg:x="1151" fg:w="9"/><text x="30.2787%" y="223.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (153 samples, 3.99%)</title><rect x="26.2979%" y="245" width="3.9917%" height="15" fill="rgb(253,11,6)" fg:x="1008" fg:w="153"/><text x="26.5479%" y="255.50">burs..</text></g><g><title>libsystem_malloc.dylib`realloc (138 samples, 3.60%)</title><rect x="26.6893%" y="229" width="3.6003%" height="15" fill="rgb(247,143,39)" fg:x="1023" fg:w="138"/><text x="26.9393%" y="239.50">libs..</text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="30.2635%" y="213" width="0.0261%" height="15" fill="rgb(236,97,10)" fg:x="1160" fg:w="1"/><text x="30.5135%" y="223.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (167 samples, 4.36%)</title><rect x="25.9588%" y="261" width="4.3569%" height="15" fill="rgb(233,208,19)" fg:x="995" fg:w="167"/><text x="26.2088%" y="271.50">burst..</text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.03%)</title><rect x="30.2896%" y="245" width="0.0261%" height="15" fill="rgb(216,164,2)" fg:x="1161" fg:w="1"/><text x="30.5396%" y="255.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (2 samples, 0.05%)</title><rect x="30.3157%" y="261" width="0.0522%" height="15" fill="rgb(220,129,5)" fg:x="1162" fg:w="2"/><text x="30.5657%" y="271.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.05%)</title><rect x="31.0984%" y="229" width="0.0522%" height="15" fill="rgb(242,17,10)" fg:x="1192" fg:w="2"/><text x="31.3484%" y="239.50"></text></g><g><title>burst`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 0.34%)</title><rect x="31.1505%" y="229" width="0.3392%" height="15" fill="rgb(242,107,0)" fg:x="1194" fg:w="13"/><text x="31.4005%" y="239.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="31.4636%" y="213" width="0.0261%" height="15" fill="rgb(251,28,31)" fg:x="1206" fg:w="1"/><text x="31.7136%" y="223.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="31.4636%" y="197" width="0.0261%" height="15" fill="rgb(233,223,10)" fg:x="1206" fg:w="1"/><text x="31.7136%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="31.4636%" y="181" width="0.0261%" height="15" fill="rgb(215,21,27)" fg:x="1206" fg:w="1"/><text x="31.7136%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="31.4636%" y="165" width="0.0261%" height="15" fill="rgb(232,23,21)" fg:x="1206" fg:w="1"/><text x="31.7136%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="31.8810%" y="181" width="0.0261%" height="15" fill="rgb(244,5,23)" fg:x="1222" fg:w="1"/><text x="32.1310%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (27 samples, 0.70%)</title><rect x="31.6723%" y="197" width="0.7044%" height="15" fill="rgb(226,81,46)" fg:x="1214" fg:w="27"/><text x="31.9223%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (18 samples, 0.47%)</title><rect x="31.9071%" y="181" width="0.4696%" height="15" fill="rgb(247,70,30)" fg:x="1223" fg:w="18"/><text x="32.1571%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (37 samples, 0.97%)</title><rect x="31.4897%" y="229" width="0.9653%" height="15" fill="rgb(212,68,19)" fg:x="1207" fg:w="37"/><text x="31.7397%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (32 samples, 0.83%)</title><rect x="31.6201%" y="213" width="0.8349%" height="15" fill="rgb(240,187,13)" fg:x="1212" fg:w="32"/><text x="31.8701%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.08%)</title><rect x="32.3767%" y="197" width="0.0783%" height="15" fill="rgb(223,113,26)" fg:x="1241" fg:w="3"/><text x="32.6267%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.05%)</title><rect x="32.4550%" y="229" width="0.0522%" height="15" fill="rgb(206,192,2)" fg:x="1244" fg:w="2"/><text x="32.7050%" y="239.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (61 samples, 1.59%)</title><rect x="30.9679%" y="245" width="1.5914%" height="15" fill="rgb(241,108,4)" fg:x="1187" fg:w="61"/><text x="31.2179%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="32.5072%" y="229" width="0.0522%" height="15" fill="rgb(247,173,49)" fg:x="1246" fg:w="2"/><text x="32.7572%" y="239.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="35.0900%" y="101" width="0.0261%" height="15" fill="rgb(224,114,35)" fg:x="1345" fg:w="1"/><text x="35.3400%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="35.0900%" y="85" width="0.0261%" height="15" fill="rgb(245,159,27)" fg:x="1345" fg:w="1"/><text x="35.3400%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="35.0900%" y="69" width="0.0261%" height="15" fill="rgb(245,172,44)" fg:x="1345" fg:w="1"/><text x="35.3400%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="35.0900%" y="53" width="0.0261%" height="15" fill="rgb(236,23,11)" fg:x="1345" fg:w="1"/><text x="35.3400%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.03%)</title><rect x="35.0900%" y="37" width="0.0261%" height="15" fill="rgb(205,117,38)" fg:x="1345" fg:w="1"/><text x="35.3400%" y="47.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="35.0900%" y="117" width="0.0522%" height="15" fill="rgb(237,72,25)" fg:x="1345" fg:w="2"/><text x="35.3400%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="35.1161%" y="101" width="0.0261%" height="15" fill="rgb(244,70,9)" fg:x="1346" fg:w="1"/><text x="35.3661%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="35.1161%" y="85" width="0.0261%" height="15" fill="rgb(217,125,39)" fg:x="1346" fg:w="1"/><text x="35.3661%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="35.1422%" y="101" width="0.0261%" height="15" fill="rgb(235,36,10)" fg:x="1347" fg:w="1"/><text x="35.3922%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="35.1944%" y="69" width="0.0261%" height="15" fill="rgb(251,123,47)" fg:x="1349" fg:w="1"/><text x="35.4444%" y="79.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (11 samples, 0.29%)</title><rect x="35.0117%" y="133" width="0.2870%" height="15" fill="rgb(221,13,13)" fg:x="1342" fg:w="11"/><text x="35.2617%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.16%)</title><rect x="35.1422%" y="117" width="0.1565%" height="15" fill="rgb(238,131,9)" fg:x="1347" fg:w="6"/><text x="35.3922%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.13%)</title><rect x="35.1683%" y="101" width="0.1304%" height="15" fill="rgb(211,50,8)" fg:x="1348" fg:w="5"/><text x="35.4183%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.13%)</title><rect x="35.1683%" y="85" width="0.1304%" height="15" fill="rgb(245,182,24)" fg:x="1348" fg:w="5"/><text x="35.4183%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.08%)</title><rect x="35.2205%" y="69" width="0.0783%" height="15" fill="rgb(242,14,37)" fg:x="1350" fg:w="3"/><text x="35.4705%" y="79.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (23 samples, 0.60%)</title><rect x="34.9074%" y="149" width="0.6001%" height="15" fill="rgb(246,228,12)" fg:x="1338" fg:w="23"/><text x="35.1574%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.21%)</title><rect x="35.2987%" y="133" width="0.2087%" height="15" fill="rgb(213,55,15)" fg:x="1353" fg:w="8"/><text x="35.5487%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.21%)</title><rect x="35.2987%" y="117" width="0.2087%" height="15" fill="rgb(209,9,3)" fg:x="1353" fg:w="8"/><text x="35.5487%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.18%)</title><rect x="35.3248%" y="101" width="0.1826%" height="15" fill="rgb(230,59,30)" fg:x="1354" fg:w="7"/><text x="35.5748%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (4 samples, 0.10%)</title><rect x="35.4031%" y="85" width="0.1044%" height="15" fill="rgb(209,121,21)" fg:x="1357" fg:w="4"/><text x="35.6531%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="35.6640%" y="101" width="0.0261%" height="15" fill="rgb(220,109,13)" fg:x="1367" fg:w="1"/><text x="35.9140%" y="111.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (36 samples, 0.94%)</title><rect x="34.8552%" y="165" width="0.9392%" height="15" fill="rgb(232,18,1)" fg:x="1336" fg:w="36"/><text x="35.1052%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.29%)</title><rect x="35.5074%" y="149" width="0.2870%" height="15" fill="rgb(215,41,42)" fg:x="1361" fg:w="11"/><text x="35.7574%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.18%)</title><rect x="35.6118%" y="133" width="0.1826%" height="15" fill="rgb(224,123,36)" fg:x="1365" fg:w="7"/><text x="35.8618%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.18%)</title><rect x="35.6118%" y="117" width="0.1826%" height="15" fill="rgb(240,125,3)" fg:x="1365" fg:w="7"/><text x="35.8618%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (4 samples, 0.10%)</title><rect x="35.6901%" y="101" width="0.1044%" height="15" fill="rgb(205,98,50)" fg:x="1368" fg:w="4"/><text x="35.9401%" y="111.50"></text></g><g><title>burst`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="35.7944%" y="165" width="0.0261%" height="15" fill="rgb(205,185,37)" fg:x="1372" fg:w="1"/><text x="36.0444%" y="175.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (62 samples, 1.62%)</title><rect x="34.7248%" y="181" width="1.6175%" height="15" fill="rgb(238,207,15)" fg:x="1331" fg:w="62"/><text x="34.9748%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.52%)</title><rect x="35.8205%" y="165" width="0.5218%" height="15" fill="rgb(213,199,42)" fg:x="1373" fg:w="20"/><text x="36.0705%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (16 samples, 0.42%)</title><rect x="35.9249%" y="149" width="0.4174%" height="15" fill="rgb(235,201,11)" fg:x="1377" fg:w="16"/><text x="36.1749%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (16 samples, 0.42%)</title><rect x="35.9249%" y="133" width="0.4174%" height="15" fill="rgb(207,46,11)" fg:x="1377" fg:w="16"/><text x="36.1749%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (7 samples, 0.18%)</title><rect x="36.1597%" y="117" width="0.1826%" height="15" fill="rgb(241,35,35)" fg:x="1386" fg:w="7"/><text x="36.4097%" y="127.50"></text></g><g><title>burst`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="36.3423%" y="181" width="0.0261%" height="15" fill="rgb(243,32,47)" fg:x="1393" fg:w="1"/><text x="36.5923%" y="191.50"></text></g><g><title>burst`__rdl_alloc (2 samples, 0.05%)</title><rect x="36.3684%" y="181" width="0.0522%" height="15" fill="rgb(247,202,23)" fg:x="1394" fg:w="2"/><text x="36.6184%" y="191.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="36.4466%" y="133" width="0.0261%" height="15" fill="rgb(219,102,11)" fg:x="1397" fg:w="1"/><text x="36.6966%" y="143.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="36.4466%" y="117" width="0.0261%" height="15" fill="rgb(243,110,44)" fg:x="1397" fg:w="1"/><text x="36.6966%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="36.4466%" y="101" width="0.0261%" height="15" fill="rgb(222,74,54)" fg:x="1397" fg:w="1"/><text x="36.6966%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="36.4466%" y="85" width="0.0261%" height="15" fill="rgb(216,99,12)" fg:x="1397" fg:w="1"/><text x="36.6966%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="36.4466%" y="69" width="0.0261%" height="15" fill="rgb(226,22,26)" fg:x="1397" fg:w="1"/><text x="36.6966%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.03%)</title><rect x="36.4466%" y="53" width="0.0261%" height="15" fill="rgb(217,163,10)" fg:x="1397" fg:w="1"/><text x="36.6966%" y="63.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (3 samples, 0.08%)</title><rect x="36.4206%" y="181" width="0.0783%" height="15" fill="rgb(213,25,53)" fg:x="1396" fg:w="3"/><text x="36.6706%" y="191.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (3 samples, 0.08%)</title><rect x="36.4206%" y="165" width="0.0783%" height="15" fill="rgb(252,105,26)" fg:x="1396" fg:w="3"/><text x="36.6706%" y="175.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (3 samples, 0.08%)</title><rect x="36.4206%" y="149" width="0.0783%" height="15" fill="rgb(220,39,43)" fg:x="1396" fg:w="3"/><text x="36.6706%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="36.4727%" y="133" width="0.0261%" height="15" fill="rgb(229,68,48)" fg:x="1398" fg:w="1"/><text x="36.7227%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="36.4727%" y="117" width="0.0261%" height="15" fill="rgb(252,8,32)" fg:x="1398" fg:w="1"/><text x="36.7227%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="36.4727%" y="101" width="0.0261%" height="15" fill="rgb(223,20,43)" fg:x="1398" fg:w="1"/><text x="36.7227%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.03%)</title><rect x="36.4727%" y="85" width="0.0261%" height="15" fill="rgb(229,81,49)" fg:x="1398" fg:w="1"/><text x="36.7227%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.05%)</title><rect x="36.5510%" y="165" width="0.0522%" height="15" fill="rgb(236,28,36)" fg:x="1401" fg:w="2"/><text x="36.8010%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.05%)</title><rect x="37.1250%" y="133" width="0.0522%" height="15" fill="rgb(249,185,26)" fg:x="1423" fg:w="2"/><text x="37.3750%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (38 samples, 0.99%)</title><rect x="36.6815%" y="149" width="0.9914%" height="15" fill="rgb(249,174,33)" fg:x="1406" fg:w="38"/><text x="36.9315%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (19 samples, 0.50%)</title><rect x="37.1771%" y="133" width="0.4957%" height="15" fill="rgb(233,201,37)" fg:x="1425" fg:w="19"/><text x="37.4271%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (47 samples, 1.23%)</title><rect x="36.4988%" y="181" width="1.2262%" height="15" fill="rgb(221,78,26)" fg:x="1399" fg:w="47"/><text x="36.7488%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (43 samples, 1.12%)</title><rect x="36.6032%" y="165" width="1.1218%" height="15" fill="rgb(250,127,30)" fg:x="1403" fg:w="43"/><text x="36.8532%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.05%)</title><rect x="37.6728%" y="149" width="0.0522%" height="15" fill="rgb(230,49,44)" fg:x="1444" fg:w="2"/><text x="37.9228%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.08%)</title><rect x="37.7250%" y="181" width="0.0783%" height="15" fill="rgb(229,67,23)" fg:x="1446" fg:w="3"/><text x="37.9750%" y="191.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (127 samples, 3.31%)</title><rect x="34.5160%" y="197" width="3.3133%" height="15" fill="rgb(249,83,47)" fg:x="1323" fg:w="127"/><text x="34.7660%" y="207.50">bur..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="37.8033%" y="181" width="0.0261%" height="15" fill="rgb(215,43,3)" fg:x="1449" fg:w="1"/><text x="38.0533%" y="191.50"></text></g><g><title>burst`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="37.8294%" y="197" width="0.0261%" height="15" fill="rgb(238,154,13)" fg:x="1450" fg:w="1"/><text x="38.0794%" y="207.50"></text></g><g><title>burst`__rdl_alloc (2 samples, 0.05%)</title><rect x="37.8555%" y="197" width="0.0522%" height="15" fill="rgb(219,56,2)" fg:x="1451" fg:w="2"/><text x="38.1055%" y="207.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (5 samples, 0.13%)</title><rect x="37.9337%" y="133" width="0.1304%" height="15" fill="rgb(233,0,4)" fg:x="1454" fg:w="5"/><text x="38.1837%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.13%)</title><rect x="37.9337%" y="117" width="0.1304%" height="15" fill="rgb(235,30,7)" fg:x="1454" fg:w="5"/><text x="38.1837%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.13%)</title><rect x="37.9337%" y="101" width="0.1304%" height="15" fill="rgb(250,79,13)" fg:x="1454" fg:w="5"/><text x="38.1837%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.13%)</title><rect x="37.9337%" y="85" width="0.1304%" height="15" fill="rgb(211,146,34)" fg:x="1454" fg:w="5"/><text x="38.1837%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.08%)</title><rect x="37.9859%" y="69" width="0.0783%" height="15" fill="rgb(228,22,38)" fg:x="1456" fg:w="3"/><text x="38.2359%" y="79.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (13 samples, 0.34%)</title><rect x="37.9337%" y="149" width="0.3392%" height="15" fill="rgb(235,168,5)" fg:x="1454" fg:w="13"/><text x="38.1837%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.21%)</title><rect x="38.0642%" y="133" width="0.2087%" height="15" fill="rgb(221,155,16)" fg:x="1459" fg:w="8"/><text x="38.3142%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.13%)</title><rect x="38.1424%" y="117" width="0.1304%" height="15" fill="rgb(215,215,53)" fg:x="1462" fg:w="5"/><text x="38.3924%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.13%)</title><rect x="38.1424%" y="101" width="0.1304%" height="15" fill="rgb(223,4,10)" fg:x="1462" fg:w="5"/><text x="38.3924%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (5 samples, 0.13%)</title><rect x="38.1424%" y="85" width="0.1304%" height="15" fill="rgb(234,103,6)" fg:x="1462" fg:w="5"/><text x="38.3924%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.18%)</title><rect x="38.2729%" y="149" width="0.1826%" height="15" fill="rgb(227,97,0)" fg:x="1467" fg:w="7"/><text x="38.5229%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.16%)</title><rect x="38.2990%" y="133" width="0.1565%" height="15" fill="rgb(234,150,53)" fg:x="1468" fg:w="6"/><text x="38.5490%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.16%)</title><rect x="38.2990%" y="117" width="0.1565%" height="15" fill="rgb(228,201,54)" fg:x="1468" fg:w="6"/><text x="38.5490%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (4 samples, 0.10%)</title><rect x="38.3512%" y="101" width="0.1044%" height="15" fill="rgb(222,22,37)" fg:x="1470" fg:w="4"/><text x="38.6012%" y="111.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (21 samples, 0.55%)</title><rect x="37.9337%" y="165" width="0.5479%" height="15" fill="rgb(237,53,32)" fg:x="1454" fg:w="21"/><text x="38.1837%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="38.4555%" y="149" width="0.0261%" height="15" fill="rgb(233,25,53)" fg:x="1474" fg:w="1"/><text x="38.7055%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.29%)</title><rect x="38.4816%" y="133" width="0.2870%" height="15" fill="rgb(210,40,34)" fg:x="1475" fg:w="11"/><text x="38.7316%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (7 samples, 0.18%)</title><rect x="38.5860%" y="117" width="0.1826%" height="15" fill="rgb(241,220,44)" fg:x="1479" fg:w="7"/><text x="38.8360%" y="127.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (34 samples, 0.89%)</title><rect x="37.9076%" y="181" width="0.8870%" height="15" fill="rgb(235,28,35)" fg:x="1453" fg:w="34"/><text x="38.1576%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.31%)</title><rect x="38.4816%" y="165" width="0.3131%" height="15" fill="rgb(210,56,17)" fg:x="1475" fg:w="12"/><text x="38.7316%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.31%)</title><rect x="38.4816%" y="149" width="0.3131%" height="15" fill="rgb(224,130,29)" fg:x="1475" fg:w="12"/><text x="38.7316%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="38.7686%" y="133" width="0.0261%" height="15" fill="rgb(235,212,8)" fg:x="1486" fg:w="1"/><text x="39.0186%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="38.8469%" y="133" width="0.0261%" height="15" fill="rgb(223,33,50)" fg:x="1489" fg:w="1"/><text x="39.0969%" y="143.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (41 samples, 1.07%)</title><rect x="37.9076%" y="197" width="1.0697%" height="15" fill="rgb(219,149,13)" fg:x="1453" fg:w="41"/><text x="38.1576%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.18%)</title><rect x="38.7947%" y="181" width="0.1826%" height="15" fill="rgb(250,156,29)" fg:x="1487" fg:w="7"/><text x="39.0447%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.16%)</title><rect x="38.8208%" y="165" width="0.1565%" height="15" fill="rgb(216,193,19)" fg:x="1488" fg:w="6"/><text x="39.0708%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.16%)</title><rect x="38.8208%" y="149" width="0.1565%" height="15" fill="rgb(216,135,14)" fg:x="1488" fg:w="6"/><text x="39.0708%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (4 samples, 0.10%)</title><rect x="38.8729%" y="133" width="0.1044%" height="15" fill="rgb(241,47,5)" fg:x="1490" fg:w="4"/><text x="39.1229%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.08%)</title><rect x="39.1338%" y="181" width="0.0783%" height="15" fill="rgb(233,42,35)" fg:x="1500" fg:w="3"/><text x="39.3838%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.16%)</title><rect x="39.8382%" y="149" width="0.1565%" height="15" fill="rgb(231,13,6)" fg:x="1527" fg:w="6"/><text x="40.0882%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (70 samples, 1.83%)</title><rect x="39.3426%" y="165" width="1.8262%" height="15" fill="rgb(207,181,40)" fg:x="1508" fg:w="70"/><text x="39.5926%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (45 samples, 1.17%)</title><rect x="39.9948%" y="149" width="1.1740%" height="15" fill="rgb(254,173,49)" fg:x="1533" fg:w="45"/><text x="40.2448%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (85 samples, 2.22%)</title><rect x="38.9773%" y="197" width="2.2176%" height="15" fill="rgb(221,1,38)" fg:x="1494" fg:w="85"/><text x="39.2273%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (76 samples, 1.98%)</title><rect x="39.2121%" y="181" width="1.9828%" height="15" fill="rgb(206,124,46)" fg:x="1503" fg:w="76"/><text x="39.4621%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="41.1688%" y="165" width="0.0261%" height="15" fill="rgb(249,21,11)" fg:x="1578" fg:w="1"/><text x="41.4188%" y="175.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (281 samples, 7.33%)</title><rect x="33.9943%" y="213" width="7.3311%" height="15" fill="rgb(222,201,40)" fg:x="1303" fg:w="281"/><text x="34.2443%" y="223.50">burst`&lt;bur..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (5 samples, 0.13%)</title><rect x="41.1949%" y="197" width="0.1304%" height="15" fill="rgb(235,61,29)" fg:x="1579" fg:w="5"/><text x="41.4449%" y="207.50"></text></g><g><title>burst`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="41.3253%" y="213" width="0.0261%" height="15" fill="rgb(219,207,3)" fg:x="1584" fg:w="1"/><text x="41.5753%" y="223.50"></text></g><g><title>burst`__rdl_alloc (2 samples, 0.05%)</title><rect x="41.3514%" y="213" width="0.0522%" height="15" fill="rgb(222,56,46)" fg:x="1585" fg:w="2"/><text x="41.6014%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="41.6384%" y="117" width="0.0261%" height="15" fill="rgb(239,76,54)" fg:x="1596" fg:w="1"/><text x="41.8884%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="41.7167%" y="85" width="0.0261%" height="15" fill="rgb(231,124,27)" fg:x="1599" fg:w="1"/><text x="41.9667%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.23%)</title><rect x="41.6384%" y="133" width="0.2348%" height="15" fill="rgb(249,195,6)" fg:x="1596" fg:w="9"/><text x="41.8884%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.21%)</title><rect x="41.6645%" y="117" width="0.2087%" height="15" fill="rgb(237,174,47)" fg:x="1597" fg:w="8"/><text x="41.9145%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.21%)</title><rect x="41.6645%" y="101" width="0.2087%" height="15" fill="rgb(206,201,31)" fg:x="1597" fg:w="8"/><text x="41.9145%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (5 samples, 0.13%)</title><rect x="41.7428%" y="85" width="0.1304%" height="15" fill="rgb(231,57,52)" fg:x="1600" fg:w="5"/><text x="41.9928%" y="95.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (12 samples, 0.31%)</title><rect x="41.5862%" y="149" width="0.3131%" height="15" fill="rgb(248,177,22)" fg:x="1594" fg:w="12"/><text x="41.8362%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="41.8732%" y="133" width="0.0261%" height="15" fill="rgb(215,211,37)" fg:x="1605" fg:w="1"/><text x="42.1232%" y="143.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (21 samples, 0.55%)</title><rect x="41.5601%" y="165" width="0.5479%" height="15" fill="rgb(241,128,51)" fg:x="1593" fg:w="21"/><text x="41.8101%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.21%)</title><rect x="41.8993%" y="149" width="0.2087%" height="15" fill="rgb(227,165,31)" fg:x="1606" fg:w="8"/><text x="42.1493%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.18%)</title><rect x="41.9254%" y="133" width="0.1826%" height="15" fill="rgb(228,167,24)" fg:x="1607" fg:w="7"/><text x="42.1754%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.13%)</title><rect x="41.9776%" y="117" width="0.1304%" height="15" fill="rgb(228,143,12)" fg:x="1609" fg:w="5"/><text x="42.2276%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.08%)</title><rect x="42.0297%" y="101" width="0.0783%" height="15" fill="rgb(249,149,8)" fg:x="1611" fg:w="3"/><text x="42.2797%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="42.2385%" y="117" width="0.0261%" height="15" fill="rgb(243,35,44)" fg:x="1619" fg:w="1"/><text x="42.4885%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.13%)</title><rect x="42.1863%" y="133" width="0.1304%" height="15" fill="rgb(246,89,9)" fg:x="1617" fg:w="5"/><text x="42.4363%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.05%)</title><rect x="42.2645%" y="117" width="0.0522%" height="15" fill="rgb(233,213,13)" fg:x="1620" fg:w="2"/><text x="42.5145%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.23%)</title><rect x="42.1080%" y="165" width="0.2348%" height="15" fill="rgb(233,141,41)" fg:x="1614" fg:w="9"/><text x="42.3580%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.21%)</title><rect x="42.1341%" y="149" width="0.2087%" height="15" fill="rgb(239,167,4)" fg:x="1615" fg:w="8"/><text x="42.3841%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="42.3167%" y="133" width="0.0261%" height="15" fill="rgb(209,217,16)" fg:x="1622" fg:w="1"/><text x="42.5667%" y="143.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (35 samples, 0.91%)</title><rect x="41.4819%" y="181" width="0.9131%" height="15" fill="rgb(219,88,35)" fg:x="1590" fg:w="35"/><text x="41.7319%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.05%)</title><rect x="42.3428%" y="165" width="0.0522%" height="15" fill="rgb(220,193,23)" fg:x="1623" fg:w="2"/><text x="42.5928%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="42.5515%" y="165" width="0.0261%" height="15" fill="rgb(230,90,52)" fg:x="1631" fg:w="1"/><text x="42.8015%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="42.7602%" y="133" width="0.0261%" height="15" fill="rgb(252,106,19)" fg:x="1639" fg:w="1"/><text x="43.0102%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.60%)</title><rect x="42.3950%" y="181" width="0.6001%" height="15" fill="rgb(206,74,20)" fg:x="1625" fg:w="23"/><text x="42.6450%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (16 samples, 0.42%)</title><rect x="42.5776%" y="165" width="0.4174%" height="15" fill="rgb(230,138,44)" fg:x="1632" fg:w="16"/><text x="42.8276%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (15 samples, 0.39%)</title><rect x="42.6037%" y="149" width="0.3913%" height="15" fill="rgb(235,182,43)" fg:x="1633" fg:w="15"/><text x="42.8537%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (8 samples, 0.21%)</title><rect x="42.7863%" y="133" width="0.2087%" height="15" fill="rgb(242,16,51)" fg:x="1640" fg:w="8"/><text x="43.0363%" y="143.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (60 samples, 1.57%)</title><rect x="41.4558%" y="197" width="1.5654%" height="15" fill="rgb(248,9,4)" fg:x="1589" fg:w="60"/><text x="41.7058%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="42.9950%" y="181" width="0.0261%" height="15" fill="rgb(210,31,22)" fg:x="1648" fg:w="1"/><text x="43.2450%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="43.1255%" y="149" width="0.0261%" height="15" fill="rgb(239,54,39)" fg:x="1653" fg:w="1"/><text x="43.3755%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.21%)</title><rect x="43.0472%" y="165" width="0.2087%" height="15" fill="rgb(230,99,41)" fg:x="1650" fg:w="8"/><text x="43.2972%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (4 samples, 0.10%)</title><rect x="43.1516%" y="149" width="0.1044%" height="15" fill="rgb(253,106,12)" fg:x="1654" fg:w="4"/><text x="43.4016%" y="159.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (72 samples, 1.88%)</title><rect x="41.4036%" y="213" width="1.8784%" height="15" fill="rgb(213,46,41)" fg:x="1587" fg:w="72"/><text x="41.6536%" y="223.50">b..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.26%)</title><rect x="43.0211%" y="197" width="0.2609%" height="15" fill="rgb(215,133,35)" fg:x="1649" fg:w="10"/><text x="43.2711%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.23%)</title><rect x="43.0472%" y="181" width="0.2348%" height="15" fill="rgb(213,28,5)" fg:x="1650" fg:w="9"/><text x="43.2972%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="43.2559%" y="165" width="0.0261%" height="15" fill="rgb(215,77,49)" fg:x="1658" fg:w="1"/><text x="43.5059%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.13%)</title><rect x="43.7777%" y="197" width="0.1304%" height="15" fill="rgb(248,100,22)" fg:x="1678" fg:w="5"/><text x="44.0277%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.26%)</title><rect x="45.2387%" y="165" width="0.2609%" height="15" fill="rgb(208,67,9)" fg:x="1734" fg:w="10"/><text x="45.4887%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (118 samples, 3.08%)</title><rect x="44.1430%" y="181" width="3.0785%" height="15" fill="rgb(219,133,21)" fg:x="1692" fg:w="118"/><text x="44.3930%" y="191.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (66 samples, 1.72%)</title><rect x="45.4996%" y="165" width="1.7219%" height="15" fill="rgb(246,46,29)" fg:x="1744" fg:w="66"/><text x="45.7496%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (159 samples, 4.15%)</title><rect x="43.2820%" y="213" width="4.1482%" height="15" fill="rgb(246,185,52)" fg:x="1659" fg:w="159"/><text x="43.5320%" y="223.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (135 samples, 3.52%)</title><rect x="43.9082%" y="197" width="3.5220%" height="15" fill="rgb(252,136,11)" fg:x="1683" fg:w="135"/><text x="44.1582%" y="207.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.21%)</title><rect x="47.2215%" y="181" width="0.2087%" height="15" fill="rgb(219,138,53)" fg:x="1810" fg:w="8"/><text x="47.4715%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.10%)</title><rect x="47.4302%" y="213" width="0.1044%" height="15" fill="rgb(211,51,23)" fg:x="1818" fg:w="4"/><text x="47.6802%" y="223.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (549 samples, 14.32%)</title><rect x="33.2638%" y="229" width="14.3230%" height="15" fill="rgb(247,221,28)" fg:x="1275" fg:w="549"/><text x="33.5138%" y="239.50">burst`&lt;burst::dsl::Dsl..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="47.5346%" y="213" width="0.0522%" height="15" fill="rgb(251,222,45)" fg:x="1822" fg:w="2"/><text x="47.7846%" y="223.50"></text></g><g><title>burst`DYLD-STUB$$malloc (4 samples, 0.10%)</title><rect x="47.5867%" y="229" width="0.1044%" height="15" fill="rgb(217,162,53)" fg:x="1824" fg:w="4"/><text x="47.8367%" y="239.50"></text></g><g><title>burst`__rdl_alloc (2 samples, 0.05%)</title><rect x="47.6911%" y="229" width="0.0522%" height="15" fill="rgb(229,93,14)" fg:x="1828" fg:w="2"/><text x="47.9411%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.16%)</title><rect x="48.0042%" y="149" width="0.1565%" height="15" fill="rgb(209,67,49)" fg:x="1840" fg:w="6"/><text x="48.2542%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.16%)</title><rect x="48.0042%" y="133" width="0.1565%" height="15" fill="rgb(213,87,29)" fg:x="1840" fg:w="6"/><text x="48.2542%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.16%)</title><rect x="48.0042%" y="117" width="0.1565%" height="15" fill="rgb(205,151,52)" fg:x="1840" fg:w="6"/><text x="48.2542%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.08%)</title><rect x="48.0824%" y="101" width="0.0783%" height="15" fill="rgb(253,215,39)" fg:x="1843" fg:w="3"/><text x="48.3324%" y="111.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (8 samples, 0.21%)</title><rect x="47.9781%" y="165" width="0.2087%" height="15" fill="rgb(221,220,41)" fg:x="1839" fg:w="8"/><text x="48.2281%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="48.1607%" y="149" width="0.0261%" height="15" fill="rgb(218,133,21)" fg:x="1846" fg:w="1"/><text x="48.4107%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.16%)</title><rect x="48.1868%" y="165" width="0.1565%" height="15" fill="rgb(221,193,43)" fg:x="1847" fg:w="6"/><text x="48.4368%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.16%)</title><rect x="48.1868%" y="149" width="0.1565%" height="15" fill="rgb(240,128,52)" fg:x="1847" fg:w="6"/><text x="48.4368%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.16%)</title><rect x="48.1868%" y="133" width="0.1565%" height="15" fill="rgb(253,114,12)" fg:x="1847" fg:w="6"/><text x="48.4368%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (4 samples, 0.10%)</title><rect x="48.2390%" y="117" width="0.1044%" height="15" fill="rgb(215,223,47)" fg:x="1849" fg:w="4"/><text x="48.4890%" y="127.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (19 samples, 0.50%)</title><rect x="47.8737%" y="181" width="0.4957%" height="15" fill="rgb(248,225,23)" fg:x="1835" fg:w="19"/><text x="48.1237%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="48.3433%" y="165" width="0.0261%" height="15" fill="rgb(250,108,0)" fg:x="1853" fg:w="1"/><text x="48.5933%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.23%)</title><rect x="48.3694%" y="181" width="0.2348%" height="15" fill="rgb(228,208,7)" fg:x="1854" fg:w="9"/><text x="48.6194%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.21%)</title><rect x="48.3955%" y="165" width="0.2087%" height="15" fill="rgb(244,45,10)" fg:x="1855" fg:w="8"/><text x="48.6455%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.18%)</title><rect x="48.4216%" y="149" width="0.1826%" height="15" fill="rgb(207,125,25)" fg:x="1856" fg:w="7"/><text x="48.6716%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.05%)</title><rect x="48.5520%" y="133" width="0.0522%" height="15" fill="rgb(210,195,18)" fg:x="1861" fg:w="2"/><text x="48.8020%" y="143.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (31 samples, 0.81%)</title><rect x="47.8215%" y="197" width="0.8088%" height="15" fill="rgb(249,80,12)" fg:x="1833" fg:w="31"/><text x="48.0715%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="48.6042%" y="181" width="0.0261%" height="15" fill="rgb(221,65,9)" fg:x="1863" fg:w="1"/><text x="48.8542%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="48.7869%" y="149" width="0.0261%" height="15" fill="rgb(235,49,36)" fg:x="1870" fg:w="1"/><text x="49.0369%" y="159.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (47 samples, 1.23%)</title><rect x="47.7433%" y="213" width="1.2262%" height="15" fill="rgb(225,32,20)" fg:x="1830" fg:w="47"/><text x="47.9933%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.34%)</title><rect x="48.6303%" y="197" width="0.3392%" height="15" fill="rgb(215,141,46)" fg:x="1864" fg:w="13"/><text x="48.8803%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.34%)</title><rect x="48.6303%" y="181" width="0.3392%" height="15" fill="rgb(250,160,47)" fg:x="1864" fg:w="13"/><text x="48.8803%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.34%)</title><rect x="48.6303%" y="165" width="0.3392%" height="15" fill="rgb(216,222,40)" fg:x="1864" fg:w="13"/><text x="48.8803%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (6 samples, 0.16%)</title><rect x="48.8129%" y="149" width="0.1565%" height="15" fill="rgb(234,217,39)" fg:x="1871" fg:w="6"/><text x="49.0629%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.08%)</title><rect x="48.9695%" y="213" width="0.0783%" height="15" fill="rgb(207,178,40)" fg:x="1877" fg:w="3"/><text x="49.2195%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.08%)</title><rect x="48.9695%" y="197" width="0.0783%" height="15" fill="rgb(221,136,13)" fg:x="1877" fg:w="3"/><text x="49.2195%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.05%)</title><rect x="48.9956%" y="181" width="0.0522%" height="15" fill="rgb(249,199,10)" fg:x="1878" fg:w="2"/><text x="49.2456%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.03%)</title><rect x="49.0217%" y="165" width="0.0261%" height="15" fill="rgb(249,222,13)" fg:x="1879" fg:w="1"/><text x="49.2717%" y="175.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (51 samples, 1.33%)</title><rect x="47.7433%" y="229" width="1.3306%" height="15" fill="rgb(244,185,38)" fg:x="1830" fg:w="51"/><text x="47.9933%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="49.0477%" y="213" width="0.0261%" height="15" fill="rgb(236,202,9)" fg:x="1880" fg:w="1"/><text x="49.2977%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.10%)</title><rect x="49.5434%" y="213" width="0.1044%" height="15" fill="rgb(250,229,37)" fg:x="1899" fg:w="4"/><text x="49.7934%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (20 samples, 0.52%)</title><rect x="51.1610%" y="181" width="0.5218%" height="15" fill="rgb(206,174,23)" fg:x="1961" fg:w="20"/><text x="51.4110%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (142 samples, 3.70%)</title><rect x="49.8565%" y="197" width="3.7047%" height="15" fill="rgb(211,33,43)" fg:x="1911" fg:w="142"/><text x="50.1065%" y="207.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (72 samples, 1.88%)</title><rect x="51.6828%" y="181" width="1.8784%" height="15" fill="rgb(245,58,50)" fg:x="1981" fg:w="72"/><text x="51.9328%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (179 samples, 4.67%)</title><rect x="49.0738%" y="229" width="4.6700%" height="15" fill="rgb(244,68,36)" fg:x="1881" fg:w="179"/><text x="49.3238%" y="239.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (157 samples, 4.10%)</title><rect x="49.6478%" y="213" width="4.0960%" height="15" fill="rgb(232,229,15)" fg:x="1903" fg:w="157"/><text x="49.8978%" y="223.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.18%)</title><rect x="53.5612%" y="197" width="0.1826%" height="15" fill="rgb(254,30,23)" fg:x="2053" fg:w="7"/><text x="53.8112%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (5 samples, 0.13%)</title><rect x="53.7438%" y="229" width="0.1304%" height="15" fill="rgb(235,160,14)" fg:x="2060" fg:w="5"/><text x="53.9938%" y="239.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (822 samples, 21.45%)</title><rect x="32.5594%" y="245" width="21.4453%" height="15" fill="rgb(212,155,44)" fg:x="1248" fg:w="822"/><text x="32.8094%" y="255.50">burst`&lt;burst::dsl::Dsl as core::cl..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.13%)</title><rect x="53.8742%" y="229" width="0.1304%" height="15" fill="rgb(226,2,50)" fg:x="2065" fg:w="5"/><text x="54.1242%" y="239.50"></text></g><g><title>burst`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.05%)</title><rect x="54.0047%" y="245" width="0.0522%" height="15" fill="rgb(234,177,6)" fg:x="2070" fg:w="2"/><text x="54.2547%" y="255.50"></text></g><g><title>burst`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="54.0569%" y="245" width="0.0261%" height="15" fill="rgb(217,24,9)" fg:x="2072" fg:w="1"/><text x="54.3069%" y="255.50"></text></g><g><title>burst`__rdl_alloc (3 samples, 0.08%)</title><rect x="54.0830%" y="245" width="0.0783%" height="15" fill="rgb(220,13,46)" fg:x="2073" fg:w="3"/><text x="54.3330%" y="255.50"></text></g><g><title>burst`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="54.2917%" y="229" width="0.0261%" height="15" fill="rgb(239,221,27)" fg:x="2081" fg:w="1"/><text x="54.5417%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.05%)</title><rect x="54.6830%" y="165" width="0.0522%" height="15" fill="rgb(222,198,25)" fg:x="2096" fg:w="2"/><text x="54.9330%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (33 samples, 0.86%)</title><rect x="54.4482%" y="197" width="0.8609%" height="15" fill="rgb(211,99,13)" fg:x="2087" fg:w="33"/><text x="54.6982%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (30 samples, 0.78%)</title><rect x="54.5265%" y="181" width="0.7827%" height="15" fill="rgb(232,111,31)" fg:x="2090" fg:w="30"/><text x="54.7765%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (22 samples, 0.57%)</title><rect x="54.7352%" y="165" width="0.5740%" height="15" fill="rgb(245,82,37)" fg:x="2098" fg:w="22"/><text x="54.9852%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (12 samples, 0.31%)</title><rect x="54.9961%" y="149" width="0.3131%" height="15" fill="rgb(227,149,46)" fg:x="2108" fg:w="12"/><text x="55.2461%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (38 samples, 0.99%)</title><rect x="54.3699%" y="213" width="0.9914%" height="15" fill="rgb(218,36,50)" fg:x="2084" fg:w="38"/><text x="54.6199%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.05%)</title><rect x="55.3092%" y="197" width="0.0522%" height="15" fill="rgb(226,80,48)" fg:x="2120" fg:w="2"/><text x="55.5592%" y="207.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (48 samples, 1.25%)</title><rect x="54.1612%" y="245" width="1.2523%" height="15" fill="rgb(238,224,15)" fg:x="2076" fg:w="48"/><text x="54.4112%" y="255.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (42 samples, 1.10%)</title><rect x="54.3178%" y="229" width="1.0957%" height="15" fill="rgb(241,136,10)" fg:x="2082" fg:w="42"/><text x="54.5678%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="55.3613%" y="213" width="0.0522%" height="15" fill="rgb(208,32,45)" fg:x="2122" fg:w="2"/><text x="55.6113%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.10%)</title><rect x="55.9614%" y="229" width="0.1044%" height="15" fill="rgb(207,135,9)" fg:x="2145" fg:w="4"/><text x="56.2114%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.18%)</title><rect x="57.1615%" y="197" width="0.1826%" height="15" fill="rgb(206,86,44)" fg:x="2191" fg:w="7"/><text x="57.4115%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (67 samples, 1.75%)</title><rect x="56.2745%" y="213" width="1.7480%" height="15" fill="rgb(245,177,15)" fg:x="2157" fg:w="67"/><text x="56.5245%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (26 samples, 0.68%)</title><rect x="57.3441%" y="197" width="0.6783%" height="15" fill="rgb(206,64,50)" fg:x="2198" fg:w="26"/><text x="57.5941%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (104 samples, 2.71%)</title><rect x="55.4135%" y="245" width="2.7133%" height="15" fill="rgb(234,36,40)" fg:x="2124" fg:w="104"/><text x="55.6635%" y="255.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (79 samples, 2.06%)</title><rect x="56.0657%" y="229" width="2.0610%" height="15" fill="rgb(213,64,8)" fg:x="2149" fg:w="79"/><text x="56.3157%" y="239.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.10%)</title><rect x="58.0224%" y="213" width="0.1044%" height="15" fill="rgb(210,75,36)" fg:x="2224" fg:w="4"/><text x="58.2724%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.10%)</title><rect x="58.1268%" y="245" width="0.1044%" height="15" fill="rgb(229,88,21)" fg:x="2228" fg:w="4"/><text x="58.3768%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.34%)</title><rect x="58.2312%" y="245" width="0.3392%" height="15" fill="rgb(252,204,47)" fg:x="2232" fg:w="13"/><text x="58.4812%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.21%)</title><rect x="58.3616%" y="229" width="0.2087%" height="15" fill="rgb(208,77,27)" fg:x="2237" fg:w="8"/><text x="58.6116%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.10%)</title><rect x="58.5703%" y="245" width="0.1044%" height="15" fill="rgb(221,76,26)" fg:x="2245" fg:w="4"/><text x="58.8203%" y="255.50"></text></g><g><title>burst`burst::ntfa::SolutionStatus::transfix (1,086 samples, 28.33%)</title><rect x="30.3679%" y="261" width="28.3329%" height="15" fill="rgb(225,139,18)" fg:x="1164" fg:w="1086"/><text x="30.6179%" y="271.50">burst`burst::ntfa::SolutionStatus::transfix</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="58.6747%" y="245" width="0.0261%" height="15" fill="rgb(230,137,11)" fg:x="2249" fg:w="1"/><text x="58.9247%" y="255.50"></text></g><g><title>burst`DYLD-STUB$$free (5 samples, 0.13%)</title><rect x="58.8834%" y="245" width="0.1304%" height="15" fill="rgb(212,28,1)" fg:x="2257" fg:w="5"/><text x="59.1334%" y="255.50"></text></g><g><title>burst`__rdl_dealloc (2 samples, 0.05%)</title><rect x="59.0138%" y="245" width="0.0522%" height="15" fill="rgb(248,164,17)" fg:x="2262" fg:w="2"/><text x="59.2638%" y="255.50"></text></g><g><title>burst`DYLD-STUB$$free (2 samples, 0.05%)</title><rect x="60.5009%" y="229" width="0.0522%" height="15" fill="rgb(222,171,42)" fg:x="2319" fg:w="2"/><text x="60.7509%" y="239.50"></text></g><g><title>burst`__rdl_dealloc (1 samples, 0.03%)</title><rect x="60.5531%" y="229" width="0.0261%" height="15" fill="rgb(243,84,45)" fg:x="2321" fg:w="1"/><text x="60.8031%" y="239.50"></text></g><g><title>burst`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="64.1534%" y="213" width="0.0261%" height="15" fill="rgb(252,49,23)" fg:x="2459" fg:w="1"/><text x="64.4034%" y="223.50"></text></g><g><title>burst`__rdl_dealloc (3 samples, 0.08%)</title><rect x="64.1795%" y="213" width="0.0783%" height="15" fill="rgb(215,19,7)" fg:x="2460" fg:w="3"/><text x="64.4295%" y="223.50"></text></g><g><title>burst`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="64.8839%" y="197" width="0.0261%" height="15" fill="rgb(238,81,41)" fg:x="2487" fg:w="1"/><text x="65.1339%" y="207.50"></text></g><g><title>burst`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="65.3274%" y="181" width="0.0261%" height="15" fill="rgb(210,199,37)" fg:x="2504" fg:w="1"/><text x="65.5774%" y="191.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (1 samples, 0.03%)</title><rect x="65.9275%" y="117" width="0.0261%" height="15" fill="rgb(244,192,49)" fg:x="2527" fg:w="1"/><text x="66.1775%" y="127.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (1 samples, 0.03%)</title><rect x="65.9275%" y="101" width="0.0261%" height="15" fill="rgb(226,211,11)" fg:x="2527" fg:w="1"/><text x="66.1775%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.05%)</title><rect x="65.9536%" y="117" width="0.0522%" height="15" fill="rgb(236,162,54)" fg:x="2528" fg:w="2"/><text x="66.2036%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="65.9797%" y="101" width="0.0261%" height="15" fill="rgb(220,229,9)" fg:x="2529" fg:w="1"/><text x="66.2297%" y="111.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (9 samples, 0.23%)</title><rect x="65.7970%" y="133" width="0.2348%" height="15" fill="rgb(250,87,22)" fg:x="2522" fg:w="9"/><text x="66.0470%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="66.0057%" y="117" width="0.0261%" height="15" fill="rgb(239,43,17)" fg:x="2530" fg:w="1"/><text x="66.2557%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="66.0318%" y="133" width="0.0261%" height="15" fill="rgb(231,177,25)" fg:x="2531" fg:w="1"/><text x="66.2818%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.05%)</title><rect x="66.0579%" y="133" width="0.0522%" height="15" fill="rgb(219,179,1)" fg:x="2532" fg:w="2"/><text x="66.3079%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="66.1101%" y="133" width="0.0261%" height="15" fill="rgb(238,219,53)" fg:x="2534" fg:w="1"/><text x="66.3601%" y="143.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (20 samples, 0.52%)</title><rect x="65.6405%" y="149" width="0.5218%" height="15" fill="rgb(232,167,36)" fg:x="2516" fg:w="20"/><text x="65.8905%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="66.1362%" y="133" width="0.0261%" height="15" fill="rgb(244,19,51)" fg:x="2535" fg:w="1"/><text x="66.3862%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.10%)</title><rect x="66.1623%" y="149" width="0.1044%" height="15" fill="rgb(224,6,22)" fg:x="2536" fg:w="4"/><text x="66.4123%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.08%)</title><rect x="66.1884%" y="133" width="0.0783%" height="15" fill="rgb(224,145,5)" fg:x="2537" fg:w="3"/><text x="66.4384%" y="143.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (32 samples, 0.83%)</title><rect x="65.5100%" y="165" width="0.8349%" height="15" fill="rgb(234,130,49)" fg:x="2511" fg:w="32"/><text x="65.7600%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.08%)</title><rect x="66.2666%" y="149" width="0.0783%" height="15" fill="rgb(254,6,2)" fg:x="2540" fg:w="3"/><text x="66.5166%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="66.3449%" y="165" width="0.0261%" height="15" fill="rgb(208,96,46)" fg:x="2543" fg:w="1"/><text x="66.5949%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.29%)</title><rect x="66.3710%" y="165" width="0.2870%" height="15" fill="rgb(239,3,39)" fg:x="2544" fg:w="11"/><text x="66.6210%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.23%)</title><rect x="66.4232%" y="149" width="0.2348%" height="15" fill="rgb(233,210,1)" fg:x="2546" fg:w="9"/><text x="66.6732%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.13%)</title><rect x="66.6580%" y="165" width="0.1304%" height="15" fill="rgb(244,137,37)" fg:x="2555" fg:w="5"/><text x="66.9080%" y="175.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (56 samples, 1.46%)</title><rect x="65.3535%" y="181" width="1.4610%" height="15" fill="rgb(240,136,2)" fg:x="2505" fg:w="56"/><text x="65.6035%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="66.7884%" y="165" width="0.0261%" height="15" fill="rgb(239,18,37)" fg:x="2560" fg:w="1"/><text x="67.0384%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="66.8145%" y="181" width="0.0261%" height="15" fill="rgb(218,185,22)" fg:x="2561" fg:w="1"/><text x="67.0645%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.42%)</title><rect x="66.8406%" y="181" width="0.4174%" height="15" fill="rgb(225,218,4)" fg:x="2562" fg:w="16"/><text x="67.0906%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.26%)</title><rect x="66.9971%" y="165" width="0.2609%" height="15" fill="rgb(230,182,32)" fg:x="2568" fg:w="10"/><text x="67.2471%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.05%)</title><rect x="67.2580%" y="181" width="0.0522%" height="15" fill="rgb(242,56,43)" fg:x="2578" fg:w="2"/><text x="67.5080%" y="191.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (95 samples, 2.48%)</title><rect x="64.9100%" y="197" width="2.4785%" height="15" fill="rgb(233,99,24)" fg:x="2488" fg:w="95"/><text x="65.1600%" y="207.50">bu..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.08%)</title><rect x="67.3102%" y="181" width="0.0783%" height="15" fill="rgb(234,209,42)" fg:x="2580" fg:w="3"/><text x="67.5602%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="67.3885%" y="197" width="0.0261%" height="15" fill="rgb(227,7,12)" fg:x="2583" fg:w="1"/><text x="67.6385%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (37 samples, 0.97%)</title><rect x="67.4146%" y="197" width="0.9653%" height="15" fill="rgb(245,203,43)" fg:x="2584" fg:w="37"/><text x="67.6646%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.26%)</title><rect x="68.1190%" y="181" width="0.2609%" height="15" fill="rgb(238,205,33)" fg:x="2611" fg:w="10"/><text x="68.3690%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.08%)</title><rect x="68.3799%" y="197" width="0.0783%" height="15" fill="rgb(231,56,7)" fg:x="2621" fg:w="3"/><text x="68.6299%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (18 samples, 0.47%)</title><rect x="68.4581%" y="197" width="0.4696%" height="15" fill="rgb(244,186,29)" fg:x="2624" fg:w="18"/><text x="68.7081%" y="207.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (183 samples, 4.77%)</title><rect x="64.2578%" y="213" width="4.7743%" height="15" fill="rgb(234,111,31)" fg:x="2463" fg:w="183"/><text x="64.5078%" y="223.50">burst`..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.10%)</title><rect x="68.9277%" y="197" width="0.1044%" height="15" fill="rgb(241,149,10)" fg:x="2642" fg:w="4"/><text x="69.1777%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="69.0321%" y="213" width="0.0261%" height="15" fill="rgb(249,206,44)" fg:x="2646" fg:w="1"/><text x="69.2821%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (57 samples, 1.49%)</title><rect x="69.0582%" y="213" width="1.4871%" height="15" fill="rgb(251,153,30)" fg:x="2647" fg:w="57"/><text x="69.3082%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (21 samples, 0.55%)</title><rect x="69.9974%" y="197" width="0.5479%" height="15" fill="rgb(239,152,38)" fg:x="2683" fg:w="21"/><text x="70.2474%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (10 samples, 0.26%)</title><rect x="70.5453%" y="213" width="0.2609%" height="15" fill="rgb(249,139,47)" fg:x="2704" fg:w="10"/><text x="70.7953%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (19 samples, 0.50%)</title><rect x="70.8062%" y="213" width="0.4957%" height="15" fill="rgb(244,64,35)" fg:x="2714" fg:w="19"/><text x="71.0562%" y="223.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (414 samples, 10.80%)</title><rect x="60.5792%" y="229" width="10.8009%" height="15" fill="rgb(216,46,15)" fg:x="2322" fg:w="414"/><text x="60.8292%" y="239.50">burst`core::ptr:..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.08%)</title><rect x="71.3019%" y="213" width="0.0783%" height="15" fill="rgb(250,74,19)" fg:x="2733" fg:w="3"/><text x="71.5519%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (7 samples, 0.18%)</title><rect x="71.3801%" y="229" width="0.1826%" height="15" fill="rgb(249,42,33)" fg:x="2736" fg:w="7"/><text x="71.6301%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (60 samples, 1.57%)</title><rect x="73.1803%" y="213" width="1.5654%" height="15" fill="rgb(242,149,17)" fg:x="2805" fg:w="60"/><text x="73.4303%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (124 samples, 3.24%)</title><rect x="71.5627%" y="229" width="3.2351%" height="15" fill="rgb(244,29,21)" fg:x="2743" fg:w="124"/><text x="71.8127%" y="239.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.05%)</title><rect x="74.7456%" y="213" width="0.0522%" height="15" fill="rgb(220,130,37)" fg:x="2865" fg:w="2"/><text x="74.9956%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.10%)</title><rect x="74.7978%" y="229" width="0.1044%" height="15" fill="rgb(211,67,2)" fg:x="2867" fg:w="4"/><text x="75.0478%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (105 samples, 2.74%)</title><rect x="74.9022%" y="229" width="2.7394%" height="15" fill="rgb(235,68,52)" fg:x="2871" fg:w="105"/><text x="75.1522%" y="239.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (6 samples, 0.16%)</title><rect x="77.4850%" y="213" width="0.1565%" height="15" fill="rgb(246,142,3)" fg:x="2970" fg:w="6"/><text x="77.7350%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.16%)</title><rect x="77.4850%" y="197" width="0.1565%" height="15" fill="rgb(241,25,7)" fg:x="2970" fg:w="6"/><text x="77.7350%" y="207.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (716 samples, 18.68%)</title><rect x="59.0660%" y="245" width="18.6799%" height="15" fill="rgb(242,119,39)" fg:x="2264" fg:w="716"/><text x="59.3160%" y="255.50">burst`core::ptr::drop_in_plac..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.10%)</title><rect x="77.6415%" y="229" width="0.1044%" height="15" fill="rgb(241,98,45)" fg:x="2976" fg:w="4"/><text x="77.8915%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (10 samples, 0.26%)</title><rect x="77.7459%" y="245" width="0.2609%" height="15" fill="rgb(254,28,30)" fg:x="2980" fg:w="10"/><text x="77.9959%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (47 samples, 1.23%)</title><rect x="78.0068%" y="245" width="1.2262%" height="15" fill="rgb(241,142,54)" fg:x="2990" fg:w="47"/><text x="78.2568%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (15 samples, 0.39%)</title><rect x="78.8416%" y="229" width="0.3913%" height="15" fill="rgb(222,85,15)" fg:x="3022" fg:w="15"/><text x="79.0916%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (17 samples, 0.44%)</title><rect x="79.2330%" y="245" width="0.4435%" height="15" fill="rgb(210,85,47)" fg:x="3037" fg:w="17"/><text x="79.4830%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (33 samples, 0.86%)</title><rect x="79.6765%" y="245" width="0.8609%" height="15" fill="rgb(224,206,25)" fg:x="3054" fg:w="33"/><text x="79.9265%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (10 samples, 0.26%)</title><rect x="80.2765%" y="229" width="0.2609%" height="15" fill="rgb(243,201,19)" fg:x="3077" fg:w="10"/><text x="80.5265%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (10 samples, 0.26%)</title><rect x="80.2765%" y="213" width="0.2609%" height="15" fill="rgb(236,59,4)" fg:x="3077" fg:w="10"/><text x="80.5265%" y="223.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (839 samples, 21.89%)</title><rect x="58.7008%" y="261" width="21.8889%" height="15" fill="rgb(254,179,45)" fg:x="2250" fg:w="839"/><text x="58.9508%" y="271.50">burst`core::ptr::drop_in_place&lt;burs..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.05%)</title><rect x="80.5374%" y="245" width="0.0522%" height="15" fill="rgb(226,14,10)" fg:x="3087" fg:w="2"/><text x="80.7874%" y="255.50"></text></g><g><title>burst`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (13 samples, 0.34%)</title><rect x="80.5896%" y="261" width="0.3392%" height="15" fill="rgb(244,27,41)" fg:x="3089" fg:w="13"/><text x="80.8396%" y="271.50"></text></g><g><title>burst`hashbrown::map::make_hash (108 samples, 2.82%)</title><rect x="80.9288%" y="261" width="2.8176%" height="15" fill="rgb(235,35,32)" fg:x="3102" fg:w="108"/><text x="81.1788%" y="271.50">bu..</text></g><g><title>burst`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (20 samples, 0.52%)</title><rect x="83.7464%" y="261" width="0.5218%" height="15" fill="rgb(218,68,31)" fg:x="3210" fg:w="20"/><text x="83.9964%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.08%)</title><rect x="84.2682%" y="261" width="0.0783%" height="15" fill="rgb(207,120,37)" fg:x="3230" fg:w="3"/><text x="84.5182%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="84.3204%" y="245" width="0.0261%" height="15" fill="rgb(227,98,0)" fg:x="3232" fg:w="1"/><text x="84.5704%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="84.3204%" y="229" width="0.0261%" height="15" fill="rgb(207,7,3)" fg:x="3232" fg:w="1"/><text x="84.5704%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (5 samples, 0.13%)</title><rect x="84.3465%" y="261" width="0.1304%" height="15" fill="rgb(206,98,19)" fg:x="3233" fg:w="5"/><text x="84.5965%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (18 samples, 0.47%)</title><rect x="85.3639%" y="245" width="0.4696%" height="15" fill="rgb(217,5,26)" fg:x="3272" fg:w="18"/><text x="85.6139%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (58 samples, 1.51%)</title><rect x="84.4769%" y="261" width="1.5132%" height="15" fill="rgb(235,190,38)" fg:x="3238" fg:w="58"/><text x="84.7269%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 0.16%)</title><rect x="85.8336%" y="245" width="0.1565%" height="15" fill="rgb(247,86,24)" fg:x="3290" fg:w="6"/><text x="86.0836%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (6 samples, 0.16%)</title><rect x="85.8336%" y="229" width="0.1565%" height="15" fill="rgb(205,101,16)" fg:x="3290" fg:w="6"/><text x="86.0836%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_large (2 samples, 0.05%)</title><rect x="85.9901%" y="261" width="0.0522%" height="15" fill="rgb(246,168,33)" fg:x="3296" fg:w="2"/><text x="86.2401%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (2 samples, 0.05%)</title><rect x="85.9901%" y="245" width="0.0522%" height="15" fill="rgb(231,114,1)" fg:x="3296" fg:w="2"/><text x="86.2401%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (2 samples, 0.05%)</title><rect x="85.9901%" y="229" width="0.0522%" height="15" fill="rgb(207,184,53)" fg:x="3296" fg:w="2"/><text x="86.2401%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.13%)</title><rect x="86.2249%" y="229" width="0.1304%" height="15" fill="rgb(224,95,51)" fg:x="3305" fg:w="5"/><text x="86.4749%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 0.42%)</title><rect x="86.0423%" y="261" width="0.4174%" height="15" fill="rgb(212,188,45)" fg:x="3298" fg:w="16"/><text x="86.2923%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (14 samples, 0.37%)</title><rect x="86.0944%" y="245" width="0.3652%" height="15" fill="rgb(223,154,38)" fg:x="3300" fg:w="14"/><text x="86.3444%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (4 samples, 0.10%)</title><rect x="86.3553%" y="229" width="0.1044%" height="15" fill="rgb(251,22,52)" fg:x="3310" fg:w="4"/><text x="86.6053%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (11 samples, 0.29%)</title><rect x="86.4597%" y="261" width="0.2870%" height="15" fill="rgb(229,209,22)" fg:x="3314" fg:w="11"/><text x="86.7097%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (76 samples, 1.98%)</title><rect x="86.7467%" y="261" width="1.9828%" height="15" fill="rgb(234,138,34)" fg:x="3325" fg:w="76"/><text x="86.9967%" y="271.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (64 samples, 1.67%)</title><rect x="87.0597%" y="245" width="1.6697%" height="15" fill="rgb(212,95,11)" fg:x="3337" fg:w="64"/><text x="87.3097%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (64 samples, 1.67%)</title><rect x="87.0597%" y="229" width="1.6697%" height="15" fill="rgb(240,179,47)" fg:x="3337" fg:w="64"/><text x="87.3097%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="88.7295%" y="261" width="0.0261%" height="15" fill="rgb(240,163,11)" fg:x="3401" fg:w="1"/><text x="88.9795%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.08%)</title><rect x="88.7555%" y="261" width="0.0783%" height="15" fill="rgb(236,37,12)" fg:x="3402" fg:w="3"/><text x="89.0055%" y="271.50"></text></g><g><title>burst`burst::ntfa::NTFABuilder::get_accepting_run (2,925 samples, 76.31%)</title><rect x="12.5750%" y="277" width="76.3110%" height="15" fill="rgb(232,164,16)" fg:x="482" fg:w="2925"/><text x="12.8250%" y="287.50">burst`burst::ntfa::NTFABuilder::get_accepting_run</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.05%)</title><rect x="88.8338%" y="261" width="0.0522%" height="15" fill="rgb(244,205,15)" fg:x="3405" fg:w="2"/><text x="89.0838%" y="271.50"></text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (17 samples, 0.44%)</title><rect x="90.6340%" y="261" width="0.4435%" height="15" fill="rgb(223,117,47)" fg:x="3474" fg:w="17"/><text x="90.8840%" y="271.50"></text></g><g><title>burst`__rdl_realloc (1 samples, 0.03%)</title><rect x="91.2601%" y="245" width="0.0261%" height="15" fill="rgb(244,107,35)" fg:x="3498" fg:w="1"/><text x="91.5101%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.05%)</title><rect x="91.4688%" y="213" width="0.0522%" height="15" fill="rgb(205,140,8)" fg:x="3506" fg:w="2"/><text x="91.7188%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.13%)</title><rect x="91.9123%" y="181" width="0.1304%" height="15" fill="rgb(228,84,46)" fg:x="3523" fg:w="5"/><text x="92.1623%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (24 samples, 0.63%)</title><rect x="91.5210%" y="197" width="0.6261%" height="15" fill="rgb(254,188,9)" fg:x="3508" fg:w="24"/><text x="91.7710%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (4 samples, 0.10%)</title><rect x="92.0428%" y="181" width="0.1044%" height="15" fill="rgb(206,112,54)" fg:x="3528" fg:w="4"/><text x="92.2928%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (32 samples, 0.83%)</title><rect x="91.3645%" y="229" width="0.8349%" height="15" fill="rgb(216,84,49)" fg:x="3502" fg:w="32"/><text x="91.6145%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (26 samples, 0.68%)</title><rect x="91.5210%" y="213" width="0.6783%" height="15" fill="rgb(214,194,35)" fg:x="3508" fg:w="26"/><text x="91.7710%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.05%)</title><rect x="92.1471%" y="197" width="0.0522%" height="15" fill="rgb(249,28,3)" fg:x="3532" fg:w="2"/><text x="92.3971%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.10%)</title><rect x="92.1993%" y="229" width="0.1044%" height="15" fill="rgb(222,56,52)" fg:x="3534" fg:w="4"/><text x="92.4493%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="92.3037%" y="229" width="0.0261%" height="15" fill="rgb(245,217,50)" fg:x="3538" fg:w="1"/><text x="92.5537%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="92.3298%" y="229" width="0.0261%" height="15" fill="rgb(213,201,24)" fg:x="3539" fg:w="1"/><text x="92.5798%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="92.3559%" y="197" width="0.0261%" height="15" fill="rgb(248,116,28)" fg:x="3540" fg:w="1"/><text x="92.6059%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.03%)</title><rect x="92.3819%" y="197" width="0.0261%" height="15" fill="rgb(219,72,43)" fg:x="3541" fg:w="1"/><text x="92.6319%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="92.3819%" y="181" width="0.0261%" height="15" fill="rgb(209,138,14)" fg:x="3541" fg:w="1"/><text x="92.6319%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.03%)</title><rect x="92.3819%" y="165" width="0.0261%" height="15" fill="rgb(222,18,33)" fg:x="3541" fg:w="1"/><text x="92.6319%" y="175.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (52 samples, 1.36%)</title><rect x="91.0775%" y="261" width="1.3566%" height="15" fill="rgb(213,199,7)" fg:x="3491" fg:w="52"/><text x="91.3275%" y="271.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (44 samples, 1.15%)</title><rect x="91.2862%" y="245" width="1.1479%" height="15" fill="rgb(250,110,10)" fg:x="3499" fg:w="44"/><text x="91.5362%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.08%)</title><rect x="92.3559%" y="229" width="0.0783%" height="15" fill="rgb(248,123,6)" fg:x="3540" fg:w="3"/><text x="92.6059%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.08%)</title><rect x="92.3559%" y="213" width="0.0783%" height="15" fill="rgb(206,91,31)" fg:x="3540" fg:w="3"/><text x="92.6059%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="92.4080%" y="197" width="0.0261%" height="15" fill="rgb(211,154,13)" fg:x="3542" fg:w="1"/><text x="92.6580%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.05%)</title><rect x="93.1385%" y="197" width="0.0522%" height="15" fill="rgb(225,148,7)" fg:x="3570" fg:w="2"/><text x="93.3885%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="93.6864%" y="165" width="0.0261%" height="15" fill="rgb(220,160,43)" fg:x="3591" fg:w="1"/><text x="93.9364%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (23 samples, 0.60%)</title><rect x="93.2690%" y="181" width="0.6001%" height="15" fill="rgb(213,52,39)" fg:x="3575" fg:w="23"/><text x="93.5190%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (6 samples, 0.16%)</title><rect x="93.7125%" y="165" width="0.1565%" height="15" fill="rgb(243,137,7)" fg:x="3592" fg:w="6"/><text x="93.9625%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (33 samples, 0.86%)</title><rect x="93.0342%" y="213" width="0.8609%" height="15" fill="rgb(230,79,13)" fg:x="3566" fg:w="33"/><text x="93.2842%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (27 samples, 0.70%)</title><rect x="93.1907%" y="197" width="0.7044%" height="15" fill="rgb(247,105,23)" fg:x="3572" fg:w="27"/><text x="93.4407%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="93.8690%" y="181" width="0.0261%" height="15" fill="rgb(223,179,41)" fg:x="3598" fg:w="1"/><text x="94.1190%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="93.8951%" y="213" width="0.0261%" height="15" fill="rgb(218,9,34)" fg:x="3599" fg:w="1"/><text x="94.1451%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.03%)</title><rect x="93.9212%" y="181" width="0.0261%" height="15" fill="rgb(222,106,8)" fg:x="3600" fg:w="1"/><text x="94.1712%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.03%)</title><rect x="93.9212%" y="165" width="0.0261%" height="15" fill="rgb(211,220,0)" fg:x="3600" fg:w="1"/><text x="94.1712%" y="175.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (41 samples, 1.07%)</title><rect x="92.9820%" y="229" width="1.0697%" height="15" fill="rgb(229,52,16)" fg:x="3564" fg:w="41"/><text x="93.2320%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (5 samples, 0.13%)</title><rect x="93.9212%" y="213" width="0.1304%" height="15" fill="rgb(212,155,18)" fg:x="3600" fg:w="5"/><text x="94.1712%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (5 samples, 0.13%)</title><rect x="93.9212%" y="197" width="0.1304%" height="15" fill="rgb(242,21,14)" fg:x="3600" fg:w="5"/><text x="94.1712%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.10%)</title><rect x="93.9473%" y="181" width="0.1044%" height="15" fill="rgb(222,19,48)" fg:x="3601" fg:w="4"/><text x="94.1973%" y="191.50"></text></g><g><title>burst`burst::ntfa::NTFABuilder::intersect::getmergedvl (64 samples, 1.67%)</title><rect x="92.4341%" y="261" width="1.6697%" height="15" fill="rgb(232,45,27)" fg:x="3543" fg:w="64"/><text x="92.6841%" y="271.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (47 samples, 1.23%)</title><rect x="92.8776%" y="245" width="1.2262%" height="15" fill="rgb(249,103,42)" fg:x="3560" fg:w="47"/><text x="93.1276%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="94.0517%" y="229" width="0.0522%" height="15" fill="rgb(246,81,33)" fg:x="3605" fg:w="2"/><text x="94.3017%" y="239.50"></text></g><g><title>burst`core::slice::sort::partial_insertion_sort (1 samples, 0.03%)</title><rect x="94.3386%" y="245" width="0.0261%" height="15" fill="rgb(252,33,42)" fg:x="3616" fg:w="1"/><text x="94.5886%" y="255.50"></text></g><g><title>burst`core::slice::sort::partial_insertion_sort (1 samples, 0.03%)</title><rect x="94.7300%" y="229" width="0.0261%" height="15" fill="rgb(209,212,41)" fg:x="3631" fg:w="1"/><text x="94.9800%" y="239.50"></text></g><g><title>burst`core::slice::sort::partial_insertion_sort (1 samples, 0.03%)</title><rect x="94.8865%" y="213" width="0.0261%" height="15" fill="rgb(207,154,6)" fg:x="3637" fg:w="1"/><text x="95.1365%" y="223.50"></text></g><g><title>burst`core::slice::sort::recurse (3 samples, 0.08%)</title><rect x="94.9126%" y="213" width="0.0783%" height="15" fill="rgb(223,64,47)" fg:x="3638" fg:w="3"/><text x="95.1626%" y="223.50"></text></g><g><title>burst`core::slice::sort::recurse (1 samples, 0.03%)</title><rect x="94.9648%" y="197" width="0.0261%" height="15" fill="rgb(211,161,38)" fg:x="3640" fg:w="1"/><text x="95.2148%" y="207.50"></text></g><g><title>burst`core::slice::sort::shift_tail (1 samples, 0.03%)</title><rect x="94.9648%" y="181" width="0.0261%" height="15" fill="rgb(219,138,40)" fg:x="3640" fg:w="1"/><text x="95.2148%" y="191.50"></text></g><g><title>burst`core::slice::sort::recurse (18 samples, 0.47%)</title><rect x="94.7561%" y="229" width="0.4696%" height="15" fill="rgb(241,228,46)" fg:x="3632" fg:w="18"/><text x="95.0061%" y="239.50"></text></g><g><title>burst`core::slice::sort::shift_tail (9 samples, 0.23%)</title><rect x="94.9909%" y="213" width="0.2348%" height="15" fill="rgb(223,209,38)" fg:x="3641" fg:w="9"/><text x="95.2409%" y="223.50"></text></g><g><title>burst`core::slice::sort::recurse (42 samples, 1.10%)</title><rect x="94.3647%" y="245" width="1.0957%" height="15" fill="rgb(236,164,45)" fg:x="3617" fg:w="42"/><text x="94.6147%" y="255.50"></text></g><g><title>burst`core::slice::sort::shift_tail (9 samples, 0.23%)</title><rect x="95.2257%" y="229" width="0.2348%" height="15" fill="rgb(231,15,5)" fg:x="3650" fg:w="9"/><text x="95.4757%" y="239.50"></text></g><g><title>burst`core::slice::sort::recurse (56 samples, 1.46%)</title><rect x="94.1038%" y="261" width="1.4610%" height="15" fill="rgb(252,35,15)" fg:x="3607" fg:w="56"/><text x="94.3538%" y="271.50"></text></g><g><title>burst`core::slice::sort::shift_tail (4 samples, 0.10%)</title><rect x="95.4605%" y="245" width="0.1044%" height="15" fill="rgb(248,181,18)" fg:x="3659" fg:w="4"/><text x="95.7105%" y="255.50"></text></g><g><title>burst`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="95.5648%" y="261" width="0.0261%" height="15" fill="rgb(233,39,42)" fg:x="3663" fg:w="1"/><text x="95.8148%" y="271.50"></text></g><g><title>burst`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.03%)</title><rect x="95.5648%" y="245" width="0.0261%" height="15" fill="rgb(238,110,33)" fg:x="3663" fg:w="1"/><text x="95.8148%" y="255.50"></text></g><g><title>burst`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="95.5648%" y="229" width="0.0261%" height="15" fill="rgb(233,195,10)" fg:x="3663" fg:w="1"/><text x="95.8148%" y="239.50"></text></g><g><title>burst`hashbrown::map::make_hash (17 samples, 0.44%)</title><rect x="95.5909%" y="261" width="0.4435%" height="15" fill="rgb(254,105,3)" fg:x="3664" fg:w="17"/><text x="95.8409%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (18 samples, 0.47%)</title><rect x="96.0344%" y="261" width="0.4696%" height="15" fill="rgb(221,225,9)" fg:x="3681" fg:w="18"/><text x="96.2844%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.10%)</title><rect x="96.3997%" y="245" width="0.1044%" height="15" fill="rgb(224,227,45)" fg:x="3695" fg:w="4"/><text x="96.6497%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (17 samples, 0.44%)</title><rect x="96.5040%" y="261" width="0.4435%" height="15" fill="rgb(229,198,43)" fg:x="3699" fg:w="17"/><text x="96.7540%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (7 samples, 0.18%)</title><rect x="96.7649%" y="245" width="0.1826%" height="15" fill="rgb(206,209,35)" fg:x="3709" fg:w="7"/><text x="97.0149%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.18%)</title><rect x="96.7649%" y="229" width="0.1826%" height="15" fill="rgb(245,195,53)" fg:x="3709" fg:w="7"/><text x="97.0149%" y="239.50"></text></g><g><title>burst`burst::ntfa::NTFABuilder::intersect (310 samples, 8.09%)</title><rect x="88.8860%" y="277" width="8.0877%" height="15" fill="rgb(240,92,26)" fg:x="3407" fg:w="310"/><text x="89.1360%" y="287.50">burst`burst..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="96.9476%" y="261" width="0.0261%" height="15" fill="rgb(207,40,23)" fg:x="3716" fg:w="1"/><text x="97.1976%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (19 samples, 0.50%)</title><rect x="97.0258%" y="261" width="0.4957%" height="15" fill="rgb(223,111,35)" fg:x="3719" fg:w="19"/><text x="97.2758%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.31%)</title><rect x="97.2085%" y="245" width="0.3131%" height="15" fill="rgb(229,147,28)" fg:x="3726" fg:w="12"/><text x="97.4585%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (3 samples, 0.08%)</title><rect x="97.5215%" y="261" width="0.0783%" height="15" fill="rgb(211,29,28)" fg:x="3738" fg:w="3"/><text x="97.7715%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.08%)</title><rect x="97.5215%" y="245" width="0.0783%" height="15" fill="rgb(228,72,33)" fg:x="3738" fg:w="3"/><text x="97.7715%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.05%)</title><rect x="97.5998%" y="261" width="0.0522%" height="15" fill="rgb(205,214,31)" fg:x="3741" fg:w="2"/><text x="97.8498%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (2 samples, 0.05%)</title><rect x="97.5998%" y="245" width="0.0522%" height="15" fill="rgb(224,111,15)" fg:x="3741" fg:w="2"/><text x="97.8498%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.05%)</title><rect x="97.5998%" y="229" width="0.0522%" height="15" fill="rgb(253,21,26)" fg:x="3741" fg:w="2"/><text x="97.8498%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.08%)</title><rect x="97.6520%" y="261" width="0.0783%" height="15" fill="rgb(245,139,43)" fg:x="3743" fg:w="3"/><text x="97.9020%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.16%)</title><rect x="97.7302%" y="261" width="0.1565%" height="15" fill="rgb(252,170,7)" fg:x="3746" fg:w="6"/><text x="97.9802%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (3 samples, 0.08%)</title><rect x="97.8085%" y="245" width="0.0783%" height="15" fill="rgb(231,118,14)" fg:x="3749" fg:w="3"/><text x="98.0585%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.08%)</title><rect x="97.8085%" y="229" width="0.0783%" height="15" fill="rgb(238,83,0)" fg:x="3749" fg:w="3"/><text x="98.0585%" y="239.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::ntfa::NTFABuilder&gt; (38 samples, 0.99%)</title><rect x="96.9736%" y="277" width="0.9914%" height="15" fill="rgb(221,39,39)" fg:x="3717" fg:w="38"/><text x="97.2236%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.08%)</title><rect x="97.8868%" y="261" width="0.0783%" height="15" fill="rgb(222,119,46)" fg:x="3752" fg:w="3"/><text x="98.1368%" y="271.50"></text></g><g><title>burst`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="97.9650%" y="277" width="0.0261%" height="15" fill="rgb(222,165,49)" fg:x="3755" fg:w="1"/><text x="98.2150%" y="287.50"></text></g><g><title>burst`hashbrown::map::make_hash (8 samples, 0.21%)</title><rect x="97.9911%" y="277" width="0.2087%" height="15" fill="rgb(219,113,52)" fg:x="3756" fg:w="8"/><text x="98.2411%" y="287.50"></text></g><g><title>burst`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.08%)</title><rect x="98.1998%" y="277" width="0.0783%" height="15" fill="rgb(214,7,15)" fg:x="3764" fg:w="3"/><text x="98.4498%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (10 samples, 0.26%)</title><rect x="98.2781%" y="277" width="0.2609%" height="15" fill="rgb(235,32,4)" fg:x="3767" fg:w="10"/><text x="98.5281%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.21%)</title><rect x="98.5390%" y="277" width="0.2087%" height="15" fill="rgb(238,90,54)" fg:x="3777" fg:w="8"/><text x="98.7890%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.10%)</title><rect x="98.7477%" y="277" width="0.1044%" height="15" fill="rgb(213,208,19)" fg:x="3785" fg:w="4"/><text x="98.9977%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.13%)</title><rect x="98.8521%" y="277" width="0.1304%" height="15" fill="rgb(233,156,4)" fg:x="3789" fg:w="5"/><text x="99.1021%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1 samples, 0.03%)</title><rect x="98.9825%" y="277" width="0.0261%" height="15" fill="rgb(207,194,5)" fg:x="3794" fg:w="1"/><text x="99.2325%" y="287.50"></text></g><g><title>burst`std::rt::lang_start::_{{closure}} (3,812 samples, 99.45%)</title><rect x="0.0000%" y="341" width="99.4521%" height="15" fill="rgb(206,111,30)" fg:x="0" fg:w="3812"/><text x="0.2500%" y="351.50">burst`std::rt::lang_start::_{{closure}}</text></g><g><title>burst`std::sys_common::backtrace::__rust_begin_short_backtrace (3,812 samples, 99.45%)</title><rect x="0.0000%" y="325" width="99.4521%" height="15" fill="rgb(243,70,54)" fg:x="0" fg:w="3812"/><text x="0.2500%" y="335.50">burst`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>burst`burst::main (3,812 samples, 99.45%)</title><rect x="0.0000%" y="309" width="99.4521%" height="15" fill="rgb(242,28,8)" fg:x="0" fg:w="3812"/><text x="0.2500%" y="319.50">burst`burst::main</text></g><g><title>burst`burst::synthesis::synthesize (3,812 samples, 99.45%)</title><rect x="0.0000%" y="293" width="99.4521%" height="15" fill="rgb(219,106,18)" fg:x="0" fg:w="3812"/><text x="0.2500%" y="303.50">burst`burst::synthesis::synthesize</text></g><g><title>libsystem_platform.dylib`_platform_memmove (17 samples, 0.44%)</title><rect x="99.0086%" y="277" width="0.4435%" height="15" fill="rgb(244,222,10)" fg:x="3795" fg:w="17"/><text x="99.2586%" y="287.50"></text></g><g><title>burst`main (3,813 samples, 99.48%)</title><rect x="0.0000%" y="373" width="99.4782%" height="15" fill="rgb(236,179,52)" fg:x="0" fg:w="3813"/><text x="0.2500%" y="383.50">burst`main</text></g><g><title>burst`std::rt::lang_start_internal (3,813 samples, 99.48%)</title><rect x="0.0000%" y="357" width="99.4782%" height="15" fill="rgb(213,23,39)" fg:x="0" fg:w="3813"/><text x="0.2500%" y="367.50">burst`std::rt::lang_start_internal</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="99.4521%" y="341" width="0.0261%" height="15" fill="rgb(238,48,10)" fg:x="3812" fg:w="1"/><text x="99.7021%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="99.4521%" y="325" width="0.0261%" height="15" fill="rgb(251,196,23)" fg:x="3812" fg:w="1"/><text x="99.7021%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="99.4521%" y="309" width="0.0261%" height="15" fill="rgb(250,152,24)" fg:x="3812" fg:w="1"/><text x="99.7021%" y="319.50"></text></g><g><title>dyld`start (3,818 samples, 99.61%)</title><rect x="0.0000%" y="389" width="99.6087%" height="15" fill="rgb(209,150,17)" fg:x="0" fg:w="3818"/><text x="0.2500%" y="399.50">dyld`start</text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (5 samples, 0.13%)</title><rect x="99.4782%" y="373" width="0.1304%" height="15" fill="rgb(234,202,34)" fg:x="3813" fg:w="5"/><text x="99.7282%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__exit (5 samples, 0.13%)</title><rect x="99.4782%" y="357" width="0.1304%" height="15" fill="rgb(253,148,53)" fg:x="3813" fg:w="5"/><text x="99.7282%" y="367.50"></text></g><g><title>all (3,833 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(218,129,16)" fg:x="0" fg:w="3833"/><text x="0.2500%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__exit (15 samples, 0.39%)</title><rect x="99.6087%" y="389" width="0.3913%" height="15" fill="rgb(216,85,19)" fg:x="3818" fg:w="15"/><text x="99.8587%" y="399.50"></text></g></svg></svg>