<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="453.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="63412"><g><title>burst`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.04%)</title><rect x="0.0016%" y="293" width="0.0394%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="25"/><text x="0.2516%" y="303.50"></text></g><g><title>burst`DYLD-STUB$$free (30 samples, 0.05%)</title><rect x="0.0410%" y="293" width="0.0473%" height="15" fill="rgb(217,0,24)" fg:x="26" fg:w="30"/><text x="0.2910%" y="303.50"></text></g><g><title>burst`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (6,168 samples, 9.73%)</title><rect x="0.0899%" y="293" width="9.7269%" height="15" fill="rgb(221,193,54)" fg:x="57" fg:w="6168"/><text x="0.3399%" y="303.50">burst`alloc::c..</text></g><g><title>burst`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::push (106 samples, 0.17%)</title><rect x="9.8168%" y="293" width="0.1672%" height="15" fill="rgb(248,212,6)" fg:x="6225" fg:w="106"/><text x="10.0668%" y="303.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (60 samples, 0.09%)</title><rect x="9.9839%" y="293" width="0.0946%" height="15" fill="rgb(208,68,35)" fg:x="6331" fg:w="60"/><text x="10.2339%" y="303.50"></text></g><g><title>burst`burst::acceptingrun::SolutionStatus::absolute_carry (17 samples, 0.03%)</title><rect x="10.0785%" y="293" width="0.0268%" height="15" fill="rgb(232,128,0)" fg:x="6391" fg:w="17"/><text x="10.3285%" y="303.50"></text></g><g><title>burst`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="18.0660%" y="229" width="0.0126%" height="15" fill="rgb(207,160,47)" fg:x="11456" fg:w="8"/><text x="18.3160%" y="239.50"></text></g><g><title>burst`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.03%)</title><rect x="18.0628%" y="245" width="0.0284%" height="15" fill="rgb(228,23,34)" fg:x="11454" fg:w="18"/><text x="18.3128%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.01%)</title><rect x="18.0912%" y="245" width="0.0126%" height="15" fill="rgb(218,30,26)" fg:x="11472" fg:w="8"/><text x="18.3412%" y="255.50"></text></g><g><title>burst`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.05%)</title><rect x="18.0549%" y="261" width="0.0505%" height="15" fill="rgb(220,122,19)" fg:x="11449" fg:w="32"/><text x="18.3049%" y="271.50"></text></g><g><title>burst`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.08%)</title><rect x="18.0360%" y="277" width="0.0836%" height="15" fill="rgb(250,228,42)" fg:x="11437" fg:w="53"/><text x="18.2860%" y="287.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.08%)</title><rect x="18.1196%" y="277" width="0.0820%" height="15" fill="rgb(240,193,28)" fg:x="11490" fg:w="52"/><text x="18.3696%" y="287.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.02%)</title><rect x="18.2016%" y="277" width="0.0158%" height="15" fill="rgb(216,20,37)" fg:x="11542" fg:w="10"/><text x="18.4516%" y="287.50"></text></g><g><title>burst`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.02%)</title><rect x="18.2174%" y="277" width="0.0205%" height="15" fill="rgb(206,188,39)" fg:x="11552" fg:w="13"/><text x="18.4674%" y="287.50"></text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (645 samples, 1.02%)</title><rect x="18.2379%" y="277" width="1.0172%" height="15" fill="rgb(217,207,13)" fg:x="11565" fg:w="645"/><text x="18.4879%" y="287.50"></text></g><g><title>burst`DYLD-STUB$$malloc (9 samples, 0.01%)</title><rect x="19.2629%" y="277" width="0.0142%" height="15" fill="rgb(231,73,38)" fg:x="12215" fg:w="9"/><text x="19.5129%" y="287.50"></text></g><g><title>burst`__rdl_alloc (14 samples, 0.02%)</title><rect x="19.2850%" y="277" width="0.0221%" height="15" fill="rgb(225,20,46)" fg:x="12229" fg:w="14"/><text x="19.5350%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (15 samples, 0.02%)</title><rect x="22.1236%" y="181" width="0.0237%" height="15" fill="rgb(210,31,41)" fg:x="14029" fg:w="15"/><text x="22.3736%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (15 samples, 0.02%)</title><rect x="22.1236%" y="165" width="0.0237%" height="15" fill="rgb(221,200,47)" fg:x="14029" fg:w="15"/><text x="22.3736%" y="175.50"></text></g><g><title>burst`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::push (1,808 samples, 2.85%)</title><rect x="19.3071%" y="277" width="2.8512%" height="15" fill="rgb(226,26,5)" fg:x="12243" fg:w="1808"/><text x="19.5571%" y="287.50">bu..</text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (22 samples, 0.03%)</title><rect x="22.1236%" y="261" width="0.0347%" height="15" fill="rgb(249,33,26)" fg:x="14029" fg:w="22"/><text x="22.3736%" y="271.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (22 samples, 0.03%)</title><rect x="22.1236%" y="245" width="0.0347%" height="15" fill="rgb(235,183,28)" fg:x="14029" fg:w="22"/><text x="22.3736%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (22 samples, 0.03%)</title><rect x="22.1236%" y="229" width="0.0347%" height="15" fill="rgb(221,5,38)" fg:x="14029" fg:w="22"/><text x="22.3736%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (22 samples, 0.03%)</title><rect x="22.1236%" y="213" width="0.0347%" height="15" fill="rgb(247,18,42)" fg:x="14029" fg:w="22"/><text x="22.3736%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (22 samples, 0.03%)</title><rect x="22.1236%" y="197" width="0.0347%" height="15" fill="rgb(241,131,45)" fg:x="14029" fg:w="22"/><text x="22.3736%" y="207.50"></text></g><g><title>burst`__rdl_alloc (8 samples, 0.01%)</title><rect x="22.2292%" y="261" width="0.0126%" height="15" fill="rgb(249,31,29)" fg:x="14096" fg:w="8"/><text x="22.4792%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="22.3585%" y="229" width="0.0142%" height="15" fill="rgb(225,111,53)" fg:x="14178" fg:w="9"/><text x="22.6085%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (34 samples, 0.05%)</title><rect x="22.6408%" y="197" width="0.0536%" height="15" fill="rgb(238,160,17)" fg:x="14357" fg:w="34"/><text x="22.8908%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (321 samples, 0.51%)</title><rect x="22.4137%" y="213" width="0.5062%" height="15" fill="rgb(214,148,48)" fg:x="14213" fg:w="321"/><text x="22.6637%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (143 samples, 0.23%)</title><rect x="22.6944%" y="197" width="0.2255%" height="15" fill="rgb(232,36,49)" fg:x="14391" fg:w="143"/><text x="22.9444%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (371 samples, 0.59%)</title><rect x="22.3727%" y="229" width="0.5851%" height="15" fill="rgb(209,103,24)" fg:x="14187" fg:w="371"/><text x="22.6227%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (24 samples, 0.04%)</title><rect x="22.9200%" y="213" width="0.0378%" height="15" fill="rgb(229,88,8)" fg:x="14534" fg:w="24"/><text x="23.1700%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (444 samples, 0.70%)</title><rect x="22.2655%" y="245" width="0.7002%" height="15" fill="rgb(213,181,19)" fg:x="14119" fg:w="444"/><text x="22.5155%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (13 samples, 0.02%)</title><rect x="22.9657%" y="245" width="0.0205%" height="15" fill="rgb(254,191,54)" fg:x="14563" fg:w="13"/><text x="23.2157%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (25 samples, 0.04%)</title><rect x="23.0146%" y="197" width="0.0394%" height="15" fill="rgb(241,83,37)" fg:x="14594" fg:w="25"/><text x="23.2646%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (25 samples, 0.04%)</title><rect x="23.0146%" y="181" width="0.0394%" height="15" fill="rgb(233,36,39)" fg:x="14594" fg:w="25"/><text x="23.2646%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (10 samples, 0.02%)</title><rect x="23.0540%" y="181" width="0.0158%" height="15" fill="rgb(226,3,54)" fg:x="14619" fg:w="10"/><text x="23.3040%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_scan_madvise_free (14 samples, 0.02%)</title><rect x="23.0745%" y="181" width="0.0221%" height="15" fill="rgb(245,192,40)" fg:x="14632" fg:w="14"/><text x="23.3245%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.01%)</title><rect x="23.0840%" y="165" width="0.0126%" height="15" fill="rgb(238,167,29)" fg:x="14638" fg:w="8"/><text x="23.3340%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (28 samples, 0.04%)</title><rect x="23.0540%" y="197" width="0.0442%" height="15" fill="rgb(232,182,51)" fg:x="14619" fg:w="28"/><text x="23.3040%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (9 samples, 0.01%)</title><rect x="23.1297%" y="181" width="0.0142%" height="15" fill="rgb(231,60,39)" fg:x="14667" fg:w="9"/><text x="23.3797%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.01%)</title><rect x="23.1297%" y="165" width="0.0142%" height="15" fill="rgb(208,69,12)" fg:x="14667" fg:w="9"/><text x="23.3797%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (44 samples, 0.07%)</title><rect x="23.0982%" y="197" width="0.0694%" height="15" fill="rgb(235,93,37)" fg:x="14647" fg:w="44"/><text x="23.3482%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (15 samples, 0.02%)</title><rect x="23.1439%" y="181" width="0.0237%" height="15" fill="rgb(213,116,39)" fg:x="14676" fg:w="15"/><text x="23.3939%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (15 samples, 0.02%)</title><rect x="23.1439%" y="165" width="0.0237%" height="15" fill="rgb(222,207,29)" fg:x="14676" fg:w="15"/><text x="23.3939%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.01%)</title><rect x="23.1675%" y="197" width="0.0142%" height="15" fill="rgb(206,96,30)" fg:x="14691" fg:w="9"/><text x="23.4175%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (10 samples, 0.02%)</title><rect x="23.1896%" y="197" width="0.0158%" height="15" fill="rgb(218,138,4)" fg:x="14705" fg:w="10"/><text x="23.4396%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (7 samples, 0.01%)</title><rect x="23.2117%" y="181" width="0.0110%" height="15" fill="rgb(250,191,14)" fg:x="14719" fg:w="7"/><text x="23.4617%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (23 samples, 0.04%)</title><rect x="23.2290%" y="149" width="0.0363%" height="15" fill="rgb(239,60,40)" fg:x="14730" fg:w="23"/><text x="23.4790%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (32 samples, 0.05%)</title><rect x="23.2227%" y="181" width="0.0505%" height="15" fill="rgb(206,27,48)" fg:x="14726" fg:w="32"/><text x="23.4727%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (28 samples, 0.04%)</title><rect x="23.2290%" y="165" width="0.0442%" height="15" fill="rgb(225,35,8)" fg:x="14730" fg:w="28"/><text x="23.4790%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (44 samples, 0.07%)</title><rect x="23.2054%" y="197" width="0.0694%" height="15" fill="rgb(250,213,24)" fg:x="14715" fg:w="44"/><text x="23.4554%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (177 samples, 0.28%)</title><rect x="23.0051%" y="213" width="0.2791%" height="15" fill="rgb(247,123,22)" fg:x="14588" fg:w="177"/><text x="23.2551%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,150 samples, 1.81%)</title><rect x="22.9988%" y="229" width="1.8135%" height="15" fill="rgb(231,138,38)" fg:x="14584" fg:w="1150"/><text x="23.2488%" y="239.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (969 samples, 1.53%)</title><rect x="23.2842%" y="213" width="1.5281%" height="15" fill="rgb(231,145,46)" fg:x="14765" fg:w="969"/><text x="23.5342%" y="223.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (1,641 samples, 2.59%)</title><rect x="22.2434%" y="261" width="2.5878%" height="15" fill="rgb(251,118,11)" fg:x="14105" fg:w="1641"/><text x="22.4934%" y="271.50">bu..</text></g><g><title>libsystem_malloc.dylib`realloc (1,164 samples, 1.84%)</title><rect x="22.9956%" y="245" width="1.8356%" height="15" fill="rgb(217,147,25)" fg:x="14582" fg:w="1164"/><text x="23.2456%" y="255.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="24.8313%" y="261" width="0.0126%" height="15" fill="rgb(247,81,37)" fg:x="15746" fg:w="8"/><text x="25.0813%" y="271.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,705 samples, 2.69%)</title><rect x="22.1583%" y="277" width="2.6888%" height="15" fill="rgb(209,12,38)" fg:x="14051" fg:w="1705"/><text x="22.4083%" y="287.50">bu..</text></g><g><title>burst`alloc::raw_vec::finish_grow (20 samples, 0.03%)</title><rect x="24.8470%" y="277" width="0.0315%" height="15" fill="rgb(227,1,9)" fg:x="15756" fg:w="20"/><text x="25.0970%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (27 samples, 0.04%)</title><rect x="26.0077%" y="197" width="0.0426%" height="15" fill="rgb(248,47,43)" fg:x="16492" fg:w="27"/><text x="26.2577%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (21 samples, 0.03%)</title><rect x="26.0172%" y="181" width="0.0331%" height="15" fill="rgb(221,10,30)" fg:x="16498" fg:w="21"/><text x="26.2672%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (18 samples, 0.03%)</title><rect x="26.0219%" y="165" width="0.0284%" height="15" fill="rgb(210,229,1)" fg:x="16501" fg:w="18"/><text x="26.2719%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (7 samples, 0.01%)</title><rect x="26.0392%" y="149" width="0.0110%" height="15" fill="rgb(222,148,37)" fg:x="16512" fg:w="7"/><text x="26.2892%" y="159.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (39 samples, 0.06%)</title><rect x="25.9903%" y="213" width="0.0615%" height="15" fill="rgb(234,67,33)" fg:x="16481" fg:w="39"/><text x="26.2403%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (24 samples, 0.04%)</title><rect x="26.0834%" y="101" width="0.0378%" height="15" fill="rgb(247,98,35)" fg:x="16540" fg:w="24"/><text x="26.3334%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (18 samples, 0.03%)</title><rect x="26.0929%" y="85" width="0.0284%" height="15" fill="rgb(247,138,52)" fg:x="16546" fg:w="18"/><text x="26.3429%" y="95.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (34 samples, 0.05%)</title><rect x="26.0692%" y="149" width="0.0536%" height="15" fill="rgb(213,79,30)" fg:x="16531" fg:w="34"/><text x="26.3192%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (28 samples, 0.04%)</title><rect x="26.0787%" y="133" width="0.0442%" height="15" fill="rgb(246,177,23)" fg:x="16537" fg:w="28"/><text x="26.3287%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (27 samples, 0.04%)</title><rect x="26.0802%" y="117" width="0.0426%" height="15" fill="rgb(230,62,27)" fg:x="16538" fg:w="27"/><text x="26.3302%" y="127.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (41 samples, 0.06%)</title><rect x="26.0597%" y="165" width="0.0647%" height="15" fill="rgb(216,154,8)" fg:x="16525" fg:w="41"/><text x="26.3097%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (32 samples, 0.05%)</title><rect x="26.1260%" y="165" width="0.0505%" height="15" fill="rgb(244,35,45)" fg:x="16567" fg:w="32"/><text x="26.3760%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (30 samples, 0.05%)</title><rect x="26.1291%" y="149" width="0.0473%" height="15" fill="rgb(251,115,12)" fg:x="16569" fg:w="30"/><text x="26.3791%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (30 samples, 0.05%)</title><rect x="26.1291%" y="133" width="0.0473%" height="15" fill="rgb(240,54,50)" fg:x="16569" fg:w="30"/><text x="26.3791%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (24 samples, 0.04%)</title><rect x="26.1386%" y="117" width="0.0378%" height="15" fill="rgb(233,84,52)" fg:x="16575" fg:w="24"/><text x="26.3886%" y="127.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (79 samples, 0.12%)</title><rect x="26.0550%" y="197" width="0.1246%" height="15" fill="rgb(207,117,47)" fg:x="16522" fg:w="79"/><text x="26.3050%" y="207.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (78 samples, 0.12%)</title><rect x="26.0566%" y="181" width="0.1230%" height="15" fill="rgb(249,43,39)" fg:x="16523" fg:w="78"/><text x="26.3066%" y="191.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (87 samples, 0.14%)</title><rect x="26.0550%" y="213" width="0.1372%" height="15" fill="rgb(209,38,44)" fg:x="16522" fg:w="87"/><text x="26.3050%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="26.1812%" y="197" width="0.0110%" height="15" fill="rgb(236,212,23)" fg:x="16602" fg:w="7"/><text x="26.4312%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="26.1812%" y="181" width="0.0110%" height="15" fill="rgb(242,79,21)" fg:x="16602" fg:w="7"/><text x="26.4312%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="26.1812%" y="165" width="0.0110%" height="15" fill="rgb(211,96,35)" fg:x="16602" fg:w="7"/><text x="26.4312%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (36 samples, 0.06%)</title><rect x="26.2127%" y="181" width="0.0568%" height="15" fill="rgb(253,215,40)" fg:x="16622" fg:w="36"/><text x="26.4627%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (13 samples, 0.02%)</title><rect x="26.2490%" y="165" width="0.0205%" height="15" fill="rgb(211,81,21)" fg:x="16645" fg:w="13"/><text x="26.4990%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (51 samples, 0.08%)</title><rect x="26.1922%" y="213" width="0.0804%" height="15" fill="rgb(208,190,38)" fg:x="16609" fg:w="51"/><text x="26.4422%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (44 samples, 0.07%)</title><rect x="26.2032%" y="197" width="0.0694%" height="15" fill="rgb(235,213,38)" fg:x="16616" fg:w="44"/><text x="26.4532%" y="207.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (267 samples, 0.42%)</title><rect x="25.8626%" y="229" width="0.4211%" height="15" fill="rgb(237,122,38)" fg:x="16400" fg:w="267"/><text x="26.1126%" y="239.50"></text></g><g><title>burst`DYLD-STUB$$malloc (10 samples, 0.02%)</title><rect x="26.2837%" y="229" width="0.0158%" height="15" fill="rgb(244,218,35)" fg:x="16667" fg:w="10"/><text x="26.5337%" y="239.50"></text></g><g><title>burst`__rdl_alloc (28 samples, 0.04%)</title><rect x="26.2994%" y="229" width="0.0442%" height="15" fill="rgb(240,68,47)" fg:x="16677" fg:w="28"/><text x="26.5494%" y="239.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (7 samples, 0.01%)</title><rect x="26.8057%" y="181" width="0.0110%" height="15" fill="rgb(210,16,53)" fg:x="16998" fg:w="7"/><text x="27.0557%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="26.8293%" y="69" width="0.0142%" height="15" fill="rgb(235,124,12)" fg:x="17013" fg:w="9"/><text x="27.0793%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (7 samples, 0.01%)</title><rect x="26.8325%" y="53" width="0.0110%" height="15" fill="rgb(224,169,11)" fg:x="17015" fg:w="7"/><text x="27.0825%" y="63.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (16 samples, 0.03%)</title><rect x="26.8198%" y="133" width="0.0252%" height="15" fill="rgb(250,166,2)" fg:x="17007" fg:w="16"/><text x="27.0698%" y="143.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (16 samples, 0.03%)</title><rect x="26.8198%" y="117" width="0.0252%" height="15" fill="rgb(242,216,29)" fg:x="17007" fg:w="16"/><text x="27.0698%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.02%)</title><rect x="26.8293%" y="101" width="0.0158%" height="15" fill="rgb(230,116,27)" fg:x="17013" fg:w="10"/><text x="27.0793%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.02%)</title><rect x="26.8293%" y="85" width="0.0158%" height="15" fill="rgb(228,99,48)" fg:x="17013" fg:w="10"/><text x="27.0793%" y="95.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (27 samples, 0.04%)</title><rect x="26.8183%" y="165" width="0.0426%" height="15" fill="rgb(253,11,6)" fg:x="17006" fg:w="27"/><text x="27.0683%" y="175.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (27 samples, 0.04%)</title><rect x="26.8183%" y="149" width="0.0426%" height="15" fill="rgb(247,143,39)" fg:x="17006" fg:w="27"/><text x="27.0683%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.02%)</title><rect x="26.8451%" y="133" width="0.0158%" height="15" fill="rgb(236,97,10)" fg:x="17023" fg:w="10"/><text x="27.0951%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.01%)</title><rect x="26.8467%" y="117" width="0.0142%" height="15" fill="rgb(233,208,19)" fg:x="17024" fg:w="9"/><text x="27.0967%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="26.8467%" y="101" width="0.0142%" height="15" fill="rgb(216,164,2)" fg:x="17024" fg:w="9"/><text x="27.0967%" y="111.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (32 samples, 0.05%)</title><rect x="26.8167%" y="181" width="0.0505%" height="15" fill="rgb(220,129,5)" fg:x="17005" fg:w="32"/><text x="27.0667%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (19 samples, 0.03%)</title><rect x="26.8735%" y="149" width="0.0300%" height="15" fill="rgb(242,17,10)" fg:x="17041" fg:w="19"/><text x="27.1235%" y="159.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (127 samples, 0.20%)</title><rect x="26.7047%" y="197" width="0.2003%" height="15" fill="rgb(242,107,0)" fg:x="16934" fg:w="127"/><text x="26.9547%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (24 samples, 0.04%)</title><rect x="26.8672%" y="181" width="0.0378%" height="15" fill="rgb(251,28,31)" fg:x="17037" fg:w="24"/><text x="27.1172%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (21 samples, 0.03%)</title><rect x="26.8719%" y="165" width="0.0331%" height="15" fill="rgb(233,223,10)" fg:x="17040" fg:w="21"/><text x="27.1219%" y="175.50"></text></g><g><title>burst`DYLD-STUB$$malloc (7 samples, 0.01%)</title><rect x="26.9050%" y="197" width="0.0110%" height="15" fill="rgb(215,21,27)" fg:x="17061" fg:w="7"/><text x="27.1550%" y="207.50"></text></g><g><title>burst`__rdl_alloc (20 samples, 0.03%)</title><rect x="26.9160%" y="197" width="0.0315%" height="15" fill="rgb(232,23,21)" fg:x="17068" fg:w="20"/><text x="27.1660%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (34 samples, 0.05%)</title><rect x="28.0625%" y="85" width="0.0536%" height="15" fill="rgb(244,5,23)" fg:x="17795" fg:w="34"/><text x="28.3125%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (168 samples, 0.26%)</title><rect x="27.9316%" y="101" width="0.2649%" height="15" fill="rgb(226,81,46)" fg:x="17712" fg:w="168"/><text x="28.1816%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (51 samples, 0.08%)</title><rect x="28.1161%" y="85" width="0.0804%" height="15" fill="rgb(247,70,30)" fg:x="17829" fg:w="51"/><text x="28.3661%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (223 samples, 0.35%)</title><rect x="27.8607%" y="133" width="0.3517%" height="15" fill="rgb(212,68,19)" fg:x="17667" fg:w="223"/><text x="28.1107%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (189 samples, 0.30%)</title><rect x="27.9143%" y="117" width="0.2981%" height="15" fill="rgb(240,187,13)" fg:x="17701" fg:w="189"/><text x="28.1643%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.02%)</title><rect x="28.1966%" y="101" width="0.0158%" height="15" fill="rgb(223,113,26)" fg:x="17880" fg:w="10"/><text x="28.4466%" y="111.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (263 samples, 0.41%)</title><rect x="27.8133%" y="149" width="0.4147%" height="15" fill="rgb(206,192,2)" fg:x="17637" fg:w="263"/><text x="28.0633%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="28.2801%" y="133" width="0.0110%" height="15" fill="rgb(241,108,4)" fg:x="17933" fg:w="7"/><text x="28.5301%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (17 samples, 0.03%)</title><rect x="28.4410%" y="101" width="0.0268%" height="15" fill="rgb(247,173,49)" fg:x="18035" fg:w="17"/><text x="28.6910%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (143 samples, 0.23%)</title><rect x="28.3148%" y="117" width="0.2255%" height="15" fill="rgb(224,114,35)" fg:x="17955" fg:w="143"/><text x="28.5648%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (46 samples, 0.07%)</title><rect x="28.4678%" y="101" width="0.0725%" height="15" fill="rgb(245,159,27)" fg:x="18052" fg:w="46"/><text x="28.7178%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (206 samples, 0.32%)</title><rect x="28.2360%" y="149" width="0.3249%" height="15" fill="rgb(245,172,44)" fg:x="17905" fg:w="206"/><text x="28.4860%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (171 samples, 0.27%)</title><rect x="28.2912%" y="133" width="0.2697%" height="15" fill="rgb(236,23,11)" fg:x="17940" fg:w="171"/><text x="28.5412%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (13 samples, 0.02%)</title><rect x="28.5403%" y="117" width="0.0205%" height="15" fill="rgb(205,117,38)" fg:x="18098" fg:w="13"/><text x="28.7903%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (11 samples, 0.02%)</title><rect x="28.5608%" y="149" width="0.0173%" height="15" fill="rgb(237,72,25)" fg:x="18111" fg:w="11"/><text x="28.8108%" y="159.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (563 samples, 0.89%)</title><rect x="27.7030%" y="165" width="0.8878%" height="15" fill="rgb(244,70,9)" fg:x="17567" fg:w="563"/><text x="27.9530%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="28.5798%" y="149" width="0.0110%" height="15" fill="rgb(217,125,39)" fg:x="18123" fg:w="7"/><text x="28.8298%" y="159.50"></text></g><g><title>burst`DYLD-STUB$$malloc (10 samples, 0.02%)</title><rect x="28.5908%" y="165" width="0.0158%" height="15" fill="rgb(235,36,10)" fg:x="18130" fg:w="10"/><text x="28.8408%" y="175.50"></text></g><g><title>burst`__rdl_alloc (13 samples, 0.02%)</title><rect x="28.6066%" y="165" width="0.0205%" height="15" fill="rgb(251,123,47)" fg:x="18140" fg:w="13"/><text x="28.8566%" y="175.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (10 samples, 0.02%)</title><rect x="29.0891%" y="117" width="0.0158%" height="15" fill="rgb(221,13,13)" fg:x="18446" fg:w="10"/><text x="29.3391%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="29.1396%" y="101" width="0.0142%" height="15" fill="rgb(238,131,9)" fg:x="18478" fg:w="9"/><text x="29.3896%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.02%)</title><rect x="29.2926%" y="69" width="0.0189%" height="15" fill="rgb(211,50,8)" fg:x="18575" fg:w="12"/><text x="29.5426%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (142 samples, 0.22%)</title><rect x="29.1759%" y="85" width="0.2239%" height="15" fill="rgb(245,182,24)" fg:x="18501" fg:w="142"/><text x="29.4259%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (56 samples, 0.09%)</title><rect x="29.3115%" y="69" width="0.0883%" height="15" fill="rgb(242,14,37)" fg:x="18587" fg:w="56"/><text x="29.5615%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (195 samples, 0.31%)</title><rect x="29.1049%" y="117" width="0.3075%" height="15" fill="rgb(246,228,12)" fg:x="18456" fg:w="195"/><text x="29.3549%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (164 samples, 0.26%)</title><rect x="29.1538%" y="101" width="0.2586%" height="15" fill="rgb(213,55,15)" fg:x="18487" fg:w="164"/><text x="29.4038%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="29.3998%" y="85" width="0.0126%" height="15" fill="rgb(209,9,3)" fg:x="18643" fg:w="8"/><text x="29.6498%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (12 samples, 0.02%)</title><rect x="29.4124%" y="117" width="0.0189%" height="15" fill="rgb(230,59,30)" fg:x="18651" fg:w="12"/><text x="29.6624%" y="127.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (286 samples, 0.45%)</title><rect x="28.9819%" y="133" width="0.4510%" height="15" fill="rgb(209,121,21)" fg:x="18378" fg:w="286"/><text x="29.2319%" y="143.50"></text></g><g><title>burst`__rdl_alloc (7 samples, 0.01%)</title><rect x="29.4408%" y="133" width="0.0110%" height="15" fill="rgb(220,109,13)" fg:x="18669" fg:w="7"/><text x="29.6908%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="29.7105%" y="69" width="0.0142%" height="15" fill="rgb(232,18,1)" fg:x="18840" fg:w="9"/><text x="29.9605%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.01%)</title><rect x="29.8161%" y="37" width="0.0142%" height="15" fill="rgb(215,41,42)" fg:x="18907" fg:w="9"/><text x="30.0661%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (101 samples, 0.16%)</title><rect x="29.7325%" y="53" width="0.1593%" height="15" fill="rgb(224,123,36)" fg:x="18854" fg:w="101"/><text x="29.9825%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (39 samples, 0.06%)</title><rect x="29.8303%" y="37" width="0.0615%" height="15" fill="rgb(240,125,3)" fg:x="18916" fg:w="39"/><text x="30.0803%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (136 samples, 0.21%)</title><rect x="29.6852%" y="85" width="0.2145%" height="15" fill="rgb(205,98,50)" fg:x="18824" fg:w="136"/><text x="29.9352%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (111 samples, 0.18%)</title><rect x="29.7247%" y="69" width="0.1750%" height="15" fill="rgb(205,185,37)" fg:x="18849" fg:w="111"/><text x="29.9747%" y="79.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (172 samples, 0.27%)</title><rect x="29.6442%" y="101" width="0.2712%" height="15" fill="rgb(238,207,15)" fg:x="18798" fg:w="172"/><text x="29.8942%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.02%)</title><rect x="29.9675%" y="53" width="0.0158%" height="15" fill="rgb(213,199,42)" fg:x="19003" fg:w="10"/><text x="30.2175%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="29.9659%" y="85" width="0.0189%" height="15" fill="rgb(235,201,11)" fg:x="19002" fg:w="12"/><text x="30.2159%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.02%)</title><rect x="29.9675%" y="69" width="0.0173%" height="15" fill="rgb(207,46,11)" fg:x="19003" fg:w="11"/><text x="30.2175%" y="79.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (40 samples, 0.06%)</title><rect x="29.9234%" y="101" width="0.0631%" height="15" fill="rgb(241,35,35)" fg:x="18975" fg:w="40"/><text x="30.1734%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.02%)</title><rect x="30.0164%" y="85" width="0.0189%" height="15" fill="rgb(243,32,47)" fg:x="19034" fg:w="12"/><text x="30.2664%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (17 samples, 0.03%)</title><rect x="30.1568%" y="53" width="0.0268%" height="15" fill="rgb(247,202,23)" fg:x="19123" fg:w="17"/><text x="30.4068%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (131 samples, 0.21%)</title><rect x="30.0464%" y="69" width="0.2066%" height="15" fill="rgb(219,102,11)" fg:x="19053" fg:w="131"/><text x="30.2964%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (44 samples, 0.07%)</title><rect x="30.1836%" y="53" width="0.0694%" height="15" fill="rgb(243,110,44)" fg:x="19140" fg:w="44"/><text x="30.4336%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (173 samples, 0.27%)</title><rect x="29.9864%" y="101" width="0.2728%" height="15" fill="rgb(222,74,54)" fg:x="19015" fg:w="173"/><text x="30.2364%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (142 samples, 0.22%)</title><rect x="30.0353%" y="85" width="0.2239%" height="15" fill="rgb(216,99,12)" fg:x="19046" fg:w="142"/><text x="30.2853%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (12 samples, 0.02%)</title><rect x="30.2593%" y="101" width="0.0189%" height="15" fill="rgb(226,22,26)" fg:x="19188" fg:w="12"/><text x="30.5093%" y="111.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (448 samples, 0.71%)</title><rect x="29.5780%" y="117" width="0.7065%" height="15" fill="rgb(217,163,10)" fg:x="18756" fg:w="448"/><text x="29.8280%" y="127.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (14 samples, 0.02%)</title><rect x="30.2908%" y="117" width="0.0221%" height="15" fill="rgb(213,25,53)" fg:x="19208" fg:w="14"/><text x="30.5408%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (14 samples, 0.02%)</title><rect x="30.3728%" y="101" width="0.0221%" height="15" fill="rgb(252,105,26)" fg:x="19260" fg:w="14"/><text x="30.6228%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (24 samples, 0.04%)</title><rect x="30.6393%" y="69" width="0.0378%" height="15" fill="rgb(220,39,43)" fg:x="19429" fg:w="24"/><text x="30.8893%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (559 samples, 0.88%)</title><rect x="30.4280%" y="85" width="0.8815%" height="15" fill="rgb(229,68,48)" fg:x="19295" fg:w="559"/><text x="30.6780%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (401 samples, 0.63%)</title><rect x="30.6772%" y="69" width="0.6324%" height="15" fill="rgb(252,8,32)" fg:x="19453" fg:w="401"/><text x="30.9272%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (645 samples, 1.02%)</title><rect x="30.3129%" y="117" width="1.0172%" height="15" fill="rgb(223,20,43)" fg:x="19222" fg:w="645"/><text x="30.5629%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (593 samples, 0.94%)</title><rect x="30.3949%" y="101" width="0.9352%" height="15" fill="rgb(229,81,49)" fg:x="19274" fg:w="593"/><text x="30.6449%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (13 samples, 0.02%)</title><rect x="31.3095%" y="85" width="0.0205%" height="15" fill="rgb(236,28,36)" fg:x="19854" fg:w="13"/><text x="31.5595%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (16 samples, 0.03%)</title><rect x="31.3300%" y="117" width="0.0252%" height="15" fill="rgb(249,185,26)" fg:x="19867" fg:w="16"/><text x="31.5800%" y="127.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (1,216 samples, 1.92%)</title><rect x="29.4518%" y="133" width="1.9176%" height="15" fill="rgb(249,174,33)" fg:x="18676" fg:w="1216"/><text x="29.7018%" y="143.50">b..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.01%)</title><rect x="31.3553%" y="117" width="0.0142%" height="15" fill="rgb(233,201,37)" fg:x="19883" fg:w="9"/><text x="31.6053%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (14 samples, 0.02%)</title><rect x="31.4436%" y="117" width="0.0221%" height="15" fill="rgb(221,78,26)" fg:x="19939" fg:w="14"/><text x="31.6936%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (18 samples, 0.03%)</title><rect x="31.6675%" y="85" width="0.0284%" height="15" fill="rgb(250,127,30)" fg:x="20081" fg:w="18"/><text x="31.9175%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (200 samples, 0.32%)</title><rect x="31.4877%" y="101" width="0.3154%" height="15" fill="rgb(230,49,44)" fg:x="19967" fg:w="200"/><text x="31.7377%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (68 samples, 0.11%)</title><rect x="31.6959%" y="85" width="0.1072%" height="15" fill="rgb(229,67,23)" fg:x="20099" fg:w="68"/><text x="31.9459%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (293 samples, 0.46%)</title><rect x="31.3695%" y="133" width="0.4621%" height="15" fill="rgb(249,83,47)" fg:x="19892" fg:w="293"/><text x="31.6195%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (232 samples, 0.37%)</title><rect x="31.4657%" y="117" width="0.3659%" height="15" fill="rgb(215,43,3)" fg:x="19953" fg:w="232"/><text x="31.7157%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (18 samples, 0.03%)</title><rect x="31.8031%" y="101" width="0.0284%" height="15" fill="rgb(238,154,13)" fg:x="20167" fg:w="18"/><text x="32.0531%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (13 samples, 0.02%)</title><rect x="31.8315%" y="133" width="0.0205%" height="15" fill="rgb(219,56,2)" fg:x="20185" fg:w="13"/><text x="32.0815%" y="143.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (1,921 samples, 3.03%)</title><rect x="28.8337%" y="149" width="3.0294%" height="15" fill="rgb(233,0,4)" fg:x="18284" fg:w="1921"/><text x="29.0837%" y="159.50">bur..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="31.8520%" y="133" width="0.0110%" height="15" fill="rgb(235,30,7)" fg:x="20198" fg:w="7"/><text x="32.1020%" y="143.50"></text></g><g><title>burst`__rdl_alloc (8 samples, 0.01%)</title><rect x="31.8694%" y="149" width="0.0126%" height="15" fill="rgb(250,79,13)" fg:x="20209" fg:w="8"/><text x="32.1194%" y="159.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (39 samples, 0.06%)</title><rect x="31.8820%" y="149" width="0.0615%" height="15" fill="rgb(211,146,34)" fg:x="20217" fg:w="39"/><text x="32.1320%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (18 samples, 0.03%)</title><rect x="32.0870%" y="133" width="0.0284%" height="15" fill="rgb(228,22,38)" fg:x="20347" fg:w="18"/><text x="32.3370%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (41 samples, 0.06%)</title><rect x="32.6720%" y="101" width="0.0647%" height="15" fill="rgb(235,168,5)" fg:x="20718" fg:w="41"/><text x="32.9220%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1,192 samples, 1.88%)</title><rect x="32.1690%" y="117" width="1.8798%" height="15" fill="rgb(221,155,16)" fg:x="20399" fg:w="1192"/><text x="32.4190%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (832 samples, 1.31%)</title><rect x="32.7367%" y="101" width="1.3121%" height="15" fill="rgb(215,215,53)" fg:x="20759" fg:w="832"/><text x="32.9867%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,359 samples, 2.14%)</title><rect x="31.9435%" y="149" width="2.1431%" height="15" fill="rgb(223,4,10)" fg:x="20256" fg:w="1359"/><text x="32.1935%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,250 samples, 1.97%)</title><rect x="32.1154%" y="133" width="1.9712%" height="15" fill="rgb(234,103,6)" fg:x="20365" fg:w="1250"/><text x="32.3654%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (24 samples, 0.04%)</title><rect x="34.0488%" y="117" width="0.0378%" height="15" fill="rgb(227,97,0)" fg:x="21591" fg:w="24"/><text x="34.2988%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (31 samples, 0.05%)</title><rect x="34.0866%" y="149" width="0.0489%" height="15" fill="rgb(234,150,53)" fg:x="21615" fg:w="31"/><text x="34.3366%" y="159.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (3,504 samples, 5.53%)</title><rect x="28.6271%" y="165" width="5.5258%" height="15" fill="rgb(228,201,54)" fg:x="18153" fg:w="3504"/><text x="28.8771%" y="175.50">burst`a..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.02%)</title><rect x="34.1355%" y="149" width="0.0173%" height="15" fill="rgb(222,22,37)" fg:x="21646" fg:w="11"/><text x="34.3855%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (32 samples, 0.05%)</title><rect x="34.2301%" y="149" width="0.0505%" height="15" fill="rgb(237,53,32)" fg:x="21706" fg:w="32"/><text x="34.4801%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (41 samples, 0.06%)</title><rect x="34.6338%" y="117" width="0.0647%" height="15" fill="rgb(233,25,53)" fg:x="21962" fg:w="41"/><text x="34.8838%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (328 samples, 0.52%)</title><rect x="34.3515%" y="133" width="0.5173%" height="15" fill="rgb(210,40,34)" fg:x="21783" fg:w="328"/><text x="34.6015%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (108 samples, 0.17%)</title><rect x="34.6985%" y="117" width="0.1703%" height="15" fill="rgb(241,220,44)" fg:x="22003" fg:w="108"/><text x="34.9485%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (470 samples, 0.74%)</title><rect x="34.1528%" y="165" width="0.7412%" height="15" fill="rgb(235,28,35)" fg:x="21657" fg:w="470"/><text x="34.4028%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (389 samples, 0.61%)</title><rect x="34.2806%" y="149" width="0.6134%" height="15" fill="rgb(210,56,17)" fg:x="21738" fg:w="389"/><text x="34.5306%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (16 samples, 0.03%)</title><rect x="34.8688%" y="133" width="0.0252%" height="15" fill="rgb(224,130,29)" fg:x="22111" fg:w="16"/><text x="35.1188%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (19 samples, 0.03%)</title><rect x="34.8940%" y="165" width="0.0300%" height="15" fill="rgb(235,212,8)" fg:x="22127" fg:w="19"/><text x="35.1440%" y="175.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (4,918 samples, 7.76%)</title><rect x="27.2015%" y="181" width="7.7556%" height="15" fill="rgb(223,33,50)" fg:x="17249" fg:w="4918"/><text x="27.4515%" y="191.50">burst`&lt;burs..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (21 samples, 0.03%)</title><rect x="34.9240%" y="165" width="0.0331%" height="15" fill="rgb(219,149,13)" fg:x="22146" fg:w="21"/><text x="35.1740%" y="175.50"></text></g><g><title>burst`__rdl_alloc (13 samples, 0.02%)</title><rect x="34.9666%" y="181" width="0.0205%" height="15" fill="rgb(250,156,29)" fg:x="22173" fg:w="13"/><text x="35.2166%" y="191.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (60 samples, 0.09%)</title><rect x="34.9871%" y="181" width="0.0946%" height="15" fill="rgb(216,193,19)" fg:x="22186" fg:w="60"/><text x="35.2371%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (30 samples, 0.05%)</title><rect x="35.2268%" y="165" width="0.0473%" height="15" fill="rgb(216,135,14)" fg:x="22338" fg:w="30"/><text x="35.4768%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (45 samples, 0.07%)</title><rect x="35.8497%" y="133" width="0.0710%" height="15" fill="rgb(241,47,5)" fg:x="22733" fg:w="45"/><text x="36.0997%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1,329 samples, 2.10%)</title><rect x="35.3419%" y="149" width="2.0958%" height="15" fill="rgb(233,42,35)" fg:x="22411" fg:w="1329"/><text x="35.5919%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (962 samples, 1.52%)</title><rect x="35.9206%" y="133" width="1.5171%" height="15" fill="rgb(231,13,6)" fg:x="22778" fg:w="962"/><text x="36.1706%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,527 samples, 2.41%)</title><rect x="35.0817%" y="181" width="2.4081%" height="15" fill="rgb(207,181,40)" fg:x="22246" fg:w="1527"/><text x="35.3317%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,405 samples, 2.22%)</title><rect x="35.2741%" y="165" width="2.2157%" height="15" fill="rgb(254,173,49)" fg:x="22368" fg:w="1405"/><text x="35.5241%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (33 samples, 0.05%)</title><rect x="37.4377%" y="149" width="0.0520%" height="15" fill="rgb(221,1,38)" fg:x="23740" fg:w="33"/><text x="37.6877%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (29 samples, 0.05%)</title><rect x="37.4897%" y="181" width="0.0457%" height="15" fill="rgb(206,124,46)" fg:x="23773" fg:w="29"/><text x="37.7397%" y="191.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (6,722 samples, 10.60%)</title><rect x="26.9476%" y="197" width="10.6005%" height="15" fill="rgb(249,21,11)" fg:x="17088" fg:w="6722"/><text x="27.1976%" y="207.50">burst`alloc::sl..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="37.5355%" y="181" width="0.0126%" height="15" fill="rgb(222,201,40)" fg:x="23802" fg:w="8"/><text x="37.7855%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.01%)</title><rect x="37.6017%" y="181" width="0.0126%" height="15" fill="rgb(235,61,29)" fg:x="23844" fg:w="8"/><text x="37.8517%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.01%)</title><rect x="37.7105%" y="149" width="0.0110%" height="15" fill="rgb(219,207,3)" fg:x="23913" fg:w="7"/><text x="37.9605%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (101 samples, 0.16%)</title><rect x="37.6206%" y="165" width="0.1593%" height="15" fill="rgb(222,56,46)" fg:x="23856" fg:w="101"/><text x="37.8706%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (37 samples, 0.06%)</title><rect x="37.7216%" y="149" width="0.0583%" height="15" fill="rgb(239,76,54)" fg:x="23920" fg:w="37"/><text x="37.9716%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (153 samples, 0.24%)</title><rect x="37.5481%" y="197" width="0.2413%" height="15" fill="rgb(231,124,27)" fg:x="23810" fg:w="153"/><text x="37.7981%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (111 samples, 0.18%)</title><rect x="37.6143%" y="181" width="0.1750%" height="15" fill="rgb(249,195,6)" fg:x="23852" fg:w="111"/><text x="37.8643%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.01%)</title><rect x="37.7894%" y="197" width="0.0110%" height="15" fill="rgb(237,174,47)" fg:x="23963" fg:w="7"/><text x="38.0394%" y="207.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (7,140 samples, 11.26%)</title><rect x="26.5454%" y="213" width="11.2597%" height="15" fill="rgb(206,201,31)" fg:x="16833" fg:w="7140"/><text x="26.7954%" y="223.50">burst`&lt;burst::dsl..</text></g><g><title>burst`alloc::slice::hack::to_vec (41 samples, 0.06%)</title><rect x="37.8146%" y="213" width="0.0647%" height="15" fill="rgb(231,57,52)" fg:x="23979" fg:w="41"/><text x="38.0646%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (27 samples, 0.04%)</title><rect x="38.0259%" y="197" width="0.0426%" height="15" fill="rgb(248,177,22)" fg:x="24113" fg:w="27"/><text x="38.2759%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (42 samples, 0.07%)</title><rect x="38.6220%" y="165" width="0.0662%" height="15" fill="rgb(215,211,37)" fg:x="24491" fg:w="42"/><text x="38.8720%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (786 samples, 1.24%)</title><rect x="38.1347%" y="181" width="1.2395%" height="15" fill="rgb(241,128,51)" fg:x="24182" fg:w="786"/><text x="38.3847%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (435 samples, 0.69%)</title><rect x="38.6883%" y="165" width="0.6860%" height="15" fill="rgb(227,165,31)" fg:x="24533" fg:w="435"/><text x="38.9383%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (981 samples, 1.55%)</title><rect x="37.8793%" y="213" width="1.5470%" height="15" fill="rgb(228,167,24)" fg:x="24020" fg:w="981"/><text x="38.1293%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (861 samples, 1.36%)</title><rect x="38.0685%" y="197" width="1.3578%" height="15" fill="rgb(228,143,12)" fg:x="24140" fg:w="861"/><text x="38.3185%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (33 samples, 0.05%)</title><rect x="39.3743%" y="181" width="0.0520%" height="15" fill="rgb(249,149,8)" fg:x="24968" fg:w="33"/><text x="39.6243%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (37 samples, 0.06%)</title><rect x="39.4263%" y="213" width="0.0583%" height="15" fill="rgb(243,35,44)" fg:x="25001" fg:w="37"/><text x="39.6763%" y="223.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (8,371 samples, 13.20%)</title><rect x="26.3436%" y="229" width="13.2010%" height="15" fill="rgb(246,89,9)" fg:x="16705" fg:w="8371"/><text x="26.5936%" y="239.50">burst`alloc::slice::..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (38 samples, 0.06%)</title><rect x="39.4846%" y="213" width="0.0599%" height="15" fill="rgb(233,213,13)" fg:x="25038" fg:w="38"/><text x="39.7346%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (355 samples, 0.56%)</title><rect x="39.7606%" y="213" width="0.5598%" height="15" fill="rgb(233,141,41)" fg:x="25213" fg:w="355"/><text x="40.0106%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (53 samples, 0.08%)</title><rect x="40.9922%" y="181" width="0.0836%" height="15" fill="rgb(239,167,4)" fg:x="25994" fg:w="53"/><text x="41.2422%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (616 samples, 0.97%)</title><rect x="40.3946%" y="197" width="0.9714%" height="15" fill="rgb(209,217,16)" fg:x="25615" fg:w="616"/><text x="40.6446%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (184 samples, 0.29%)</title><rect x="41.0758%" y="181" width="0.2902%" height="15" fill="rgb(219,88,35)" fg:x="26047" fg:w="184"/><text x="41.3258%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,189 samples, 1.88%)</title><rect x="39.5446%" y="229" width="1.8750%" height="15" fill="rgb(220,193,23)" fg:x="25076" fg:w="1189"/><text x="39.7946%" y="239.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (697 samples, 1.10%)</title><rect x="40.3204%" y="213" width="1.0992%" height="15" fill="rgb(230,90,52)" fg:x="25568" fg:w="697"/><text x="40.5704%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (34 samples, 0.05%)</title><rect x="41.3660%" y="197" width="0.0536%" height="15" fill="rgb(252,106,19)" fg:x="26231" fg:w="34"/><text x="41.6160%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (34 samples, 0.05%)</title><rect x="41.4196%" y="229" width="0.0536%" height="15" fill="rgb(206,74,20)" fg:x="26265" fg:w="34"/><text x="41.6696%" y="239.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (10,105 samples, 15.94%)</title><rect x="25.5740%" y="245" width="15.9355%" height="15" fill="rgb(230,138,44)" fg:x="16217" fg:w="10105"/><text x="25.8240%" y="255.50">burst`&lt;burst::dsl::Dsl as..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (23 samples, 0.04%)</title><rect x="41.4732%" y="229" width="0.0363%" height="15" fill="rgb(235,182,43)" fg:x="26299" fg:w="23"/><text x="41.7232%" y="239.50"></text></g><g><title>burst`DYLD-STUB$$malloc (14 samples, 0.02%)</title><rect x="41.5095%" y="245" width="0.0221%" height="15" fill="rgb(242,16,51)" fg:x="26322" fg:w="14"/><text x="41.7595%" y="255.50"></text></g><g><title>burst`__rdl_alloc (20 samples, 0.03%)</title><rect x="41.5316%" y="245" width="0.0315%" height="15" fill="rgb(248,9,4)" fg:x="26336" fg:w="20"/><text x="41.7816%" y="255.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (62 samples, 0.10%)</title><rect x="41.5631%" y="245" width="0.0978%" height="15" fill="rgb(210,31,22)" fg:x="26356" fg:w="62"/><text x="41.8131%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (64 samples, 0.10%)</title><rect x="41.7665%" y="229" width="0.1009%" height="15" fill="rgb(239,54,39)" fg:x="26485" fg:w="64"/><text x="42.0165%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (41 samples, 0.06%)</title><rect x="42.3926%" y="197" width="0.0647%" height="15" fill="rgb(230,99,41)" fg:x="26882" fg:w="41"/><text x="42.6426%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (430 samples, 0.68%)</title><rect x="41.9195%" y="213" width="0.6781%" height="15" fill="rgb(253,106,12)" fg:x="26582" fg:w="430"/><text x="42.1695%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (89 samples, 0.14%)</title><rect x="42.4573%" y="197" width="0.1404%" height="15" fill="rgb(213,46,41)" fg:x="26923" fg:w="89"/><text x="42.7073%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (623 samples, 0.98%)</title><rect x="41.6609%" y="245" width="0.9825%" height="15" fill="rgb(215,133,35)" fg:x="26418" fg:w="623"/><text x="41.9109%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (492 samples, 0.78%)</title><rect x="41.8675%" y="229" width="0.7759%" height="15" fill="rgb(213,28,5)" fg:x="26549" fg:w="492"/><text x="42.1175%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (29 samples, 0.05%)</title><rect x="42.5976%" y="213" width="0.0457%" height="15" fill="rgb(215,77,49)" fg:x="27012" fg:w="29"/><text x="42.8476%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (24 samples, 0.04%)</title><rect x="42.6433%" y="245" width="0.0378%" height="15" fill="rgb(248,100,22)" fg:x="27041" fg:w="24"/><text x="42.8933%" y="255.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10,956 samples, 17.28%)</title><rect x="25.4179%" y="261" width="17.2775%" height="15" fill="rgb(208,67,9)" fg:x="16118" fg:w="10956"/><text x="25.6679%" y="271.50">burst`&lt;alloc::vec::Vec&lt;T&gt; a..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.01%)</title><rect x="42.6812%" y="245" width="0.0142%" height="15" fill="rgb(219,133,21)" fg:x="27065" fg:w="9"/><text x="42.9312%" y="255.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (41 samples, 0.06%)</title><rect x="42.6954%" y="261" width="0.0647%" height="15" fill="rgb(246,46,29)" fg:x="27074" fg:w="41"/><text x="42.9454%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (17 samples, 0.03%)</title><rect x="42.8342%" y="181" width="0.0268%" height="15" fill="rgb(246,185,52)" fg:x="27162" fg:w="17"/><text x="43.0842%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (27 samples, 0.04%)</title><rect x="42.8215%" y="213" width="0.0426%" height="15" fill="rgb(252,136,11)" fg:x="27154" fg:w="27"/><text x="43.0715%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (21 samples, 0.03%)</title><rect x="42.8310%" y="197" width="0.0331%" height="15" fill="rgb(219,138,53)" fg:x="27160" fg:w="21"/><text x="43.0810%" y="207.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (30 samples, 0.05%)</title><rect x="42.8200%" y="229" width="0.0473%" height="15" fill="rgb(211,51,23)" fg:x="27153" fg:w="30"/><text x="43.0700%" y="239.50"></text></g><g><title>burst`alloc::vec::Vec&lt;T,A&gt;::retain (59 samples, 0.09%)</title><rect x="42.7758%" y="261" width="0.0930%" height="15" fill="rgb(247,221,28)" fg:x="27125" fg:w="59"/><text x="43.0258%" y="271.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (39 samples, 0.06%)</title><rect x="42.8074%" y="245" width="0.0615%" height="15" fill="rgb(251,222,45)" fg:x="27145" fg:w="39"/><text x="43.0574%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (41 samples, 0.06%)</title><rect x="43.0471%" y="245" width="0.0647%" height="15" fill="rgb(217,162,53)" fg:x="27297" fg:w="41"/><text x="43.2971%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (55 samples, 0.09%)</title><rect x="43.6495%" y="213" width="0.0867%" height="15" fill="rgb(229,93,14)" fg:x="27679" fg:w="55"/><text x="43.8995%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (528 samples, 0.83%)</title><rect x="43.1937%" y="229" width="0.8326%" height="15" fill="rgb(209,67,49)" fg:x="27390" fg:w="528"/><text x="43.4437%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (184 samples, 0.29%)</title><rect x="43.7362%" y="213" width="0.2902%" height="15" fill="rgb(213,87,29)" fg:x="27734" fg:w="184"/><text x="43.9862%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (772 samples, 1.22%)</title><rect x="42.8689%" y="261" width="1.2174%" height="15" fill="rgb(205,151,52)" fg:x="27184" fg:w="772"/><text x="43.1189%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (618 samples, 0.97%)</title><rect x="43.1117%" y="245" width="0.9746%" height="15" fill="rgb(253,215,39)" fg:x="27338" fg:w="618"/><text x="43.3617%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (38 samples, 0.06%)</title><rect x="44.0264%" y="229" width="0.0599%" height="15" fill="rgb(221,220,41)" fg:x="27918" fg:w="38"/><text x="44.2764%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (29 samples, 0.05%)</title><rect x="44.0863%" y="261" width="0.0457%" height="15" fill="rgb(218,133,21)" fg:x="27956" fg:w="29"/><text x="44.3363%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (48 samples, 0.08%)</title><rect x="44.1320%" y="261" width="0.0757%" height="15" fill="rgb(221,193,43)" fg:x="27985" fg:w="48"/><text x="44.3820%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (20 samples, 0.03%)</title><rect x="44.1762%" y="245" width="0.0315%" height="15" fill="rgb(240,128,52)" fg:x="28013" fg:w="20"/><text x="44.4262%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (18 samples, 0.03%)</title><rect x="44.2093%" y="261" width="0.0284%" height="15" fill="rgb(253,114,12)" fg:x="28034" fg:w="18"/><text x="44.4593%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="44.2377%" y="261" width="0.0126%" height="15" fill="rgb(215,223,47)" fg:x="28052" fg:w="8"/><text x="44.4877%" y="271.50"></text></g><g><title>burst`burst::acceptingrun::SolutionStatus::absolute_carry (12,284 samples, 19.37%)</title><rect x="24.8849%" y="277" width="19.3717%" height="15" fill="rgb(248,225,23)" fg:x="15780" fg:w="12284"/><text x="25.1349%" y="287.50">burst`burst::acceptingrun::Sol..</text></g><g><title>burst`DYLD-STUB$$free (20 samples, 0.03%)</title><rect x="44.2708%" y="261" width="0.0315%" height="15" fill="rgb(250,108,0)" fg:x="28073" fg:w="20"/><text x="44.5208%" y="271.50"></text></g><g><title>burst`DYLD-STUB$$free (9 samples, 0.01%)</title><rect x="45.9629%" y="245" width="0.0142%" height="15" fill="rgb(228,208,7)" fg:x="29146" fg:w="9"/><text x="46.2129%" y="255.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (10 samples, 0.02%)</title><rect x="47.0274%" y="181" width="0.0158%" height="15" fill="rgb(244,45,10)" fg:x="29821" fg:w="10"/><text x="47.2774%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (18 samples, 0.03%)</title><rect x="47.0431%" y="181" width="0.0284%" height="15" fill="rgb(207,125,25)" fg:x="29831" fg:w="18"/><text x="47.2931%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (14 samples, 0.02%)</title><rect x="47.0495%" y="165" width="0.0221%" height="15" fill="rgb(210,195,18)" fg:x="29835" fg:w="14"/><text x="47.2995%" y="175.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (54 samples, 0.09%)</title><rect x="46.9927%" y="197" width="0.0852%" height="15" fill="rgb(249,80,12)" fg:x="29799" fg:w="54"/><text x="47.2427%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (35 samples, 0.06%)</title><rect x="47.0794%" y="197" width="0.0552%" height="15" fill="rgb(221,65,9)" fg:x="29854" fg:w="35"/><text x="47.3294%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (19 samples, 0.03%)</title><rect x="47.1046%" y="181" width="0.0300%" height="15" fill="rgb(235,49,36)" fg:x="29870" fg:w="19"/><text x="47.3546%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (21 samples, 0.03%)</title><rect x="47.1378%" y="197" width="0.0331%" height="15" fill="rgb(225,32,20)" fg:x="29891" fg:w="21"/><text x="47.3878%" y="207.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (173 samples, 0.27%)</title><rect x="46.9028%" y="213" width="0.2728%" height="15" fill="rgb(215,141,46)" fg:x="29742" fg:w="173"/><text x="47.1528%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (48 samples, 0.08%)</title><rect x="47.2450%" y="197" width="0.0757%" height="15" fill="rgb(250,160,47)" fg:x="29959" fg:w="48"/><text x="47.4950%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (92 samples, 0.15%)</title><rect x="47.1772%" y="213" width="0.1451%" height="15" fill="rgb(216,222,40)" fg:x="29916" fg:w="92"/><text x="47.4272%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.01%)</title><rect x="47.3223%" y="213" width="0.0142%" height="15" fill="rgb(234,217,39)" fg:x="30008" fg:w="9"/><text x="47.5723%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (124 samples, 0.20%)</title><rect x="47.3365%" y="213" width="0.1955%" height="15" fill="rgb(207,178,40)" fg:x="30017" fg:w="124"/><text x="47.5865%" y="223.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (893 samples, 1.41%)</title><rect x="46.1285%" y="229" width="1.4083%" height="15" fill="rgb(221,136,13)" fg:x="29251" fg:w="893"/><text x="46.3785%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (27 samples, 0.04%)</title><rect x="47.6298%" y="213" width="0.0426%" height="15" fill="rgb(249,199,10)" fg:x="30203" fg:w="27"/><text x="47.8798%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (82 samples, 0.13%)</title><rect x="47.5446%" y="229" width="0.1293%" height="15" fill="rgb(249,222,13)" fg:x="30149" fg:w="82"/><text x="47.7946%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (15 samples, 0.02%)</title><rect x="47.6739%" y="229" width="0.0237%" height="15" fill="rgb(244,185,38)" fg:x="30231" fg:w="15"/><text x="47.9239%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (67 samples, 0.11%)</title><rect x="47.6976%" y="229" width="0.1057%" height="15" fill="rgb(236,202,9)" fg:x="30246" fg:w="67"/><text x="47.9476%" y="239.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (1,162 samples, 1.83%)</title><rect x="45.9787%" y="245" width="1.8325%" height="15" fill="rgb(250,229,37)" fg:x="29156" fg:w="1162"/><text x="46.2287%" y="255.50">b..</text></g><g><title>libsystem_malloc.dylib`free (101 samples, 0.16%)</title><rect x="47.8190%" y="245" width="0.1593%" height="15" fill="rgb(206,174,23)" fg:x="30323" fg:w="101"/><text x="48.0690%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (50 samples, 0.08%)</title><rect x="47.8995%" y="229" width="0.0788%" height="15" fill="rgb(211,33,43)" fg:x="30374" fg:w="50"/><text x="48.1495%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.01%)</title><rect x="47.9783%" y="245" width="0.0110%" height="15" fill="rgb(245,58,50)" fg:x="30424" fg:w="7"/><text x="48.2283%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (214 samples, 0.34%)</title><rect x="47.9893%" y="245" width="0.3375%" height="15" fill="rgb(244,68,36)" fg:x="30431" fg:w="214"/><text x="48.2393%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (17 samples, 0.03%)</title><rect x="48.3000%" y="229" width="0.0268%" height="15" fill="rgb(232,229,15)" fg:x="30628" fg:w="17"/><text x="48.5500%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (17 samples, 0.03%)</title><rect x="48.3000%" y="213" width="0.0268%" height="15" fill="rgb(254,30,23)" fg:x="30628" fg:w="17"/><text x="48.5500%" y="223.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (2,559 samples, 4.04%)</title><rect x="44.3055%" y="261" width="4.0355%" height="15" fill="rgb(235,160,14)" fg:x="28095" fg:w="2559"/><text x="44.5555%" y="271.50">burs..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (9 samples, 0.01%)</title><rect x="48.3268%" y="245" width="0.0142%" height="15" fill="rgb(212,155,44)" fg:x="30645" fg:w="9"/><text x="48.5768%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (7 samples, 0.01%)</title><rect x="48.3410%" y="261" width="0.0110%" height="15" fill="rgb(226,2,50)" fg:x="30654" fg:w="7"/><text x="48.5910%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (81 samples, 0.13%)</title><rect x="48.3520%" y="261" width="0.1277%" height="15" fill="rgb(234,177,6)" fg:x="30661" fg:w="81"/><text x="48.6020%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (25 samples, 0.04%)</title><rect x="48.4404%" y="245" width="0.0394%" height="15" fill="rgb(217,24,9)" fg:x="30717" fg:w="25"/><text x="48.6904%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.01%)</title><rect x="48.4798%" y="261" width="0.0110%" height="15" fill="rgb(220,13,46)" fg:x="30742" fg:w="7"/><text x="48.7298%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (68 samples, 0.11%)</title><rect x="48.4908%" y="261" width="0.1072%" height="15" fill="rgb(239,221,27)" fg:x="30749" fg:w="68"/><text x="48.7408%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (17 samples, 0.03%)</title><rect x="48.5712%" y="245" width="0.0268%" height="15" fill="rgb(222,198,25)" fg:x="30800" fg:w="17"/><text x="48.8212%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (17 samples, 0.03%)</title><rect x="48.5712%" y="229" width="0.0268%" height="15" fill="rgb(211,99,13)" fg:x="30800" fg:w="17"/><text x="48.8212%" y="239.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (2,756 samples, 4.35%)</title><rect x="44.2582%" y="277" width="4.3462%" height="15" fill="rgb(232,111,31)" fg:x="28065" fg:w="2756"/><text x="44.5082%" y="287.50">burst..</text></g><g><title>burst`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (282 samples, 0.44%)</title><rect x="48.6044%" y="277" width="0.4447%" height="15" fill="rgb(245,82,37)" fg:x="30821" fg:w="282"/><text x="48.8544%" y="287.50"></text></g><g><title>burst`hashbrown::map::make_hash (1,104 samples, 1.74%)</title><rect x="49.0491%" y="277" width="1.7410%" height="15" fill="rgb(227,149,46)" fg:x="31103" fg:w="1104"/><text x="49.2991%" y="287.50"></text></g><g><title>burst`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (628 samples, 0.99%)</title><rect x="50.7901%" y="277" width="0.9903%" height="15" fill="rgb(218,36,50)" fg:x="32207" fg:w="628"/><text x="51.0401%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="51.7836%" y="277" width="0.0189%" height="15" fill="rgb(226,80,48)" fg:x="32837" fg:w="12"/><text x="52.0336%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (7 samples, 0.01%)</title><rect x="51.8025%" y="277" width="0.0110%" height="15" fill="rgb(238,224,15)" fg:x="32849" fg:w="7"/><text x="52.0525%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (75 samples, 0.12%)</title><rect x="52.0075%" y="261" width="0.1183%" height="15" fill="rgb(241,136,10)" fg:x="32979" fg:w="75"/><text x="52.2575%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (204 samples, 0.32%)</title><rect x="51.8135%" y="277" width="0.3217%" height="15" fill="rgb(208,32,45)" fg:x="32856" fg:w="204"/><text x="52.0635%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (17 samples, 0.03%)</title><rect x="52.1463%" y="261" width="0.0268%" height="15" fill="rgb(207,135,9)" fg:x="33067" fg:w="17"/><text x="52.3963%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_scan_madvise_free (42 samples, 0.07%)</title><rect x="52.1857%" y="261" width="0.0662%" height="15" fill="rgb(206,86,44)" fg:x="33092" fg:w="42"/><text x="52.4357%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (28 samples, 0.04%)</title><rect x="52.2078%" y="245" width="0.0442%" height="15" fill="rgb(245,177,15)" fg:x="33106" fg:w="28"/><text x="52.4578%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (93 samples, 0.15%)</title><rect x="52.1400%" y="277" width="0.1467%" height="15" fill="rgb(206,64,50)" fg:x="33063" fg:w="93"/><text x="52.3900%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (22 samples, 0.03%)</title><rect x="52.2519%" y="261" width="0.0347%" height="15" fill="rgb(234,36,40)" fg:x="33134" fg:w="22"/><text x="52.5019%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (22 samples, 0.03%)</title><rect x="52.2519%" y="245" width="0.0347%" height="15" fill="rgb(213,64,8)" fg:x="33134" fg:w="22"/><text x="52.5019%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (7 samples, 0.01%)</title><rect x="52.2898%" y="261" width="0.0110%" height="15" fill="rgb(210,75,36)" fg:x="33158" fg:w="7"/><text x="52.5398%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_small (14 samples, 0.02%)</title><rect x="52.2866%" y="277" width="0.0221%" height="15" fill="rgb(229,88,21)" fg:x="33156" fg:w="14"/><text x="52.5366%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (25 samples, 0.04%)</title><rect x="52.3150%" y="277" width="0.0394%" height="15" fill="rgb(252,204,47)" fg:x="33174" fg:w="25"/><text x="52.5650%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (153 samples, 0.24%)</title><rect x="52.3544%" y="277" width="0.2413%" height="15" fill="rgb(208,77,27)" fg:x="33199" fg:w="153"/><text x="52.6044%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (61 samples, 0.10%)</title><rect x="52.4995%" y="261" width="0.0962%" height="15" fill="rgb(221,76,26)" fg:x="33291" fg:w="61"/><text x="52.7495%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (61 samples, 0.10%)</title><rect x="52.4995%" y="245" width="0.0962%" height="15" fill="rgb(225,139,18)" fg:x="33291" fg:w="61"/><text x="52.7495%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (16 samples, 0.03%)</title><rect x="52.5957%" y="277" width="0.0252%" height="15" fill="rgb(230,137,11)" fg:x="33352" fg:w="16"/><text x="52.8457%" y="287.50"></text></g><g><title>burst`burst::acceptingrun::_&lt;impl burst::ntfa::NTFABuilder&gt;::get_boring_accepting_run (26,986 samples, 42.56%)</title><rect x="10.1053%" y="293" width="42.5566%" height="15" fill="rgb(212,28,1)" fg:x="6408" fg:w="26986"/><text x="10.3553%" y="303.50">burst`burst::acceptingrun::_&lt;impl burst::ntfa::NTFABuilder&gt;::get_borin..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (26 samples, 0.04%)</title><rect x="52.6210%" y="277" width="0.0410%" height="15" fill="rgb(248,164,17)" fg:x="33368" fg:w="26"/><text x="52.8710%" y="287.50"></text></g><g><title>burst`burst::intersect::_&lt;impl burst::ntfa::NTFABuilder&gt;::intersect (1,847 samples, 2.91%)</title><rect x="52.6620%" y="293" width="2.9127%" height="15" fill="rgb(222,171,42)" fg:x="33394" fg:w="1847"/><text x="52.9120%" y="303.50">bu..</text></g><g><title>burst`burst::intersect::_&lt;impl burst::ntfa::NTFABuilder&gt;::intersect::getmergedvl (26 samples, 0.04%)</title><rect x="55.5747%" y="293" width="0.0410%" height="15" fill="rgb(243,84,45)" fg:x="35241" fg:w="26"/><text x="55.8247%" y="303.50"></text></g><g><title>burst`&lt;burst::ntfa::Transition as core::cmp::PartialOrd&gt;::partial_cmp (15,821 samples, 24.95%)</title><rect x="55.6157%" y="277" width="24.9495%" height="15" fill="rgb(252,49,23)" fg:x="35267" fg:w="15821"/><text x="55.8657%" y="287.50">burst`&lt;burst::ntfa::Transition as core::..</text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (346 samples, 0.55%)</title><rect x="80.5652%" y="277" width="0.5456%" height="15" fill="rgb(215,19,7)" fg:x="51088" fg:w="346"/><text x="80.8152%" y="287.50"></text></g><g><title>burst`DYLD-STUB$$malloc (21 samples, 0.03%)</title><rect x="81.1108%" y="277" width="0.0331%" height="15" fill="rgb(238,81,41)" fg:x="51434" fg:w="21"/><text x="81.3608%" y="287.50"></text></g><g><title>burst`__rdl_alloc (18 samples, 0.03%)</title><rect x="81.1439%" y="277" width="0.0284%" height="15" fill="rgb(210,199,37)" fg:x="51455" fg:w="18"/><text x="81.3939%" y="287.50"></text></g><g><title>burst`DYLD-STUB$$malloc (11 samples, 0.02%)</title><rect x="81.2575%" y="261" width="0.0173%" height="15" fill="rgb(244,192,49)" fg:x="51527" fg:w="11"/><text x="81.5075%" y="271.50"></text></g><g><title>burst`__rdl_alloc (22 samples, 0.03%)</title><rect x="81.2764%" y="261" width="0.0347%" height="15" fill="rgb(226,211,11)" fg:x="51539" fg:w="22"/><text x="81.5264%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (23 samples, 0.04%)</title><rect x="81.4767%" y="229" width="0.0363%" height="15" fill="rgb(236,162,54)" fg:x="51666" fg:w="23"/><text x="81.7267%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (34 samples, 0.05%)</title><rect x="81.8252%" y="197" width="0.0536%" height="15" fill="rgb(220,229,9)" fg:x="51887" fg:w="34"/><text x="82.0752%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (297 samples, 0.47%)</title><rect x="81.5540%" y="213" width="0.4684%" height="15" fill="rgb(250,87,22)" fg:x="51715" fg:w="297"/><text x="81.8040%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (91 samples, 0.14%)</title><rect x="81.8788%" y="197" width="0.1435%" height="15" fill="rgb(239,43,17)" fg:x="51921" fg:w="91"/><text x="82.1288%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (452 samples, 0.71%)</title><rect x="81.3521%" y="245" width="0.7128%" height="15" fill="rgb(231,177,25)" fg:x="51587" fg:w="452"/><text x="81.6021%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (350 samples, 0.55%)</title><rect x="81.5130%" y="229" width="0.5519%" height="15" fill="rgb(219,179,1)" fg:x="51689" fg:w="350"/><text x="81.7630%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (27 samples, 0.04%)</title><rect x="82.0223%" y="213" width="0.0426%" height="15" fill="rgb(238,219,53)" fg:x="52012" fg:w="27"/><text x="82.2723%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (14 samples, 0.02%)</title><rect x="82.0649%" y="245" width="0.0221%" height="15" fill="rgb(232,167,36)" fg:x="52039" fg:w="14"/><text x="82.3149%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.02%)</title><rect x="82.0870%" y="245" width="0.0205%" height="15" fill="rgb(244,19,51)" fg:x="52053" fg:w="13"/><text x="82.3370%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (11 samples, 0.02%)</title><rect x="82.1138%" y="197" width="0.0173%" height="15" fill="rgb(224,6,22)" fg:x="52070" fg:w="11"/><text x="82.3638%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (11 samples, 0.02%)</title><rect x="82.1138%" y="181" width="0.0173%" height="15" fill="rgb(224,145,5)" fg:x="52070" fg:w="11"/><text x="82.3638%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (20 samples, 0.03%)</title><rect x="82.1122%" y="213" width="0.0315%" height="15" fill="rgb(234,130,49)" fg:x="52069" fg:w="20"/><text x="82.3622%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (77 samples, 0.12%)</title><rect x="82.1091%" y="229" width="0.1214%" height="15" fill="rgb(254,6,2)" fg:x="52067" fg:w="77"/><text x="82.3591%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (55 samples, 0.09%)</title><rect x="82.1438%" y="213" width="0.0867%" height="15" fill="rgb(208,96,46)" fg:x="52089" fg:w="55"/><text x="82.3938%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (79 samples, 0.12%)</title><rect x="82.1075%" y="245" width="0.1246%" height="15" fill="rgb(239,3,39)" fg:x="52066" fg:w="79"/><text x="82.3575%" y="255.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (585 samples, 0.92%)</title><rect x="81.3111%" y="261" width="0.9225%" height="15" fill="rgb(233,210,1)" fg:x="51561" fg:w="585"/><text x="81.5611%" y="271.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (684 samples, 1.08%)</title><rect x="81.1723%" y="277" width="1.0787%" height="15" fill="rgb(244,137,37)" fg:x="51473" fg:w="684"/><text x="81.4223%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.02%)</title><rect x="82.2336%" y="261" width="0.0173%" height="15" fill="rgb(240,136,2)" fg:x="52146" fg:w="11"/><text x="82.4836%" y="271.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (11 samples, 0.02%)</title><rect x="82.2510%" y="277" width="0.0173%" height="15" fill="rgb(239,18,37)" fg:x="52157" fg:w="11"/><text x="82.5010%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (14 samples, 0.02%)</title><rect x="90.5475%" y="197" width="0.0221%" height="15" fill="rgb(218,185,22)" fg:x="57418" fg:w="14"/><text x="90.7975%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (77 samples, 0.12%)</title><rect x="90.5444%" y="213" width="0.1214%" height="15" fill="rgb(225,218,4)" fg:x="57416" fg:w="77"/><text x="90.7944%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (61 samples, 0.10%)</title><rect x="90.5696%" y="197" width="0.0962%" height="15" fill="rgb(230,182,32)" fg:x="57432" fg:w="61"/><text x="90.8196%" y="207.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (80 samples, 0.13%)</title><rect x="90.5428%" y="261" width="0.1262%" height="15" fill="rgb(242,56,43)" fg:x="57415" fg:w="80"/><text x="90.7928%" y="271.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (79 samples, 0.12%)</title><rect x="90.5444%" y="245" width="0.1246%" height="15" fill="rgb(233,99,24)" fg:x="57416" fg:w="79"/><text x="90.7944%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (79 samples, 0.12%)</title><rect x="90.5444%" y="229" width="0.1246%" height="15" fill="rgb(234,209,42)" fg:x="57416" fg:w="79"/><text x="90.7944%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (43 samples, 0.07%)</title><rect x="90.8897%" y="245" width="0.0678%" height="15" fill="rgb(227,7,12)" fg:x="57635" fg:w="43"/><text x="91.1397%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (63 samples, 0.10%)</title><rect x="91.4480%" y="213" width="0.0994%" height="15" fill="rgb(245,203,43)" fg:x="57989" fg:w="63"/><text x="91.6980%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (488 samples, 0.77%)</title><rect x="91.0459%" y="229" width="0.7696%" height="15" fill="rgb(238,205,33)" fg:x="57734" fg:w="488"/><text x="91.2959%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (170 samples, 0.27%)</title><rect x="91.5473%" y="213" width="0.2681%" height="15" fill="rgb(231,56,7)" fg:x="58052" fg:w="170"/><text x="91.7973%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (758 samples, 1.20%)</title><rect x="90.6690%" y="261" width="1.1954%" height="15" fill="rgb(244,186,29)" fg:x="57495" fg:w="758"/><text x="90.9190%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (575 samples, 0.91%)</title><rect x="90.9575%" y="245" width="0.9068%" height="15" fill="rgb(234,111,31)" fg:x="57678" fg:w="575"/><text x="91.2075%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (31 samples, 0.05%)</title><rect x="91.8154%" y="229" width="0.0489%" height="15" fill="rgb(241,149,10)" fg:x="58222" fg:w="31"/><text x="92.0654%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (44 samples, 0.07%)</title><rect x="91.8643%" y="261" width="0.0694%" height="15" fill="rgb(249,206,44)" fg:x="58253" fg:w="44"/><text x="92.1143%" y="271.50"></text></g><g><title>burst`burst::intersect::_&lt;impl burst::ntfa::NTFABuilder&gt;::intersect::getmergedvl (6,151 samples, 9.70%)</title><rect x="82.2699%" y="277" width="9.7001%" height="15" fill="rgb(251,153,30)" fg:x="52169" fg:w="6151"/><text x="82.5199%" y="287.50">burst`burst::i..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (23 samples, 0.04%)</title><rect x="91.9337%" y="261" width="0.0363%" height="15" fill="rgb(239,152,38)" fg:x="58297" fg:w="23"/><text x="92.1837%" y="271.50"></text></g><g><title>burst`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (204 samples, 0.32%)</title><rect x="93.7961%" y="261" width="0.3217%" height="15" fill="rgb(249,139,47)" fg:x="59478" fg:w="204"/><text x="94.0461%" y="271.50"></text></g><g><title>burst`alloc::vec::Vec&lt;T,A&gt;::retain (33 samples, 0.05%)</title><rect x="94.1178%" y="261" width="0.0520%" height="15" fill="rgb(244,64,35)" fg:x="59682" fg:w="33"/><text x="94.3678%" y="271.50"></text></g><g><title>burst`burst::ntfa::NTFABuilder::accessibility_cleaning (1,399 samples, 2.21%)</title><rect x="91.9700%" y="277" width="2.2062%" height="15" fill="rgb(216,46,15)" fg:x="58320" fg:w="1399"/><text x="92.2200%" y="287.50">b..</text></g><g><title>burst`alloc::vec::Vec&lt;T,A&gt;::dedup_by (70 samples, 0.11%)</title><rect x="94.3039%" y="261" width="0.1104%" height="15" fill="rgb(250,74,19)" fg:x="59800" fg:w="70"/><text x="94.5539%" y="271.50"></text></g><g><title>burst`core::slice::sort::partial_insertion_sort (46 samples, 0.07%)</title><rect x="94.9726%" y="229" width="0.0725%" height="15" fill="rgb(249,42,33)" fg:x="60224" fg:w="46"/><text x="95.2226%" y="239.50"></text></g><g><title>burst`core::slice::sort::partial_insertion_sort (14 samples, 0.02%)</title><rect x="95.2848%" y="213" width="0.0221%" height="15" fill="rgb(242,149,17)" fg:x="60422" fg:w="14"/><text x="95.5348%" y="223.50"></text></g><g><title>burst`core::slice::sort::partial_insertion_sort (21 samples, 0.03%)</title><rect x="95.5939%" y="197" width="0.0331%" height="15" fill="rgb(244,29,21)" fg:x="60618" fg:w="21"/><text x="95.8439%" y="207.50"></text></g><g><title>burst`core::slice::sort::partial_insertion_sort (9 samples, 0.01%)</title><rect x="95.9172%" y="181" width="0.0142%" height="15" fill="rgb(220,130,37)" fg:x="60823" fg:w="9"/><text x="96.1672%" y="191.50"></text></g><g><title>burst`core::slice::sort::partial_insertion_sort (12 samples, 0.02%)</title><rect x="96.1127%" y="165" width="0.0189%" height="15" fill="rgb(211,67,2)" fg:x="60947" fg:w="12"/><text x="96.3627%" y="175.50"></text></g><g><title>burst`core::slice::sort::recurse (18 samples, 0.03%)</title><rect x="96.3398%" y="117" width="0.0284%" height="15" fill="rgb(235,68,52)" fg:x="61091" fg:w="18"/><text x="96.5898%" y="127.50"></text></g><g><title>burst`core::slice::sort::shift_tail (11 samples, 0.02%)</title><rect x="96.3508%" y="101" width="0.0173%" height="15" fill="rgb(246,142,3)" fg:x="61098" fg:w="11"/><text x="96.6008%" y="111.50"></text></g><g><title>burst`core::slice::sort::recurse (51 samples, 0.08%)</title><rect x="96.3240%" y="133" width="0.0804%" height="15" fill="rgb(241,25,7)" fg:x="61081" fg:w="51"/><text x="96.5740%" y="143.50"></text></g><g><title>burst`core::slice::sort::shift_tail (23 samples, 0.04%)</title><rect x="96.3682%" y="117" width="0.0363%" height="15" fill="rgb(242,119,39)" fg:x="61109" fg:w="23"/><text x="96.6182%" y="127.50"></text></g><g><title>burst`core::slice::sort::recurse (173 samples, 0.27%)</title><rect x="96.2515%" y="149" width="0.2728%" height="15" fill="rgb(241,98,45)" fg:x="61035" fg:w="173"/><text x="96.5015%" y="159.50"></text></g><g><title>burst`core::slice::sort::shift_tail (76 samples, 0.12%)</title><rect x="96.4045%" y="133" width="0.1199%" height="15" fill="rgb(254,28,30)" fg:x="61132" fg:w="76"/><text x="96.6545%" y="143.50"></text></g><g><title>burst`core::slice::sort::recurse (334 samples, 0.53%)</title><rect x="96.1316%" y="165" width="0.5267%" height="15" fill="rgb(241,142,54)" fg:x="60959" fg:w="334"/><text x="96.3816%" y="175.50"></text></g><g><title>burst`core::slice::sort::shift_tail (85 samples, 0.13%)</title><rect x="96.5243%" y="149" width="0.1340%" height="15" fill="rgb(222,85,15)" fg:x="61208" fg:w="85"/><text x="96.7743%" y="159.50"></text></g><g><title>burst`core::slice::sort::recurse (606 samples, 0.96%)</title><rect x="95.9314%" y="181" width="0.9557%" height="15" fill="rgb(210,85,47)" fg:x="60832" fg:w="606"/><text x="96.1814%" y="191.50"></text></g><g><title>burst`core::slice::sort::shift_tail (145 samples, 0.23%)</title><rect x="96.6584%" y="165" width="0.2287%" height="15" fill="rgb(224,206,25)" fg:x="61293" fg:w="145"/><text x="96.9084%" y="175.50"></text></g><g><title>burst`core::slice::sort::recurse (921 samples, 1.45%)</title><rect x="95.6270%" y="197" width="1.4524%" height="15" fill="rgb(243,201,19)" fg:x="60639" fg:w="921"/><text x="95.8770%" y="207.50"></text></g><g><title>burst`core::slice::sort::shift_tail (122 samples, 0.19%)</title><rect x="96.8870%" y="181" width="0.1924%" height="15" fill="rgb(236,59,4)" fg:x="61438" fg:w="122"/><text x="97.1370%" y="191.50"></text></g><g><title>burst`core::slice::sort::recurse (1,196 samples, 1.89%)</title><rect x="95.3069%" y="213" width="1.8861%" height="15" fill="rgb(254,179,45)" fg:x="60436" fg:w="1196"/><text x="95.5569%" y="223.50">b..</text></g><g><title>burst`core::slice::sort::shift_tail (72 samples, 0.11%)</title><rect x="97.0794%" y="197" width="0.1135%" height="15" fill="rgb(226,14,10)" fg:x="61560" fg:w="72"/><text x="97.3294%" y="207.50"></text></g><g><title>burst`core::slice::sort::recurse (1,404 samples, 2.21%)</title><rect x="95.0451%" y="229" width="2.2141%" height="15" fill="rgb(244,27,41)" fg:x="60270" fg:w="1404"/><text x="95.2951%" y="239.50">b..</text></g><g><title>burst`core::slice::sort::shift_tail (42 samples, 0.07%)</title><rect x="97.1930%" y="213" width="0.0662%" height="15" fill="rgb(235,35,32)" fg:x="61632" fg:w="42"/><text x="97.4430%" y="223.50"></text></g><g><title>burst`core::slice::sort::recurse (1,617 samples, 2.55%)</title><rect x="94.7297%" y="245" width="2.5500%" height="15" fill="rgb(218,68,31)" fg:x="60070" fg:w="1617"/><text x="94.9797%" y="255.50">bu..</text></g><g><title>burst`core::slice::sort::shift_tail (13 samples, 0.02%)</title><rect x="97.2592%" y="229" width="0.0205%" height="15" fill="rgb(207,120,37)" fg:x="61674" fg:w="13"/><text x="97.5092%" y="239.50"></text></g><g><title>burst`core::slice::sort::recurse (1,819 samples, 2.87%)</title><rect x="94.4143%" y="261" width="2.8685%" height="15" fill="rgb(227,98,0)" fg:x="59870" fg:w="1819"/><text x="94.6643%" y="271.50">bu..</text></g><g><title>burst`burst::ntfa::NTFABuilder::insert_into_placeholder (2,016 samples, 3.18%)</title><rect x="94.1762%" y="277" width="3.1792%" height="15" fill="rgb(207,7,3)" fg:x="59719" fg:w="2016"/><text x="94.4262%" y="287.50">bur..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (45 samples, 0.07%)</title><rect x="97.2844%" y="261" width="0.0710%" height="15" fill="rgb(206,98,19)" fg:x="61690" fg:w="45"/><text x="97.5344%" y="271.50"></text></g><g><title>burst`hashbrown::map::make_hash (293 samples, 0.46%)</title><rect x="97.3570%" y="277" width="0.4621%" height="15" fill="rgb(217,5,26)" fg:x="61736" fg:w="293"/><text x="97.6070%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (160 samples, 0.25%)</title><rect x="98.2070%" y="261" width="0.2523%" height="15" fill="rgb(235,190,38)" fg:x="62275" fg:w="160"/><text x="98.4570%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (402 samples, 0.63%)</title><rect x="97.8332%" y="277" width="0.6339%" height="15" fill="rgb(247,86,24)" fg:x="62038" fg:w="402"/><text x="98.0832%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (24 samples, 0.04%)</title><rect x="98.4703%" y="261" width="0.0378%" height="15" fill="rgb(205,101,16)" fg:x="62442" fg:w="24"/><text x="98.7203%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (31 samples, 0.05%)</title><rect x="98.4703%" y="277" width="0.0489%" height="15" fill="rgb(246,168,33)" fg:x="62442" fg:w="31"/><text x="98.7203%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (19 samples, 0.03%)</title><rect x="98.5208%" y="277" width="0.0300%" height="15" fill="rgb(231,114,1)" fg:x="62474" fg:w="19"/><text x="98.7708%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (165 samples, 0.26%)</title><rect x="98.8125%" y="245" width="0.2602%" height="15" fill="rgb(207,184,53)" fg:x="62659" fg:w="165"/><text x="99.0625%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (332 samples, 0.52%)</title><rect x="98.5507%" y="277" width="0.5236%" height="15" fill="rgb(224,95,51)" fg:x="62493" fg:w="332"/><text x="98.8007%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (167 samples, 0.26%)</title><rect x="98.8110%" y="261" width="0.2634%" height="15" fill="rgb(212,188,45)" fg:x="62658" fg:w="167"/><text x="99.0610%" y="271.50"></text></g><g><title>burst`burst::intersect::_&lt;impl burst::ntfa::NTFABuilder&gt;::intersect (27,588 samples, 43.51%)</title><rect x="55.6157%" y="293" width="43.5060%" height="15" fill="rgb(223,154,38)" fg:x="35267" fg:w="27588"/><text x="55.8657%" y="303.50">burst`burst::intersect::_&lt;impl burst::ntfa::NTFABuilder&gt;::intersect</text></g><g><title>libsystem_malloc.dylib`nanov2_size (30 samples, 0.05%)</title><rect x="99.0743%" y="277" width="0.0473%" height="15" fill="rgb(251,22,52)" fg:x="62825" fg:w="30"/><text x="99.3243%" y="287.50"></text></g><g><title>burst`burst::nftabuilder::_&lt;impl burst::ntfa::NTFABuilder&gt;::build_ntfa (16 samples, 0.03%)</title><rect x="99.1216%" y="293" width="0.0252%" height="15" fill="rgb(229,209,22)" fg:x="62855" fg:w="16"/><text x="99.3716%" y="303.50"></text></g><g><title>burst`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (14 samples, 0.02%)</title><rect x="99.1468%" y="293" width="0.0221%" height="15" fill="rgb(234,138,34)" fg:x="62871" fg:w="14"/><text x="99.3968%" y="303.50"></text></g><g><title>burst`hashbrown::map::make_hash (142 samples, 0.22%)</title><rect x="99.1689%" y="293" width="0.2239%" height="15" fill="rgb(212,95,11)" fg:x="62885" fg:w="142"/><text x="99.4189%" y="303.50"></text></g><g><title>burst`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (145 samples, 0.23%)</title><rect x="99.4023%" y="293" width="0.2287%" height="15" fill="rgb(240,179,47)" fg:x="63033" fg:w="145"/><text x="99.6523%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (57 samples, 0.09%)</title><rect x="99.6326%" y="293" width="0.0899%" height="15" fill="rgb(240,163,11)" fg:x="63179" fg:w="57"/><text x="99.8826%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (84 samples, 0.13%)</title><rect x="99.7225%" y="293" width="0.1325%" height="15" fill="rgb(236,37,12)" fg:x="63236" fg:w="84"/><text x="99.9725%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (68 samples, 0.11%)</title><rect x="99.8565%" y="293" width="0.1072%" height="15" fill="rgb(232,164,16)" fg:x="63321" fg:w="68"/><text x="100.1065%" y="303.50"></text></g><g><title>burst`burst::synthesis::synthesize (63,410 samples, 100.00%)</title><rect x="0.0016%" y="309" width="99.9968%" height="15" fill="rgb(244,205,15)" fg:x="1" fg:w="63410"/><text x="0.2516%" y="319.50">burst`burst::synthesis::synthesize</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (22 samples, 0.03%)</title><rect x="99.9637%" y="293" width="0.0347%" height="15" fill="rgb(223,117,47)" fg:x="63389" fg:w="22"/><text x="100.2137%" y="303.50"></text></g><g><title>all (63,412 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(244,107,35)" fg:x="0" fg:w="63412"/><text x="0.2500%" y="431.50"></text></g><g><title>dyld`start (63,412 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(205,140,8)" fg:x="0" fg:w="63412"/><text x="0.2500%" y="415.50">dyld`start</text></g><g><title>burst`main (63,412 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(228,84,46)" fg:x="0" fg:w="63412"/><text x="0.2500%" y="399.50">burst`main</text></g><g><title>burst`std::rt::lang_start_internal (63,412 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(254,188,9)" fg:x="0" fg:w="63412"/><text x="0.2500%" y="383.50">burst`std::rt::lang_start_internal</text></g><g><title>burst`std::rt::lang_start::_{{closure}} (63,412 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(206,112,54)" fg:x="0" fg:w="63412"/><text x="0.2500%" y="367.50">burst`std::rt::lang_start::_{{closure}}</text></g><g><title>burst`std::sys_common::backtrace::__rust_begin_short_backtrace (63,412 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(216,84,49)" fg:x="0" fg:w="63412"/><text x="0.2500%" y="351.50">burst`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>burst`burst::main (63,412 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(214,194,35)" fg:x="0" fg:w="63412"/><text x="0.2500%" y="335.50">burst`burst::main</text></g></svg></svg>