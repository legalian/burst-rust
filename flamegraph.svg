<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="3327"><g><title>burst`alloc::slice::merge_sort (1 samples, 0.03%)</title><rect x="0.0000%" y="261" width="0.0301%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>burst`std::path::compare_components (1 samples, 0.03%)</title><rect x="0.0000%" y="245" width="0.0301%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>burst`DYLD-STUB$$free (2 samples, 0.06%)</title><rect x="0.0301%" y="245" width="0.0601%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="2"/><text x="0.2801%" y="255.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.18%)</title><rect x="0.0902%" y="245" width="0.1803%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="6"/><text x="0.3402%" y="255.50"></text></g><g><title>burst`burst::debug::_&lt;impl burst::ntfa::NTFABuilder&gt;::output_tree (1 samples, 0.03%)</title><rect x="0.2705%" y="245" width="0.0301%" height="15" fill="rgb(208,68,35)" fg:x="9" fg:w="1"/><text x="0.5205%" y="255.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="0.3006%" y="229" width="0.0301%" height="15" fill="rgb(232,128,0)" fg:x="10" fg:w="1"/><text x="0.5506%" y="239.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="0.3006%" y="213" width="0.0301%" height="15" fill="rgb(207,160,47)" fg:x="10" fg:w="1"/><text x="0.5506%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.03%)</title><rect x="0.3006%" y="197" width="0.0301%" height="15" fill="rgb(228,23,34)" fg:x="10" fg:w="1"/><text x="0.5506%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.03%)</title><rect x="0.3006%" y="181" width="0.0301%" height="15" fill="rgb(218,30,26)" fg:x="10" fg:w="1"/><text x="0.5506%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.03%)</title><rect x="0.3006%" y="165" width="0.0301%" height="15" fill="rgb(220,122,19)" fg:x="10" fg:w="1"/><text x="0.5506%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="0.3006%" y="149" width="0.0301%" height="15" fill="rgb(250,228,42)" fg:x="10" fg:w="1"/><text x="0.5506%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.03%)</title><rect x="0.3006%" y="133" width="0.0301%" height="15" fill="rgb(240,193,28)" fg:x="10" fg:w="1"/><text x="0.5506%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.03%)</title><rect x="0.3006%" y="117" width="0.0301%" height="15" fill="rgb(216,20,37)" fg:x="10" fg:w="1"/><text x="0.5506%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.03%)</title><rect x="0.3006%" y="101" width="0.0301%" height="15" fill="rgb(206,188,39)" fg:x="10" fg:w="1"/><text x="0.5506%" y="111.50"></text></g><g><title>burst`core::slice::_&lt;impl [T]&gt;::sort_unstable::_{{closure}} (1 samples, 0.03%)</title><rect x="0.4208%" y="165" width="0.0301%" height="15" fill="rgb(217,207,13)" fg:x="14" fg:w="1"/><text x="0.6708%" y="175.50"></text></g><g><title>burst`burst::ntfa::NTFABuilder::simplify::getblh (5 samples, 0.15%)</title><rect x="0.3306%" y="213" width="0.1503%" height="15" fill="rgb(231,73,38)" fg:x="11" fg:w="5"/><text x="0.5806%" y="223.50"></text></g><g><title>burst`core::slice::sort::recurse (5 samples, 0.15%)</title><rect x="0.3306%" y="197" width="0.1503%" height="15" fill="rgb(225,20,46)" fg:x="11" fg:w="5"/><text x="0.5806%" y="207.50"></text></g><g><title>burst`core::slice::sort::recurse (4 samples, 0.12%)</title><rect x="0.3607%" y="181" width="0.1202%" height="15" fill="rgb(210,31,41)" fg:x="12" fg:w="4"/><text x="0.6107%" y="191.50"></text></g><g><title>burst`core::slice::sort::recurse (1 samples, 0.03%)</title><rect x="0.4509%" y="165" width="0.0301%" height="15" fill="rgb(221,200,47)" fg:x="15" fg:w="1"/><text x="0.7009%" y="175.50"></text></g><g><title>burst`core::slice::sort::recurse (1 samples, 0.03%)</title><rect x="0.4509%" y="149" width="0.0301%" height="15" fill="rgb(226,26,5)" fg:x="15" fg:w="1"/><text x="0.7009%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.03%)</title><rect x="0.4509%" y="133" width="0.0301%" height="15" fill="rgb(249,33,26)" fg:x="15" fg:w="1"/><text x="0.7009%" y="143.50"></text></g><g><title>burst`burst::ntfa::NTFABuilder::simplify::getmergedvl (3 samples, 0.09%)</title><rect x="0.4809%" y="213" width="0.0902%" height="15" fill="rgb(235,183,28)" fg:x="16" fg:w="3"/><text x="0.7309%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="0.5410%" y="197" width="0.0301%" height="15" fill="rgb(221,5,38)" fg:x="18" fg:w="1"/><text x="0.7910%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="0.5410%" y="181" width="0.0301%" height="15" fill="rgb(247,18,42)" fg:x="18" fg:w="1"/><text x="0.7910%" y="191.50"></text></g><g><title>burst`burst::ntfa::NTFABuilder::simplify (9 samples, 0.27%)</title><rect x="0.3306%" y="229" width="0.2705%" height="15" fill="rgb(241,131,45)" fg:x="11" fg:w="9"/><text x="0.5806%" y="239.50"></text></g><g><title>burst`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.03%)</title><rect x="0.5711%" y="213" width="0.0301%" height="15" fill="rgb(249,31,29)" fg:x="19" fg:w="1"/><text x="0.8211%" y="223.50"></text></g><g><title>burst`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.06%)</title><rect x="0.6312%" y="213" width="0.0601%" height="15" fill="rgb(225,111,53)" fg:x="21" fg:w="2"/><text x="0.8812%" y="223.50"></text></g><g><title>burst`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.03%)</title><rect x="0.6613%" y="197" width="0.0301%" height="15" fill="rgb(238,160,17)" fg:x="22" fg:w="1"/><text x="0.9113%" y="207.50"></text></g><g><title>burst`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="0.6613%" y="181" width="0.0301%" height="15" fill="rgb(214,148,48)" fg:x="22" fg:w="1"/><text x="0.9113%" y="191.50"></text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="0.6613%" y="165" width="0.0301%" height="15" fill="rgb(232,36,49)" fg:x="22" fg:w="1"/><text x="0.9113%" y="175.50"></text></g><g><title>burst`burst::nftabuilder::_&lt;impl burst::ntfa::NTFABuilder&gt;::build_ntfa (14 samples, 0.42%)</title><rect x="0.3006%" y="245" width="0.4208%" height="15" fill="rgb(209,103,24)" fg:x="10" fg:w="14"/><text x="0.5506%" y="255.50"></text></g><g><title>burst`burst::ntfa::PartialNTFA::add_rule (4 samples, 0.12%)</title><rect x="0.6011%" y="229" width="0.1202%" height="15" fill="rgb(229,88,8)" fg:x="20" fg:w="4"/><text x="0.8511%" y="239.50"></text></g><g><title>burst`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.03%)</title><rect x="0.6913%" y="213" width="0.0301%" height="15" fill="rgb(213,181,19)" fg:x="23" fg:w="1"/><text x="0.9413%" y="223.50"></text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (48 samples, 1.44%)</title><rect x="5.5906%" y="229" width="1.4427%" height="15" fill="rgb(254,191,54)" fg:x="186" fg:w="48"/><text x="5.8406%" y="239.50"></text></g><g><title>burst`DYLD-STUB$$memcmp (3 samples, 0.09%)</title><rect x="7.0334%" y="229" width="0.0902%" height="15" fill="rgb(241,83,37)" fg:x="234" fg:w="3"/><text x="7.2834%" y="239.50"></text></g><g><title>burst`DYLD-STUB$$malloc (3 samples, 0.09%)</title><rect x="7.6044%" y="213" width="0.0902%" height="15" fill="rgb(233,36,39)" fg:x="253" fg:w="3"/><text x="7.8544%" y="223.50"></text></g><g><title>burst`__rdl_alloc (1 samples, 0.03%)</title><rect x="7.6946%" y="213" width="0.0301%" height="15" fill="rgb(226,3,54)" fg:x="256" fg:w="1"/><text x="7.9446%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.06%)</title><rect x="8.2056%" y="181" width="0.0601%" height="15" fill="rgb(245,192,40)" fg:x="273" fg:w="2"/><text x="8.4556%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.30%)</title><rect x="9.4379%" y="149" width="0.3006%" height="15" fill="rgb(238,167,29)" fg:x="314" fg:w="10"/><text x="9.6879%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (61 samples, 1.83%)</title><rect x="8.5062%" y="165" width="1.8335%" height="15" fill="rgb(232,182,51)" fg:x="283" fg:w="61"/><text x="8.7562%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (20 samples, 0.60%)</title><rect x="9.7385%" y="149" width="0.6011%" height="15" fill="rgb(231,60,39)" fg:x="324" fg:w="20"/><text x="9.9885%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (87 samples, 2.61%)</title><rect x="7.7848%" y="197" width="2.6150%" height="15" fill="rgb(208,69,12)" fg:x="259" fg:w="87"/><text x="8.0348%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (71 samples, 2.13%)</title><rect x="8.2657%" y="181" width="2.1341%" height="15" fill="rgb(235,93,37)" fg:x="275" fg:w="71"/><text x="8.5157%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.06%)</title><rect x="10.3396%" y="165" width="0.0601%" height="15" fill="rgb(213,116,39)" fg:x="344" fg:w="2"/><text x="10.5896%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (5 samples, 0.15%)</title><rect x="10.3998%" y="197" width="0.1503%" height="15" fill="rgb(222,207,29)" fg:x="346" fg:w="5"/><text x="10.6498%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.03%)</title><rect x="10.5500%" y="149" width="0.0301%" height="15" fill="rgb(206,96,30)" fg:x="351" fg:w="1"/><text x="10.8000%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.03%)</title><rect x="10.5500%" y="133" width="0.0301%" height="15" fill="rgb(218,138,4)" fg:x="351" fg:w="1"/><text x="10.8000%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 0.09%)</title><rect x="10.5500%" y="165" width="0.0902%" height="15" fill="rgb(250,191,14)" fg:x="351" fg:w="3"/><text x="10.8000%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.06%)</title><rect x="10.5801%" y="149" width="0.0601%" height="15" fill="rgb(239,60,40)" fg:x="352" fg:w="2"/><text x="10.8301%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.06%)</title><rect x="10.5801%" y="133" width="0.0601%" height="15" fill="rgb(206,27,48)" fg:x="352" fg:w="2"/><text x="10.8301%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.03%)</title><rect x="10.6102%" y="117" width="0.0301%" height="15" fill="rgb(225,35,8)" fg:x="353" fg:w="1"/><text x="10.8602%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.03%)</title><rect x="10.6102%" y="101" width="0.0301%" height="15" fill="rgb(250,213,24)" fg:x="353" fg:w="1"/><text x="10.8602%" y="111.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (113 samples, 3.40%)</title><rect x="7.7247%" y="213" width="3.3965%" height="15" fill="rgb(247,123,22)" fg:x="257" fg:w="113"/><text x="7.9747%" y="223.50">bur..</text></g><g><title>libsystem_malloc.dylib`realloc (19 samples, 0.57%)</title><rect x="10.5500%" y="197" width="0.5711%" height="15" fill="rgb(231,138,38)" fg:x="351" fg:w="19"/><text x="10.8000%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (19 samples, 0.57%)</title><rect x="10.5500%" y="181" width="0.5711%" height="15" fill="rgb(231,145,46)" fg:x="351" fg:w="19"/><text x="10.8000%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.48%)</title><rect x="10.6402%" y="165" width="0.4809%" height="15" fill="rgb(251,118,11)" fg:x="354" fg:w="16"/><text x="10.8902%" y="175.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (134 samples, 4.03%)</title><rect x="7.1235%" y="229" width="4.0277%" height="15" fill="rgb(217,147,25)" fg:x="237" fg:w="134"/><text x="7.3735%" y="239.50">burs..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="11.1211%" y="213" width="0.0301%" height="15" fill="rgb(247,81,37)" fg:x="370" fg:w="1"/><text x="11.3711%" y="223.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (4 samples, 0.12%)</title><rect x="11.1512%" y="229" width="0.1202%" height="15" fill="rgb(209,12,38)" fg:x="371" fg:w="4"/><text x="11.4012%" y="239.50"></text></g><g><title>burst`core::slice::sort::partial_insertion_sort (1 samples, 0.03%)</title><rect x="12.0228%" y="197" width="0.0301%" height="15" fill="rgb(227,1,9)" fg:x="400" fg:w="1"/><text x="12.2728%" y="207.50"></text></g><g><title>burst`core::slice::sort::partial_insertion_sort (3 samples, 0.09%)</title><rect x="13.3153%" y="181" width="0.0902%" height="15" fill="rgb(248,47,43)" fg:x="443" fg:w="3"/><text x="13.5653%" y="191.50"></text></g><g><title>burst`core::slice::sort::partial_insertion_sort (1 samples, 0.03%)</title><rect x="14.5476%" y="165" width="0.0301%" height="15" fill="rgb(221,10,30)" fg:x="484" fg:w="1"/><text x="14.7976%" y="175.50"></text></g><g><title>burst`core::slice::sort::partial_insertion_sort (2 samples, 0.06%)</title><rect x="15.6297%" y="149" width="0.0601%" height="15" fill="rgb(210,229,1)" fg:x="520" fg:w="2"/><text x="15.8797%" y="159.50"></text></g><g><title>burst`core::slice::sort::recurse (2 samples, 0.06%)</title><rect x="17.1025%" y="101" width="0.0601%" height="15" fill="rgb(222,148,37)" fg:x="569" fg:w="2"/><text x="17.3525%" y="111.50"></text></g><g><title>burst`core::slice::sort::shift_tail (1 samples, 0.03%)</title><rect x="17.1326%" y="85" width="0.0301%" height="15" fill="rgb(234,67,33)" fg:x="570" fg:w="1"/><text x="17.3826%" y="95.50"></text></g><g><title>burst`core::slice::sort::recurse (9 samples, 0.27%)</title><rect x="17.0424%" y="117" width="0.2705%" height="15" fill="rgb(247,98,35)" fg:x="567" fg:w="9"/><text x="17.2924%" y="127.50"></text></g><g><title>burst`core::slice::sort::shift_tail (5 samples, 0.15%)</title><rect x="17.1626%" y="101" width="0.1503%" height="15" fill="rgb(247,138,52)" fg:x="571" fg:w="5"/><text x="17.4126%" y="111.50"></text></g><g><title>burst`core::slice::sort::recurse (38 samples, 1.14%)</title><rect x="16.5014%" y="133" width="1.1422%" height="15" fill="rgb(213,79,30)" fg:x="549" fg:w="38"/><text x="16.7514%" y="143.50"></text></g><g><title>burst`core::slice::sort::shift_tail (11 samples, 0.33%)</title><rect x="17.3129%" y="117" width="0.3306%" height="15" fill="rgb(246,177,23)" fg:x="576" fg:w="11"/><text x="17.5629%" y="127.50"></text></g><g><title>burst`core::slice::sort::recurse (83 samples, 2.49%)</title><rect x="15.6898%" y="149" width="2.4947%" height="15" fill="rgb(230,62,27)" fg:x="522" fg:w="83"/><text x="15.9398%" y="159.50">bu..</text></g><g><title>burst`core::slice::sort::shift_tail (18 samples, 0.54%)</title><rect x="17.6435%" y="133" width="0.5410%" height="15" fill="rgb(216,154,8)" fg:x="587" fg:w="18"/><text x="17.8935%" y="143.50"></text></g><g><title>burst`core::slice::sort::recurse (143 samples, 4.30%)</title><rect x="14.5777%" y="165" width="4.2982%" height="15" fill="rgb(244,35,45)" fg:x="485" fg:w="143"/><text x="14.8277%" y="175.50">burst..</text></g><g><title>burst`core::slice::sort::shift_tail (23 samples, 0.69%)</title><rect x="18.1846%" y="149" width="0.6913%" height="15" fill="rgb(251,115,12)" fg:x="605" fg:w="23"/><text x="18.4346%" y="159.50"></text></g><g><title>burst`core::slice::sort::recurse (200 samples, 6.01%)</title><rect x="13.4055%" y="181" width="6.0114%" height="15" fill="rgb(240,54,50)" fg:x="446" fg:w="200"/><text x="13.6555%" y="191.50">burst`co..</text></g><g><title>burst`core::slice::sort::shift_tail (18 samples, 0.54%)</title><rect x="18.8759%" y="165" width="0.5410%" height="15" fill="rgb(233,84,52)" fg:x="628" fg:w="18"/><text x="19.1259%" y="175.50"></text></g><g><title>burst`core::slice::sort::recurse (254 samples, 7.63%)</title><rect x="12.0529%" y="197" width="7.6345%" height="15" fill="rgb(207,117,47)" fg:x="401" fg:w="254"/><text x="12.3029%" y="207.50">burst`core..</text></g><g><title>burst`core::slice::sort::shift_tail (9 samples, 0.27%)</title><rect x="19.4169%" y="181" width="0.2705%" height="15" fill="rgb(249,43,39)" fg:x="646" fg:w="9"/><text x="19.6669%" y="191.50"></text></g><g><title>burst`burst::ntfa::NTFABuilder::insert_into_placeholder (282 samples, 8.48%)</title><rect x="11.2714%" y="229" width="8.4761%" height="15" fill="rgb(209,38,44)" fg:x="375" fg:w="282"/><text x="11.5214%" y="239.50">burst`burst:..</text></g><g><title>burst`core::slice::sort::recurse (276 samples, 8.30%)</title><rect x="11.4518%" y="213" width="8.2958%" height="15" fill="rgb(236,212,23)" fg:x="381" fg:w="276"/><text x="11.7018%" y="223.50">burst`core::..</text></g><g><title>burst`core::slice::sort::shift_tail (2 samples, 0.06%)</title><rect x="19.6874%" y="197" width="0.0601%" height="15" fill="rgb(242,79,21)" fg:x="655" fg:w="2"/><text x="19.9374%" y="207.50"></text></g><g><title>burst`DYLD-STUB$$malloc (2 samples, 0.06%)</title><rect x="21.1602%" y="197" width="0.0601%" height="15" fill="rgb(211,96,35)" fg:x="704" fg:w="2"/><text x="21.4102%" y="207.50"></text></g><g><title>burst`__rdl_alloc (2 samples, 0.06%)</title><rect x="21.2203%" y="197" width="0.0601%" height="15" fill="rgb(253,215,40)" fg:x="706" fg:w="2"/><text x="21.4703%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.09%)</title><rect x="21.9417%" y="165" width="0.0902%" height="15" fill="rgb(211,81,21)" fg:x="730" fg:w="3"/><text x="22.1917%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.27%)</title><rect x="23.8653%" y="133" width="0.2705%" height="15" fill="rgb(208,190,38)" fg:x="794" fg:w="9"/><text x="24.1153%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (89 samples, 2.68%)</title><rect x="22.1521%" y="149" width="2.6751%" height="15" fill="rgb(235,213,38)" fg:x="737" fg:w="89"/><text x="22.4021%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (23 samples, 0.69%)</title><rect x="24.1359%" y="133" width="0.6913%" height="15" fill="rgb(237,122,38)" fg:x="803" fg:w="23"/><text x="24.3859%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (111 samples, 3.34%)</title><rect x="21.5810%" y="181" width="3.3363%" height="15" fill="rgb(244,218,35)" fg:x="718" fg:w="111"/><text x="21.8310%" y="191.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (96 samples, 2.89%)</title><rect x="22.0319%" y="165" width="2.8855%" height="15" fill="rgb(240,68,47)" fg:x="733" fg:w="96"/><text x="22.2819%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.09%)</title><rect x="24.8272%" y="149" width="0.0902%" height="15" fill="rgb(210,16,53)" fg:x="826" fg:w="3"/><text x="25.0772%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.09%)</title><rect x="24.9173%" y="181" width="0.0902%" height="15" fill="rgb(235,124,12)" fg:x="829" fg:w="3"/><text x="25.1673%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="25.0075%" y="181" width="0.0301%" height="15" fill="rgb(224,169,11)" fg:x="832" fg:w="1"/><text x="25.2575%" y="191.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (138 samples, 4.15%)</title><rect x="21.2804%" y="197" width="4.1479%" height="15" fill="rgb(250,166,2)" fg:x="708" fg:w="138"/><text x="21.5304%" y="207.50">burst..</text></g><g><title>libsystem_malloc.dylib`realloc (13 samples, 0.39%)</title><rect x="25.0376%" y="181" width="0.3907%" height="15" fill="rgb(242,216,29)" fg:x="833" fg:w="13"/><text x="25.2876%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (12 samples, 0.36%)</title><rect x="25.0676%" y="165" width="0.3607%" height="15" fill="rgb(230,116,27)" fg:x="834" fg:w="12"/><text x="25.3176%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.36%)</title><rect x="25.0676%" y="149" width="0.3607%" height="15" fill="rgb(228,99,48)" fg:x="834" fg:w="12"/><text x="25.3176%" y="159.50"></text></g><g><title>burst`burst::ntfa::NTFABuilder::intersect::getmergedvl (190 samples, 5.71%)</title><rect x="19.7475%" y="229" width="5.7109%" height="15" fill="rgb(253,11,6)" fg:x="657" fg:w="190"/><text x="19.9975%" y="239.50">burst`b..</text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (149 samples, 4.48%)</title><rect x="20.9799%" y="213" width="4.4785%" height="15" fill="rgb(247,143,39)" fg:x="698" fg:w="149"/><text x="21.2299%" y="223.50">burst..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="25.4283%" y="197" width="0.0301%" height="15" fill="rgb(236,97,10)" fg:x="846" fg:w="1"/><text x="25.6783%" y="207.50"></text></g><g><title>burst`hashbrown::map::make_hash (42 samples, 1.26%)</title><rect x="25.4584%" y="229" width="1.2624%" height="15" fill="rgb(233,208,19)" fg:x="847" fg:w="42"/><text x="25.7084%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (55 samples, 1.65%)</title><rect x="26.7208%" y="229" width="1.6531%" height="15" fill="rgb(216,164,2)" fg:x="889" fg:w="55"/><text x="26.9708%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (30 samples, 0.90%)</title><rect x="27.4722%" y="213" width="0.9017%" height="15" fill="rgb(220,129,5)" fg:x="914" fg:w="30"/><text x="27.7222%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.03%)</title><rect x="28.3739%" y="229" width="0.0301%" height="15" fill="rgb(242,17,10)" fg:x="944" fg:w="1"/><text x="28.6239%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="28.3739%" y="213" width="0.0301%" height="15" fill="rgb(242,107,0)" fg:x="944" fg:w="1"/><text x="28.6239%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (5 samples, 0.15%)</title><rect x="28.4040%" y="229" width="0.1503%" height="15" fill="rgb(251,28,31)" fg:x="945" fg:w="5"/><text x="28.6540%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (39 samples, 1.17%)</title><rect x="28.5543%" y="229" width="1.1722%" height="15" fill="rgb(233,223,10)" fg:x="950" fg:w="39"/><text x="28.8043%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (25 samples, 0.75%)</title><rect x="28.9751%" y="213" width="0.7514%" height="15" fill="rgb(215,21,27)" fg:x="964" fg:w="25"/><text x="29.2251%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (25 samples, 0.75%)</title><rect x="28.9751%" y="197" width="0.7514%" height="15" fill="rgb(232,23,21)" fg:x="964" fg:w="25"/><text x="29.2251%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.21%)</title><rect x="29.7265%" y="229" width="0.2104%" height="15" fill="rgb(244,5,23)" fg:x="989" fg:w="7"/><text x="29.9765%" y="239.50"></text></g><g><title>burst`burst::ntfa::NTFABuilder::intersect (978 samples, 29.40%)</title><rect x="0.7214%" y="245" width="29.3959%" height="15" fill="rgb(226,81,46)" fg:x="24" fg:w="978"/><text x="0.9714%" y="255.50">burst`burst::ntfa::NTFABuilder::intersect</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (6 samples, 0.18%)</title><rect x="29.9369%" y="229" width="0.1803%" height="15" fill="rgb(247,70,30)" fg:x="996" fg:w="6"/><text x="30.1869%" y="239.50"></text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (165 samples, 4.96%)</title><rect x="36.1587%" y="229" width="4.9594%" height="15" fill="rgb(212,68,19)" fg:x="1203" fg:w="165"/><text x="36.4087%" y="239.50">burst`..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="41.1482%" y="197" width="0.0301%" height="15" fill="rgb(240,187,13)" fg:x="1369" fg:w="1"/><text x="41.3982%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="41.1482%" y="181" width="0.0301%" height="15" fill="rgb(223,113,26)" fg:x="1369" fg:w="1"/><text x="41.3982%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.03%)</title><rect x="41.1782%" y="165" width="0.0301%" height="15" fill="rgb(206,192,2)" fg:x="1370" fg:w="1"/><text x="41.4282%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="41.1782%" y="149" width="0.0301%" height="15" fill="rgb(241,108,4)" fg:x="1370" fg:w="1"/><text x="41.4282%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.03%)</title><rect x="41.1782%" y="133" width="0.0301%" height="15" fill="rgb(247,173,49)" fg:x="1370" fg:w="1"/><text x="41.4282%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="41.1782%" y="117" width="0.0301%" height="15" fill="rgb(224,114,35)" fg:x="1370" fg:w="1"/><text x="41.4282%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.03%)</title><rect x="41.2384%" y="133" width="0.0301%" height="15" fill="rgb(245,159,27)" fg:x="1372" fg:w="1"/><text x="41.4884%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (1 samples, 0.03%)</title><rect x="41.2684%" y="133" width="0.0301%" height="15" fill="rgb(245,172,44)" fg:x="1373" fg:w="1"/><text x="41.5184%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="41.2684%" y="117" width="0.0301%" height="15" fill="rgb(236,23,11)" fg:x="1373" fg:w="1"/><text x="41.5184%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (6 samples, 0.18%)</title><rect x="41.2083%" y="149" width="0.1803%" height="15" fill="rgb(205,117,38)" fg:x="1371" fg:w="6"/><text x="41.4583%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (3 samples, 0.09%)</title><rect x="41.2985%" y="133" width="0.0902%" height="15" fill="rgb(237,72,25)" fg:x="1374" fg:w="3"/><text x="41.5485%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.09%)</title><rect x="41.2985%" y="117" width="0.0902%" height="15" fill="rgb(244,70,9)" fg:x="1374" fg:w="3"/><text x="41.5485%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (1 samples, 0.03%)</title><rect x="41.3886%" y="133" width="0.0301%" height="15" fill="rgb(217,125,39)" fg:x="1377" fg:w="1"/><text x="41.6386%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.03%)</title><rect x="41.4187%" y="101" width="0.0301%" height="15" fill="rgb(235,36,10)" fg:x="1378" fg:w="1"/><text x="41.6687%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.09%)</title><rect x="41.3886%" y="149" width="0.0902%" height="15" fill="rgb(251,123,47)" fg:x="1377" fg:w="3"/><text x="41.6386%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.06%)</title><rect x="41.4187%" y="133" width="0.0601%" height="15" fill="rgb(221,13,13)" fg:x="1378" fg:w="2"/><text x="41.6687%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.06%)</title><rect x="41.4187%" y="117" width="0.0601%" height="15" fill="rgb(238,131,9)" fg:x="1378" fg:w="2"/><text x="41.6687%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.03%)</title><rect x="41.4488%" y="101" width="0.0301%" height="15" fill="rgb(211,50,8)" fg:x="1379" fg:w="1"/><text x="41.6988%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (10 samples, 0.30%)</title><rect x="41.2083%" y="165" width="0.3006%" height="15" fill="rgb(245,182,24)" fg:x="1371" fg:w="10"/><text x="41.4583%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="41.4788%" y="149" width="0.0301%" height="15" fill="rgb(242,14,37)" fg:x="1380" fg:w="1"/><text x="41.7288%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="41.4788%" y="133" width="0.0301%" height="15" fill="rgb(246,228,12)" fg:x="1380" fg:w="1"/><text x="41.7288%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (154 samples, 4.63%)</title><rect x="41.1782%" y="181" width="4.6288%" height="15" fill="rgb(213,55,15)" fg:x="1370" fg:w="154"/><text x="41.4282%" y="191.50">libsy..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (143 samples, 4.30%)</title><rect x="41.5089%" y="165" width="4.2982%" height="15" fill="rgb(209,9,3)" fg:x="1381" fg:w="143"/><text x="41.7589%" y="175.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.03%)</title><rect x="45.8070%" y="181" width="0.0301%" height="15" fill="rgb(230,59,30)" fg:x="1524" fg:w="1"/><text x="46.0570%" y="191.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (158 samples, 4.75%)</title><rect x="41.1181%" y="229" width="4.7490%" height="15" fill="rgb(209,121,21)" fg:x="1368" fg:w="158"/><text x="41.3681%" y="239.50">burst`..</text></g><g><title>burst`alloc::raw_vec::finish_grow (157 samples, 4.72%)</title><rect x="41.1482%" y="213" width="4.7190%" height="15" fill="rgb(220,109,13)" fg:x="1369" fg:w="157"/><text x="41.3982%" y="223.50">burst..</text></g><g><title>libsystem_malloc.dylib`realloc (156 samples, 4.69%)</title><rect x="41.1782%" y="197" width="4.6889%" height="15" fill="rgb(232,18,1)" fg:x="1370" fg:w="156"/><text x="41.4282%" y="207.50">libsy..</text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="45.8371%" y="181" width="0.0301%" height="15" fill="rgb(215,41,42)" fg:x="1525" fg:w="1"/><text x="46.0871%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="45.8371%" y="165" width="0.0301%" height="15" fill="rgb(224,123,36)" fg:x="1525" fg:w="1"/><text x="46.0871%" y="175.50"></text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 0.33%)</title><rect x="46.2278%" y="213" width="0.3306%" height="15" fill="rgb(240,125,3)" fg:x="1538" fg:w="11"/><text x="46.4778%" y="223.50"></text></g><g><title>burst`DYLD-STUB$$memcmp (11 samples, 0.33%)</title><rect x="46.5585%" y="213" width="0.3306%" height="15" fill="rgb(205,98,50)" fg:x="1549" fg:w="11"/><text x="46.8085%" y="223.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="46.8891%" y="213" width="0.0301%" height="15" fill="rgb(205,185,37)" fg:x="1560" fg:w="1"/><text x="47.1391%" y="223.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="46.8891%" y="197" width="0.0301%" height="15" fill="rgb(238,207,15)" fg:x="1560" fg:w="1"/><text x="47.1391%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.03%)</title><rect x="46.8891%" y="181" width="0.0301%" height="15" fill="rgb(213,199,42)" fg:x="1560" fg:w="1"/><text x="47.1391%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.03%)</title><rect x="46.8891%" y="165" width="0.0301%" height="15" fill="rgb(235,201,11)" fg:x="1560" fg:w="1"/><text x="47.1391%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="46.8891%" y="149" width="0.0301%" height="15" fill="rgb(207,46,11)" fg:x="1560" fg:w="1"/><text x="47.1391%" y="159.50"></text></g><g><title>burst`alloc::vec::Vec&lt;T,A&gt;::dedup_by (12 samples, 0.36%)</title><rect x="46.9191%" y="213" width="0.3607%" height="15" fill="rgb(241,35,35)" fg:x="1561" fg:w="12"/><text x="47.1691%" y="223.50"></text></g><g><title>burst`DYLD-STUB$$memcmp (7 samples, 0.21%)</title><rect x="49.1734%" y="197" width="0.2104%" height="15" fill="rgb(243,32,47)" fg:x="1636" fg:w="7"/><text x="49.4234%" y="207.50"></text></g><g><title>burst`core::slice::_&lt;impl [T]&gt;::sort_unstable::_{{closure}} (4 samples, 0.12%)</title><rect x="49.3838%" y="197" width="0.1202%" height="15" fill="rgb(247,202,23)" fg:x="1643" fg:w="4"/><text x="49.6338%" y="207.50"></text></g><g><title>burst`DYLD-STUB$$memcmp (9 samples, 0.27%)</title><rect x="50.8566%" y="181" width="0.2705%" height="15" fill="rgb(219,102,11)" fg:x="1692" fg:w="9"/><text x="51.1066%" y="191.50"></text></g><g><title>burst`core::slice::_&lt;impl [T]&gt;::sort_unstable::_{{closure}} (4 samples, 0.12%)</title><rect x="51.1271%" y="181" width="0.1202%" height="15" fill="rgb(243,110,44)" fg:x="1701" fg:w="4"/><text x="51.3771%" y="191.50"></text></g><g><title>burst`core::slice::_&lt;impl [T]&gt;::sort_unstable::_{{closure}} (1 samples, 0.03%)</title><rect x="51.2474%" y="165" width="0.0301%" height="15" fill="rgb(222,74,54)" fg:x="1705" fg:w="1"/><text x="51.4974%" y="175.50"></text></g><g><title>burst`core::slice::sort::partial_insertion_sort (2 samples, 0.06%)</title><rect x="51.2474%" y="181" width="0.0601%" height="15" fill="rgb(216,99,12)" fg:x="1705" fg:w="2"/><text x="51.4974%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.03%)</title><rect x="51.2774%" y="165" width="0.0301%" height="15" fill="rgb(226,22,26)" fg:x="1706" fg:w="1"/><text x="51.5274%" y="175.50"></text></g><g><title>burst`DYLD-STUB$$memcmp (5 samples, 0.15%)</title><rect x="52.6601%" y="165" width="0.1503%" height="15" fill="rgb(217,163,10)" fg:x="1752" fg:w="5"/><text x="52.9101%" y="175.50"></text></g><g><title>burst`core::slice::_&lt;impl [T]&gt;::sort_unstable::_{{closure}} (10 samples, 0.30%)</title><rect x="52.8103%" y="165" width="0.3006%" height="15" fill="rgb(213,25,53)" fg:x="1757" fg:w="10"/><text x="53.0603%" y="175.50"></text></g><g><title>burst`core::slice::sort::partial_insertion_sort (2 samples, 0.06%)</title><rect x="53.1109%" y="165" width="0.0601%" height="15" fill="rgb(252,105,26)" fg:x="1767" fg:w="2"/><text x="53.3609%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.06%)</title><rect x="53.1109%" y="149" width="0.0601%" height="15" fill="rgb(220,39,43)" fg:x="1767" fg:w="2"/><text x="53.3609%" y="159.50"></text></g><g><title>burst`DYLD-STUB$$memcmp (9 samples, 0.27%)</title><rect x="54.8242%" y="149" width="0.2705%" height="15" fill="rgb(229,68,48)" fg:x="1824" fg:w="9"/><text x="55.0742%" y="159.50"></text></g><g><title>burst`core::slice::_&lt;impl [T]&gt;::sort_unstable::_{{closure}} (17 samples, 0.51%)</title><rect x="55.0947%" y="149" width="0.5110%" height="15" fill="rgb(252,8,32)" fg:x="1833" fg:w="17"/><text x="55.3447%" y="159.50"></text></g><g><title>burst`core::slice::sort::partial_insertion_sort (1 samples, 0.03%)</title><rect x="55.6057%" y="149" width="0.0301%" height="15" fill="rgb(223,20,43)" fg:x="1850" fg:w="1"/><text x="55.8557%" y="159.50"></text></g><g><title>burst`core::slice::_&lt;impl [T]&gt;::sort_unstable::_{{closure}} (1 samples, 0.03%)</title><rect x="55.6057%" y="133" width="0.0301%" height="15" fill="rgb(229,81,49)" fg:x="1850" fg:w="1"/><text x="55.8557%" y="143.50"></text></g><g><title>burst`DYLD-STUB$$memcmp (7 samples, 0.21%)</title><rect x="56.6576%" y="133" width="0.2104%" height="15" fill="rgb(236,28,36)" fg:x="1885" fg:w="7"/><text x="56.9076%" y="143.50"></text></g><g><title>burst`core::slice::_&lt;impl [T]&gt;::sort_unstable::_{{closure}} (17 samples, 0.51%)</title><rect x="56.8680%" y="133" width="0.5110%" height="15" fill="rgb(249,185,26)" fg:x="1892" fg:w="17"/><text x="57.1180%" y="143.50"></text></g><g><title>burst`DYLD-STUB$$memcmp (3 samples, 0.09%)</title><rect x="58.1304%" y="117" width="0.0902%" height="15" fill="rgb(249,174,33)" fg:x="1934" fg:w="3"/><text x="58.3804%" y="127.50"></text></g><g><title>burst`core::slice::_&lt;impl [T]&gt;::sort_unstable::_{{closure}} (6 samples, 0.18%)</title><rect x="58.2206%" y="117" width="0.1803%" height="15" fill="rgb(233,201,37)" fg:x="1937" fg:w="6"/><text x="58.4706%" y="127.50"></text></g><g><title>burst`DYLD-STUB$$memcmp (1 samples, 0.03%)</title><rect x="58.7616%" y="101" width="0.0301%" height="15" fill="rgb(221,78,26)" fg:x="1955" fg:w="1"/><text x="59.0116%" y="111.50"></text></g><g><title>burst`core::slice::_&lt;impl [T]&gt;::sort_unstable::_{{closure}} (7 samples, 0.21%)</title><rect x="58.7917%" y="101" width="0.2104%" height="15" fill="rgb(250,127,30)" fg:x="1956" fg:w="7"/><text x="59.0417%" y="111.50"></text></g><g><title>burst`DYLD-STUB$$memcmp (1 samples, 0.03%)</title><rect x="59.5732%" y="85" width="0.0301%" height="15" fill="rgb(230,49,44)" fg:x="1982" fg:w="1"/><text x="59.8232%" y="95.50"></text></g><g><title>burst`core::slice::_&lt;impl [T]&gt;::sort_unstable::_{{closure}} (7 samples, 0.21%)</title><rect x="59.6032%" y="85" width="0.2104%" height="15" fill="rgb(229,67,23)" fg:x="1983" fg:w="7"/><text x="59.8532%" y="95.50"></text></g><g><title>burst`DYLD-STUB$$memcmp (1 samples, 0.03%)</title><rect x="59.9639%" y="69" width="0.0301%" height="15" fill="rgb(249,83,47)" fg:x="1995" fg:w="1"/><text x="60.2139%" y="79.50"></text></g><g><title>burst`core::slice::_&lt;impl [T]&gt;::sort_unstable::_{{closure}} (5 samples, 0.15%)</title><rect x="59.9940%" y="69" width="0.1503%" height="15" fill="rgb(215,43,3)" fg:x="1996" fg:w="5"/><text x="60.2440%" y="79.50"></text></g><g><title>burst`core::slice::_&lt;impl [T]&gt;::sort_unstable::_{{closure}} (4 samples, 0.12%)</title><rect x="60.2645%" y="53" width="0.1202%" height="15" fill="rgb(238,154,13)" fg:x="2005" fg:w="4"/><text x="60.5145%" y="63.50"></text></g><g><title>burst`DYLD-STUB$$memcmp (1 samples, 0.03%)</title><rect x="60.3847%" y="37" width="0.0301%" height="15" fill="rgb(219,56,2)" fg:x="2009" fg:w="1"/><text x="60.6347%" y="47.50"></text></g><g><title>burst`core::slice::sort::recurse (3 samples, 0.09%)</title><rect x="60.3847%" y="53" width="0.0902%" height="15" fill="rgb(233,0,4)" fg:x="2009" fg:w="3"/><text x="60.6347%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.06%)</title><rect x="60.4148%" y="37" width="0.0601%" height="15" fill="rgb(235,30,7)" fg:x="2010" fg:w="2"/><text x="60.6648%" y="47.50"></text></g><g><title>burst`core::slice::sort::recurse (16 samples, 0.48%)</title><rect x="60.1443%" y="69" width="0.4809%" height="15" fill="rgb(250,79,13)" fg:x="2001" fg:w="16"/><text x="60.3943%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (5 samples, 0.15%)</title><rect x="60.4749%" y="53" width="0.1503%" height="15" fill="rgb(211,146,34)" fg:x="2012" fg:w="5"/><text x="60.7249%" y="63.50"></text></g><g><title>burst`core::slice::sort::recurse (35 samples, 1.05%)</title><rect x="59.8136%" y="85" width="1.0520%" height="15" fill="rgb(228,22,38)" fg:x="1990" fg:w="35"/><text x="60.0636%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (8 samples, 0.24%)</title><rect x="60.6252%" y="69" width="0.2405%" height="15" fill="rgb(235,168,5)" fg:x="2017" fg:w="8"/><text x="60.8752%" y="79.50"></text></g><g><title>burst`core::slice::sort::recurse (90 samples, 2.71%)</title><rect x="59.0021%" y="101" width="2.7051%" height="15" fill="rgb(221,155,16)" fg:x="1963" fg:w="90"/><text x="59.2521%" y="111.50">bu..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (28 samples, 0.84%)</title><rect x="60.8656%" y="85" width="0.8416%" height="15" fill="rgb(215,215,53)" fg:x="2025" fg:w="28"/><text x="61.1156%" y="95.50"></text></g><g><title>burst`core::slice::sort::recurse (135 samples, 4.06%)</title><rect x="58.4010%" y="117" width="4.0577%" height="15" fill="rgb(223,4,10)" fg:x="1943" fg:w="135"/><text x="58.6510%" y="127.50">burs..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (25 samples, 0.75%)</title><rect x="61.7072%" y="101" width="0.7514%" height="15" fill="rgb(234,103,6)" fg:x="2053" fg:w="25"/><text x="61.9572%" y="111.50"></text></g><g><title>burst`core::slice::sort::recurse (207 samples, 6.22%)</title><rect x="57.3790%" y="133" width="6.2218%" height="15" fill="rgb(227,97,0)" fg:x="1909" fg:w="207"/><text x="57.6290%" y="143.50">burst`co..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (38 samples, 1.14%)</title><rect x="62.4587%" y="117" width="1.1422%" height="15" fill="rgb(234,150,53)" fg:x="2078" fg:w="38"/><text x="62.7087%" y="127.50"></text></g><g><title>burst`core::slice::sort::recurse (322 samples, 9.68%)</title><rect x="55.6357%" y="149" width="9.6784%" height="15" fill="rgb(228,201,54)" fg:x="1851" fg:w="322"/><text x="55.8857%" y="159.50">burst`core::sl..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (57 samples, 1.71%)</title><rect x="63.6008%" y="133" width="1.7133%" height="15" fill="rgb(222,22,37)" fg:x="2116" fg:w="57"/><text x="63.8508%" y="143.50"></text></g><g><title>burst`core::slice::sort::recurse (477 samples, 14.34%)</title><rect x="53.1710%" y="165" width="14.3372%" height="15" fill="rgb(237,53,32)" fg:x="1769" fg:w="477"/><text x="53.4210%" y="175.50">burst`core::slice::sor..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (73 samples, 2.19%)</title><rect x="65.3141%" y="149" width="2.1942%" height="15" fill="rgb(233,25,53)" fg:x="2173" fg:w="73"/><text x="65.5641%" y="159.50">l..</text></g><g><title>burst`core::slice::sort::recurse (616 samples, 18.52%)</title><rect x="51.3075%" y="181" width="18.5152%" height="15" fill="rgb(210,40,34)" fg:x="1707" fg:w="616"/><text x="51.5575%" y="191.50">burst`core::slice::sort::recu..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (77 samples, 2.31%)</title><rect x="67.5083%" y="165" width="2.3144%" height="15" fill="rgb(241,220,44)" fg:x="2246" fg:w="77"/><text x="67.7583%" y="175.50">l..</text></g><g><title>burst`core::slice::sort::recurse (733 samples, 22.03%)</title><rect x="49.5041%" y="197" width="22.0319%" height="15" fill="rgb(235,28,35)" fg:x="1647" fg:w="733"/><text x="49.7541%" y="207.50">burst`core::slice::sort::recurse</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (57 samples, 1.71%)</title><rect x="69.8227%" y="181" width="1.7133%" height="15" fill="rgb(210,56,17)" fg:x="2323" fg:w="57"/><text x="70.0727%" y="191.50"></text></g><g><title>burst`core::slice::sort::recurse (849 samples, 25.52%)</title><rect x="47.2798%" y="213" width="25.5185%" height="15" fill="rgb(224,130,29)" fg:x="1573" fg:w="849"/><text x="47.5298%" y="223.50">burst`core::slice::sort::recurse</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (42 samples, 1.26%)</title><rect x="71.5359%" y="197" width="1.2624%" height="15" fill="rgb(235,212,8)" fg:x="2380" fg:w="42"/><text x="71.7859%" y="207.50"></text></g><g><title>burst`hashbrown::map::make_hash (58 samples, 1.74%)</title><rect x="72.7983%" y="213" width="1.7433%" height="15" fill="rgb(223,33,50)" fg:x="2422" fg:w="58"/><text x="73.0483%" y="223.50"></text></g><g><title>burst`burst::ntfa::NTFABuilder::simplify::getblh (1,040 samples, 31.26%)</title><rect x="45.8671%" y="229" width="31.2594%" height="15" fill="rgb(219,149,13)" fg:x="1526" fg:w="1040"/><text x="46.1171%" y="239.50">burst`burst::ntfa::NTFABuilder::simplify::getblh</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (86 samples, 2.58%)</title><rect x="74.5416%" y="213" width="2.5849%" height="15" fill="rgb(250,156,29)" fg:x="2480" fg:w="86"/><text x="74.7916%" y="223.50">li..</text></g><g><title>burst`core::slice::sort::recurse (2 samples, 0.06%)</title><rect x="77.5473%" y="213" width="0.0601%" height="15" fill="rgb(216,193,19)" fg:x="2580" fg:w="2"/><text x="77.7973%" y="223.50"></text></g><g><title>burst`core::slice::sort::recurse (2 samples, 0.06%)</title><rect x="77.5473%" y="197" width="0.0601%" height="15" fill="rgb(216,135,14)" fg:x="2580" fg:w="2"/><text x="77.7973%" y="207.50"></text></g><g><title>burst`core::slice::sort::recurse (2 samples, 0.06%)</title><rect x="77.5473%" y="181" width="0.0601%" height="15" fill="rgb(241,47,5)" fg:x="2580" fg:w="2"/><text x="77.7973%" y="191.50"></text></g><g><title>burst`core::slice::sort::recurse (1 samples, 0.03%)</title><rect x="77.5774%" y="165" width="0.0301%" height="15" fill="rgb(233,42,35)" fg:x="2581" fg:w="1"/><text x="77.8274%" y="175.50"></text></g><g><title>burst`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.06%)</title><rect x="77.6075%" y="213" width="0.0601%" height="15" fill="rgb(231,13,6)" fg:x="2582" fg:w="2"/><text x="77.8575%" y="223.50"></text></g><g><title>burst`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.03%)</title><rect x="77.6375%" y="197" width="0.0301%" height="15" fill="rgb(207,181,40)" fg:x="2583" fg:w="1"/><text x="77.8875%" y="207.50"></text></g><g><title>burst`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="77.6375%" y="181" width="0.0301%" height="15" fill="rgb(254,173,49)" fg:x="2583" fg:w="1"/><text x="77.8875%" y="191.50"></text></g><g><title>burst`burst::ntfa::NTFABuilder::simplify::getmergedvl (19 samples, 0.57%)</title><rect x="77.1265%" y="229" width="0.5711%" height="15" fill="rgb(221,1,38)" fg:x="2566" fg:w="19"/><text x="77.3765%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="77.6676%" y="213" width="0.0301%" height="15" fill="rgb(206,124,46)" fg:x="2584" fg:w="1"/><text x="77.9176%" y="223.50"></text></g><g><title>burst`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.06%)</title><rect x="77.6976%" y="229" width="0.0601%" height="15" fill="rgb(249,21,11)" fg:x="2585" fg:w="2"/><text x="77.9476%" y="239.50"></text></g><g><title>burst`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.03%)</title><rect x="77.7277%" y="213" width="0.0301%" height="15" fill="rgb(222,201,40)" fg:x="2586" fg:w="1"/><text x="77.9777%" y="223.50"></text></g><g><title>burst`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="77.7277%" y="197" width="0.0301%" height="15" fill="rgb(235,61,29)" fg:x="2586" fg:w="1"/><text x="77.9777%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="77.7277%" y="181" width="0.0301%" height="15" fill="rgb(219,207,3)" fg:x="2586" fg:w="1"/><text x="77.9777%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="77.7277%" y="165" width="0.0301%" height="15" fill="rgb(222,56,46)" fg:x="2586" fg:w="1"/><text x="77.9777%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="77.7277%" y="149" width="0.0301%" height="15" fill="rgb(239,76,54)" fg:x="2586" fg:w="1"/><text x="77.9777%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="77.7277%" y="133" width="0.0301%" height="15" fill="rgb(231,124,27)" fg:x="2586" fg:w="1"/><text x="77.9777%" y="143.50"></text></g><g><title>burst`hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="77.7577%" y="229" width="0.0301%" height="15" fill="rgb(249,195,6)" fg:x="2587" fg:w="1"/><text x="78.0077%" y="239.50"></text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.18%)</title><rect x="94.4394%" y="213" width="0.1803%" height="15" fill="rgb(237,174,47)" fg:x="3142" fg:w="6"/><text x="94.6894%" y="223.50"></text></g><g><title>burst`core::hash::Hash::hash_slice (1 samples, 0.03%)</title><rect x="94.6198%" y="213" width="0.0301%" height="15" fill="rgb(206,201,31)" fg:x="3148" fg:w="1"/><text x="94.8698%" y="223.50"></text></g><g><title>burst`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (564 samples, 16.95%)</title><rect x="77.7878%" y="229" width="16.9522%" height="15" fill="rgb(231,57,52)" fg:x="2588" fg:w="564"/><text x="78.0378%" y="239.50">burst`hashbrown::rustc_ent..</text></g><g><title>burst`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.09%)</title><rect x="94.6498%" y="213" width="0.0902%" height="15" fill="rgb(248,177,22)" fg:x="3149" fg:w="3"/><text x="94.8998%" y="223.50"></text></g><g><title>burst`hashbrown::map::make_hash (3 samples, 0.09%)</title><rect x="94.6498%" y="197" width="0.0902%" height="15" fill="rgb(215,211,37)" fg:x="3149" fg:w="3"/><text x="94.8998%" y="207.50"></text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.09%)</title><rect x="94.6498%" y="181" width="0.0902%" height="15" fill="rgb(241,128,51)" fg:x="3149" fg:w="3"/><text x="94.8998%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.06%)</title><rect x="94.7400%" y="229" width="0.0601%" height="15" fill="rgb(227,165,31)" fg:x="3152" fg:w="2"/><text x="94.9900%" y="239.50"></text></g><g><title>burst`burst::ntfa::NTFABuilder::simplify (2,216 samples, 66.61%)</title><rect x="30.1172%" y="245" width="66.6066%" height="15" fill="rgb(228,167,24)" fg:x="1002" fg:w="2216"/><text x="30.3672%" y="255.50">burst`burst::ntfa::NTFABuilder::simplify</text></g><g><title>libsystem_platform.dylib`_platform_memmove (64 samples, 1.92%)</title><rect x="94.8001%" y="229" width="1.9237%" height="15" fill="rgb(228,143,12)" fg:x="3154" fg:w="64"/><text x="95.0501%" y="239.50">l..</text></g><g><title>burst`hashbrown::map::make_hash (13 samples, 0.39%)</title><rect x="96.7238%" y="245" width="0.3907%" height="15" fill="rgb(249,149,8)" fg:x="3218" fg:w="13"/><text x="96.9738%" y="255.50"></text></g><g><title>burst`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (82 samples, 2.46%)</title><rect x="97.1145%" y="245" width="2.4647%" height="15" fill="rgb(243,35,44)" fg:x="3231" fg:w="82"/><text x="97.3645%" y="255.50">bu..</text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (8 samples, 0.24%)</title><rect x="99.5792%" y="245" width="0.2405%" height="15" fill="rgb(246,89,9)" fg:x="3313" fg:w="8"/><text x="99.8292%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.12%)</title><rect x="99.8197%" y="245" width="0.1202%" height="15" fill="rgb(233,213,13)" fg:x="3321" fg:w="4"/><text x="100.0697%" y="255.50"></text></g><g><title>all (3,327 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(233,141,41)" fg:x="0" fg:w="3327"/><text x="0.2500%" y="383.50"></text></g><g><title>dyld`start (3,327 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(239,167,4)" fg:x="0" fg:w="3327"/><text x="0.2500%" y="367.50">dyld`start</text></g><g><title>burst`main (3,327 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(209,217,16)" fg:x="0" fg:w="3327"/><text x="0.2500%" y="351.50">burst`main</text></g><g><title>burst`std::rt::lang_start_internal (3,327 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(219,88,35)" fg:x="0" fg:w="3327"/><text x="0.2500%" y="335.50">burst`std::rt::lang_start_internal</text></g><g><title>burst`std::rt::lang_start::_{{closure}} (3,327 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(220,193,23)" fg:x="0" fg:w="3327"/><text x="0.2500%" y="319.50">burst`std::rt::lang_start::_{{closure}}</text></g><g><title>burst`std::sys_common::backtrace::__rust_begin_short_backtrace (3,327 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(230,90,52)" fg:x="0" fg:w="3327"/><text x="0.2500%" y="303.50">burst`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>burst`burst::main (3,327 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(252,106,19)" fg:x="0" fg:w="3327"/><text x="0.2500%" y="287.50">burst`burst::main</text></g><g><title>burst`burst::synthesis::synthesize (3,326 samples, 99.97%)</title><rect x="0.0301%" y="261" width="99.9699%" height="15" fill="rgb(206,74,20)" fg:x="1" fg:w="3326"/><text x="0.2801%" y="271.50">burst`burst::synthesis::synthesize</text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.06%)</title><rect x="99.9399%" y="245" width="0.0601%" height="15" fill="rgb(230,138,44)" fg:x="3325" fg:w="2"/><text x="100.1899%" y="255.50"></text></g></svg></svg>