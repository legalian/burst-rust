<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="2783"><g><title>burst`burst::nftabuilder::_&lt;impl burst::ntfa::NTFABuilder&gt;::build_ntfa (1 samples, 0.04%)</title><rect x="0.0000%" y="197" width="0.0359%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.11%)</title><rect x="1.5451%" y="117" width="0.1078%" height="15" fill="rgb(217,0,24)" fg:x="43" fg:w="3"/><text x="1.7951%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.11%)</title><rect x="2.0122%" y="85" width="0.1078%" height="15" fill="rgb(221,193,54)" fg:x="56" fg:w="3"/><text x="2.2622%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.54%)</title><rect x="1.6529%" y="117" width="0.5390%" height="15" fill="rgb(248,212,6)" fg:x="46" fg:w="15"/><text x="1.9029%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.43%)</title><rect x="1.7607%" y="101" width="0.4312%" height="15" fill="rgb(208,68,35)" fg:x="49" fg:w="12"/><text x="2.0107%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.07%)</title><rect x="2.1200%" y="85" width="0.0719%" height="15" fill="rgb(232,128,0)" fg:x="59" fg:w="2"/><text x="2.3700%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.04%)</title><rect x="2.2637%" y="85" width="0.0359%" height="15" fill="rgb(207,160,47)" fg:x="63" fg:w="1"/><text x="2.5137%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (32 samples, 1.15%)</title><rect x="1.2576%" y="133" width="1.1498%" height="15" fill="rgb(228,23,34)" fg:x="35" fg:w="32"/><text x="1.5076%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.22%)</title><rect x="2.1919%" y="117" width="0.2156%" height="15" fill="rgb(218,30,26)" fg:x="61" fg:w="6"/><text x="2.4419%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.18%)</title><rect x="2.2278%" y="101" width="0.1797%" height="15" fill="rgb(220,122,19)" fg:x="62" fg:w="5"/><text x="2.4778%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.11%)</title><rect x="2.2997%" y="85" width="0.1078%" height="15" fill="rgb(250,228,42)" fg:x="64" fg:w="3"/><text x="2.5497%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.07%)</title><rect x="2.3356%" y="69" width="0.0719%" height="15" fill="rgb(240,193,28)" fg:x="65" fg:w="2"/><text x="2.5856%" y="79.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (35 samples, 1.26%)</title><rect x="1.2217%" y="149" width="1.2576%" height="15" fill="rgb(216,20,37)" fg:x="34" fg:w="35"/><text x="1.4717%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.07%)</title><rect x="2.4075%" y="133" width="0.0719%" height="15" fill="rgb(206,188,39)" fg:x="67" fg:w="2"/><text x="2.6575%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.14%)</title><rect x="5.5695%" y="85" width="0.1437%" height="15" fill="rgb(217,207,13)" fg:x="155" fg:w="4"/><text x="5.8195%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (15 samples, 0.54%)</title><rect x="7.4380%" y="53" width="0.5390%" height="15" fill="rgb(231,73,38)" fg:x="207" fg:w="15"/><text x="7.6880%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (85 samples, 3.05%)</title><rect x="6.1804%" y="69" width="3.0543%" height="15" fill="rgb(225,20,46)" fg:x="172" fg:w="85"/><text x="6.4304%" y="79.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (35 samples, 1.26%)</title><rect x="7.9770%" y="53" width="1.2576%" height="15" fill="rgb(210,31,41)" fg:x="222" fg:w="35"/><text x="8.2270%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.07%)</title><rect x="9.1628%" y="37" width="0.0719%" height="15" fill="rgb(221,200,47)" fg:x="255" fg:w="2"/><text x="9.4128%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (128 samples, 4.60%)</title><rect x="4.8149%" y="101" width="4.5994%" height="15" fill="rgb(226,26,5)" fg:x="134" fg:w="128"/><text x="5.0649%" y="111.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (103 samples, 3.70%)</title><rect x="5.7133%" y="85" width="3.7010%" height="15" fill="rgb(249,33,26)" fg:x="159" fg:w="103"/><text x="5.9633%" y="95.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.18%)</title><rect x="9.2346%" y="69" width="0.1797%" height="15" fill="rgb(235,183,28)" fg:x="257" fg:w="5"/><text x="9.4846%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.14%)</title><rect x="9.4143%" y="101" width="0.1437%" height="15" fill="rgb(221,5,38)" fg:x="262" fg:w="4"/><text x="9.6643%" y="111.50"></text></g><g><title>burst`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (155 samples, 5.57%)</title><rect x="4.0244%" y="117" width="5.5695%" height="15" fill="rgb(247,18,42)" fg:x="112" fg:w="155"/><text x="4.2744%" y="127.50">burst`&lt;..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.04%)</title><rect x="9.5580%" y="101" width="0.0359%" height="15" fill="rgb(241,131,45)" fg:x="266" fg:w="1"/><text x="9.8080%" y="111.50"></text></g><g><title>burst`DYLD-STUB$$malloc (4 samples, 0.14%)</title><rect x="9.5940%" y="117" width="0.1437%" height="15" fill="rgb(249,31,29)" fg:x="267" fg:w="4"/><text x="9.8440%" y="127.50"></text></g><g><title>burst`__rdl_alloc (3 samples, 0.11%)</title><rect x="9.7377%" y="117" width="0.1078%" height="15" fill="rgb(225,111,53)" fg:x="271" fg:w="3"/><text x="9.9877%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.43%)</title><rect x="12.1092%" y="101" width="0.4312%" height="15" fill="rgb(238,160,17)" fg:x="337" fg:w="12"/><text x="12.3592%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (40 samples, 1.44%)</title><rect x="16.2415%" y="69" width="1.4373%" height="15" fill="rgb(214,148,48)" fg:x="452" fg:w="40"/><text x="16.4915%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (128 samples, 4.60%)</title><rect x="13.9059%" y="85" width="4.5994%" height="15" fill="rgb(232,36,49)" fg:x="387" fg:w="128"/><text x="14.1559%" y="95.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (23 samples, 0.83%)</title><rect x="17.6788%" y="69" width="0.8264%" height="15" fill="rgb(209,103,24)" fg:x="492" fg:w="23"/><text x="17.9288%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (249 samples, 8.95%)</title><rect x="9.8455%" y="117" width="8.9472%" height="15" fill="rgb(229,88,8)" fg:x="274" fg:w="249"/><text x="10.0955%" y="127.50">libsystem_mal..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (174 samples, 6.25%)</title><rect x="12.5404%" y="101" width="6.2522%" height="15" fill="rgb(213,181,19)" fg:x="349" fg:w="174"/><text x="12.7904%" y="111.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.29%)</title><rect x="18.5052%" y="85" width="0.2875%" height="15" fill="rgb(254,191,54)" fg:x="515" fg:w="8"/><text x="18.7552%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (12 samples, 0.43%)</title><rect x="18.7927%" y="117" width="0.4312%" height="15" fill="rgb(241,83,37)" fg:x="523" fg:w="12"/><text x="19.0427%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.07%)</title><rect x="19.2239%" y="117" width="0.0719%" height="15" fill="rgb(233,36,39)" fg:x="535" fg:w="2"/><text x="19.4739%" y="127.50"></text></g><g><title>burst`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (485 samples, 17.43%)</title><rect x="2.5153%" y="133" width="17.4272%" height="15" fill="rgb(226,3,54)" fg:x="70" fg:w="485"/><text x="2.7653%" y="143.50">burst`&lt;core::iter::adapters..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.65%)</title><rect x="19.2957%" y="117" width="0.6468%" height="15" fill="rgb(245,192,40)" fg:x="537" fg:w="18"/><text x="19.5457%" y="127.50"></text></g><g><title>burst`DYLD-STUB$$malloc (10 samples, 0.36%)</title><rect x="19.9425%" y="133" width="0.3593%" height="15" fill="rgb(238,167,29)" fg:x="555" fg:w="10"/><text x="20.1925%" y="143.50"></text></g><g><title>burst`__rdl_alloc (10 samples, 0.36%)</title><rect x="20.3018%" y="133" width="0.3593%" height="15" fill="rgb(232,182,51)" fg:x="565" fg:w="10"/><text x="20.5518%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.25%)</title><rect x="21.3079%" y="117" width="0.2515%" height="15" fill="rgb(231,60,39)" fg:x="593" fg:w="7"/><text x="21.5579%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.14%)</title><rect x="21.4157%" y="101" width="0.1437%" height="15" fill="rgb(208,69,12)" fg:x="596" fg:w="4"/><text x="21.6657%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.14%)</title><rect x="21.4157%" y="85" width="0.1437%" height="15" fill="rgb(235,93,37)" fg:x="596" fg:w="4"/><text x="21.6657%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.04%)</title><rect x="21.5954%" y="101" width="0.0359%" height="15" fill="rgb(213,116,39)" fg:x="601" fg:w="1"/><text x="21.8454%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (7 samples, 0.25%)</title><rect x="21.6313%" y="101" width="0.2515%" height="15" fill="rgb(222,207,29)" fg:x="602" fg:w="7"/><text x="21.8813%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (4 samples, 0.14%)</title><rect x="21.7391%" y="85" width="0.1437%" height="15" fill="rgb(206,96,30)" fg:x="605" fg:w="4"/><text x="21.9891%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.04%)</title><rect x="21.8469%" y="69" width="0.0359%" height="15" fill="rgb(218,138,4)" fg:x="608" fg:w="1"/><text x="22.0969%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.11%)</title><rect x="22.0985%" y="85" width="0.1078%" height="15" fill="rgb(250,191,14)" fg:x="615" fg:w="3"/><text x="22.3485%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (53 samples, 1.90%)</title><rect x="20.6612%" y="133" width="1.9044%" height="15" fill="rgb(239,60,40)" fg:x="575" fg:w="53"/><text x="20.9112%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (28 samples, 1.01%)</title><rect x="21.5595%" y="117" width="1.0061%" height="15" fill="rgb(206,27,48)" fg:x="600" fg:w="28"/><text x="21.8095%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (19 samples, 0.68%)</title><rect x="21.8829%" y="101" width="0.6827%" height="15" fill="rgb(225,35,8)" fg:x="609" fg:w="19"/><text x="22.1329%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (10 samples, 0.36%)</title><rect x="22.2063%" y="85" width="0.3593%" height="15" fill="rgb(250,213,24)" fg:x="618" fg:w="10"/><text x="22.4563%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.11%)</title><rect x="22.4578%" y="69" width="0.1078%" height="15" fill="rgb(247,123,22)" fg:x="625" fg:w="3"/><text x="22.7078%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.04%)</title><rect x="22.5656%" y="133" width="0.0359%" height="15" fill="rgb(231,138,38)" fg:x="628" fg:w="1"/><text x="22.8156%" y="143.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (605 samples, 21.74%)</title><rect x="2.4793%" y="149" width="21.7391%" height="15" fill="rgb(231,145,46)" fg:x="69" fg:w="605"/><text x="2.7293%" y="159.50">burst`&lt;alloc::vec::Vec&lt;T&gt; as alloc..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (45 samples, 1.62%)</title><rect x="22.6015%" y="133" width="1.6170%" height="15" fill="rgb(251,118,11)" fg:x="629" fg:w="45"/><text x="22.8515%" y="143.50"></text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.18%)</title><rect x="24.2185%" y="149" width="0.1797%" height="15" fill="rgb(217,147,25)" fg:x="674" fg:w="5"/><text x="24.4685%" y="159.50"></text></g><g><title>burst`DYLD-STUB$$free (3 samples, 0.11%)</title><rect x="24.3981%" y="149" width="0.1078%" height="15" fill="rgb(247,81,37)" fg:x="679" fg:w="3"/><text x="24.6481%" y="159.50"></text></g><g><title>burst`DYLD-STUB$$memcmp (4 samples, 0.14%)</title><rect x="24.5059%" y="149" width="0.1437%" height="15" fill="rgb(209,12,38)" fg:x="682" fg:w="4"/><text x="24.7559%" y="159.50"></text></g><g><title>burst`__rdl_alloc (1 samples, 0.04%)</title><rect x="24.6497%" y="149" width="0.0359%" height="15" fill="rgb(227,1,9)" fg:x="686" fg:w="1"/><text x="24.8997%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.07%)</title><rect x="28.8178%" y="101" width="0.0719%" height="15" fill="rgb(248,47,43)" fg:x="802" fg:w="2"/><text x="29.0678%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.11%)</title><rect x="29.3568%" y="69" width="0.1078%" height="15" fill="rgb(221,10,30)" fg:x="817" fg:w="3"/><text x="29.6068%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (25 samples, 0.90%)</title><rect x="28.8897%" y="101" width="0.8983%" height="15" fill="rgb(210,229,1)" fg:x="804" fg:w="25"/><text x="29.1397%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (22 samples, 0.79%)</title><rect x="28.9975%" y="85" width="0.7905%" height="15" fill="rgb(222,148,37)" fg:x="807" fg:w="22"/><text x="29.2475%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (9 samples, 0.32%)</title><rect x="29.4646%" y="69" width="0.3234%" height="15" fill="rgb(234,67,33)" fg:x="820" fg:w="9"/><text x="29.7146%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.04%)</title><rect x="29.7521%" y="53" width="0.0359%" height="15" fill="rgb(247,98,35)" fg:x="828" fg:w="1"/><text x="30.0021%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.04%)</title><rect x="29.7880%" y="85" width="0.0359%" height="15" fill="rgb(247,138,52)" fg:x="829" fg:w="1"/><text x="30.0380%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.04%)</title><rect x="29.7880%" y="69" width="0.0359%" height="15" fill="rgb(213,79,30)" fg:x="829" fg:w="1"/><text x="30.0380%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (40 samples, 1.44%)</title><rect x="28.4226%" y="117" width="1.4373%" height="15" fill="rgb(246,177,23)" fg:x="791" fg:w="40"/><text x="28.6726%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.07%)</title><rect x="29.7880%" y="101" width="0.0719%" height="15" fill="rgb(230,62,27)" fg:x="829" fg:w="2"/><text x="30.0380%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.04%)</title><rect x="29.8239%" y="85" width="0.0359%" height="15" fill="rgb(216,154,8)" fg:x="830" fg:w="1"/><text x="30.0739%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.11%)</title><rect x="29.8599%" y="117" width="0.1078%" height="15" fill="rgb(244,35,45)" fg:x="831" fg:w="3"/><text x="30.1099%" y="127.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (55 samples, 1.98%)</title><rect x="28.0273%" y="133" width="1.9763%" height="15" fill="rgb(251,115,12)" fg:x="780" fg:w="55"/><text x="28.2773%" y="143.50">b..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.04%)</title><rect x="29.9677%" y="117" width="0.0359%" height="15" fill="rgb(240,54,50)" fg:x="834" fg:w="1"/><text x="30.2177%" y="127.50"></text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (484 samples, 17.39%)</title><rect x="30.0036%" y="133" width="17.3913%" height="15" fill="rgb(233,84,52)" fg:x="835" fg:w="484"/><text x="30.2536%" y="143.50">burst`&lt;std::collections::ha..</text></g><g><title>burst`DYLD-STUB$$memcmp (6 samples, 0.22%)</title><rect x="47.3949%" y="133" width="0.2156%" height="15" fill="rgb(207,117,47)" fg:x="1319" fg:w="6"/><text x="47.6449%" y="143.50"></text></g><g><title>burst`burst::ntfa::NTFABuilder::check_requires_further (1 samples, 0.04%)</title><rect x="47.6105%" y="133" width="0.0359%" height="15" fill="rgb(249,43,39)" fg:x="1325" fg:w="1"/><text x="47.8605%" y="143.50"></text></g><g><title>burst`core::slice::sort::partial_insertion_sort (55 samples, 1.98%)</title><rect x="50.9163%" y="117" width="1.9763%" height="15" fill="rgb(209,38,44)" fg:x="1417" fg:w="55"/><text x="51.1663%" y="127.50">b..</text></g><g><title>burst`core::slice::sort::partial_insertion_sort (13 samples, 0.47%)</title><rect x="54.1502%" y="101" width="0.4671%" height="15" fill="rgb(236,212,23)" fg:x="1507" fg:w="13"/><text x="54.4002%" y="111.50"></text></g><g><title>burst`core::slice::sort::recurse (12 samples, 0.43%)</title><rect x="54.6173%" y="101" width="0.4312%" height="15" fill="rgb(242,79,21)" fg:x="1520" fg:w="12"/><text x="54.8673%" y="111.50"></text></g><g><title>burst`core::slice::sort::shift_tail (3 samples, 0.11%)</title><rect x="54.9407%" y="85" width="0.1078%" height="15" fill="rgb(211,96,35)" fg:x="1529" fg:w="3"/><text x="55.1907%" y="95.50"></text></g><g><title>burst`core::slice::sort::recurse (91 samples, 3.27%)</title><rect x="52.8926%" y="117" width="3.2699%" height="15" fill="rgb(253,215,40)" fg:x="1472" fg:w="91"/><text x="53.1426%" y="127.50">bur..</text></g><g><title>burst`core::slice::sort::shift_tail (31 samples, 1.11%)</title><rect x="55.0485%" y="101" width="1.1139%" height="15" fill="rgb(211,81,21)" fg:x="1532" fg:w="31"/><text x="55.2985%" y="111.50"></text></g><g><title>burst`core::slice::sort::recurse (347 samples, 12.47%)</title><rect x="47.6464%" y="133" width="12.4686%" height="15" fill="rgb(208,190,38)" fg:x="1326" fg:w="347"/><text x="47.8964%" y="143.50">burst`core::slice::..</text></g><g><title>burst`core::slice::sort::shift_tail (110 samples, 3.95%)</title><rect x="56.1624%" y="117" width="3.9526%" height="15" fill="rgb(235,213,38)" fg:x="1563" fg:w="110"/><text x="56.4124%" y="127.50">burs..</text></g><g><title>burst`core::slice::sort::shift_tail (68 samples, 2.44%)</title><rect x="60.1150%" y="133" width="2.4434%" height="15" fill="rgb(237,122,38)" fg:x="1673" fg:w="68"/><text x="60.3650%" y="143.50">bu..</text></g><g><title>burst`hashbrown::map::make_hash (4 samples, 0.14%)</title><rect x="66.7984%" y="117" width="0.1437%" height="15" fill="rgb(244,218,35)" fg:x="1859" fg:w="4"/><text x="67.0484%" y="127.50"></text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (96 samples, 3.45%)</title><rect x="67.0499%" y="101" width="3.4495%" height="15" fill="rgb(240,68,47)" fg:x="1866" fg:w="96"/><text x="67.2999%" y="111.50">bur..</text></g><g><title>burst`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (226 samples, 8.12%)</title><rect x="62.5584%" y="133" width="8.1207%" height="15" fill="rgb(210,16,53)" fg:x="1741" fg:w="226"/><text x="62.8084%" y="143.50">burst`hashb..</text></g><g><title>burst`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (104 samples, 3.74%)</title><rect x="66.9421%" y="117" width="3.7370%" height="15" fill="rgb(235,124,12)" fg:x="1863" fg:w="104"/><text x="67.1921%" y="127.50">burs..</text></g><g><title>burst`hashbrown::map::make_hash (5 samples, 0.18%)</title><rect x="70.4995%" y="101" width="0.1797%" height="15" fill="rgb(224,169,11)" fg:x="1962" fg:w="5"/><text x="70.7495%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.04%)</title><rect x="70.6791%" y="133" width="0.0359%" height="15" fill="rgb(250,166,2)" fg:x="1967" fg:w="1"/><text x="70.9291%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (69 samples, 2.48%)</title><rect x="75.2425%" y="117" width="2.4793%" height="15" fill="rgb(242,216,29)" fg:x="2094" fg:w="69"/><text x="75.4925%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.04%)</title><rect x="77.7219%" y="117" width="0.0359%" height="15" fill="rgb(230,116,27)" fg:x="2163" fg:w="1"/><text x="77.9719%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (200 samples, 7.19%)</title><rect x="70.7151%" y="133" width="7.1865%" height="15" fill="rgb(228,99,48)" fg:x="1968" fg:w="200"/><text x="70.9651%" y="143.50">libsystem_..</text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.14%)</title><rect x="77.7578%" y="117" width="0.1437%" height="15" fill="rgb(253,11,6)" fg:x="2164" fg:w="4"/><text x="78.0078%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (4 samples, 0.14%)</title><rect x="77.7578%" y="101" width="0.1437%" height="15" fill="rgb(247,143,39)" fg:x="2164" fg:w="4"/><text x="78.0078%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.04%)</title><rect x="77.9734%" y="117" width="0.0359%" height="15" fill="rgb(236,97,10)" fg:x="2170" fg:w="1"/><text x="78.2234%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (1 samples, 0.04%)</title><rect x="78.0093%" y="117" width="0.0359%" height="15" fill="rgb(233,208,19)" fg:x="2171" fg:w="1"/><text x="78.2593%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (6 samples, 0.22%)</title><rect x="77.9015%" y="133" width="0.2156%" height="15" fill="rgb(216,164,2)" fg:x="2168" fg:w="6"/><text x="78.1515%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.07%)</title><rect x="78.0453%" y="117" width="0.0719%" height="15" fill="rgb(220,129,5)" fg:x="2172" fg:w="2"/><text x="78.2953%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.11%)</title><rect x="78.2968%" y="101" width="0.1078%" height="15" fill="rgb(242,17,10)" fg:x="2179" fg:w="3"/><text x="78.5468%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.32%)</title><rect x="78.1171%" y="133" width="0.3234%" height="15" fill="rgb(242,107,0)" fg:x="2174" fg:w="9"/><text x="78.3671%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.25%)</title><rect x="78.1890%" y="117" width="0.2515%" height="15" fill="rgb(251,28,31)" fg:x="2176" fg:w="7"/><text x="78.4390%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.04%)</title><rect x="78.4046%" y="101" width="0.0359%" height="15" fill="rgb(233,223,10)" fg:x="2182" fg:w="1"/><text x="78.6546%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.32%)</title><rect x="78.4405%" y="133" width="0.3234%" height="15" fill="rgb(215,21,27)" fg:x="2183" fg:w="9"/><text x="78.6905%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (89 samples, 3.20%)</title><rect x="78.7639%" y="133" width="3.1980%" height="15" fill="rgb(232,23,21)" fg:x="2192" fg:w="89"/><text x="79.0139%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (15 samples, 0.54%)</title><rect x="81.9619%" y="133" width="0.5390%" height="15" fill="rgb(244,5,23)" fg:x="2281" fg:w="15"/><text x="82.2119%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1 samples, 0.04%)</title><rect x="82.5009%" y="133" width="0.0359%" height="15" fill="rgb(226,81,46)" fg:x="2296" fg:w="1"/><text x="82.7509%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.04%)</title><rect x="82.5368%" y="133" width="0.0359%" height="15" fill="rgb(247,70,30)" fg:x="2297" fg:w="1"/><text x="82.7868%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (174 samples, 6.25%)</title><rect x="82.5728%" y="133" width="6.2522%" height="15" fill="rgb(212,68,19)" fg:x="2298" fg:w="174"/><text x="82.8228%" y="143.50">libsyste..</text></g><g><title>burst`burst::ntfa::NTFABuilder::get_ntfa (1,790 samples, 64.32%)</title><rect x="24.6856%" y="149" width="64.3191%" height="15" fill="rgb(240,187,13)" fg:x="687" fg:w="1790"/><text x="24.9356%" y="159.50">burst`burst::ntfa::NTFABuilder::get_ntfa</text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.18%)</title><rect x="88.8250%" y="133" width="0.1797%" height="15" fill="rgb(223,113,26)" fg:x="2472" fg:w="5"/><text x="89.0750%" y="143.50"></text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.25%)</title><rect x="89.1125%" y="101" width="0.2515%" height="15" fill="rgb(206,192,2)" fg:x="2480" fg:w="7"/><text x="89.3625%" y="111.50"></text></g><g><title>burst`hashbrown::raw::RawTable&lt;T,A&gt;::insert (9 samples, 0.32%)</title><rect x="89.0765%" y="133" width="0.3234%" height="15" fill="rgb(241,108,4)" fg:x="2479" fg:w="9"/><text x="89.3265%" y="143.50"></text></g><g><title>burst`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (9 samples, 0.32%)</title><rect x="89.0765%" y="117" width="0.3234%" height="15" fill="rgb(247,173,49)" fg:x="2479" fg:w="9"/><text x="89.3265%" y="127.50"></text></g><g><title>burst`hashbrown::map::make_hash (1 samples, 0.04%)</title><rect x="89.3640%" y="101" width="0.0359%" height="15" fill="rgb(224,114,35)" fg:x="2487" fg:w="1"/><text x="89.6140%" y="111.50"></text></g><g><title>burst`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (12 samples, 0.43%)</title><rect x="89.0047%" y="149" width="0.4312%" height="15" fill="rgb(245,159,27)" fg:x="2477" fg:w="12"/><text x="89.2547%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.04%)</title><rect x="89.3999%" y="133" width="0.0359%" height="15" fill="rgb(245,172,44)" fg:x="2488" fg:w="1"/><text x="89.6499%" y="143.50"></text></g><g><title>burst`hashbrown::map::make_hash (1 samples, 0.04%)</title><rect x="89.4359%" y="149" width="0.0359%" height="15" fill="rgb(236,23,11)" fg:x="2489" fg:w="1"/><text x="89.6859%" y="159.50"></text></g><g><title>burst`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.07%)</title><rect x="89.5077%" y="117" width="0.0719%" height="15" fill="rgb(205,117,38)" fg:x="2491" fg:w="2"/><text x="89.7577%" y="127.50"></text></g><g><title>burst`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.04%)</title><rect x="89.7952%" y="69" width="0.0359%" height="15" fill="rgb(237,72,25)" fg:x="2499" fg:w="1"/><text x="90.0452%" y="79.50"></text></g><g><title>burst`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (70 samples, 2.52%)</title><rect x="89.5796%" y="85" width="2.5153%" height="15" fill="rgb(244,70,9)" fg:x="2493" fg:w="70"/><text x="89.8296%" y="95.50">bu..</text></g><g><title>libsystem_kernel.dylib`write (63 samples, 2.26%)</title><rect x="89.8311%" y="69" width="2.2637%" height="15" fill="rgb(217,125,39)" fg:x="2500" fg:w="63"/><text x="90.0811%" y="79.50">l..</text></g><g><title>burst`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (71 samples, 2.55%)</title><rect x="89.5796%" y="101" width="2.5512%" height="15" fill="rgb(235,36,10)" fg:x="2493" fg:w="71"/><text x="89.8296%" y="111.50">bu..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.04%)</title><rect x="92.0949%" y="85" width="0.0359%" height="15" fill="rgb(251,123,47)" fg:x="2563" fg:w="1"/><text x="92.3449%" y="95.50"></text></g><g><title>burst`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.14%)</title><rect x="92.2027%" y="85" width="0.1437%" height="15" fill="rgb(221,13,13)" fg:x="2566" fg:w="4"/><text x="92.4527%" y="95.50"></text></g><g><title>burst`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (4 samples, 0.14%)</title><rect x="92.2027%" y="69" width="0.1437%" height="15" fill="rgb(238,131,9)" fg:x="2566" fg:w="4"/><text x="92.4527%" y="79.50"></text></g><g><title>burst`core::slice::memchr::memrchr (1 samples, 0.04%)</title><rect x="92.3105%" y="53" width="0.0359%" height="15" fill="rgb(211,50,8)" fg:x="2569" fg:w="1"/><text x="92.5605%" y="63.50"></text></g><g><title>burst`core::fmt::write (80 samples, 2.87%)</title><rect x="89.5796%" y="117" width="2.8746%" height="15" fill="rgb(245,182,24)" fg:x="2493" fg:w="80"/><text x="89.8296%" y="127.50">bu..</text></g><g><title>burst`core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (9 samples, 0.32%)</title><rect x="92.1308%" y="101" width="0.3234%" height="15" fill="rgb(242,14,37)" fg:x="2564" fg:w="9"/><text x="92.3808%" y="111.50"></text></g><g><title>burst`core::fmt::Formatter::pad_integral (3 samples, 0.11%)</title><rect x="92.3464%" y="85" width="0.1078%" height="15" fill="rgb(246,228,12)" fg:x="2570" fg:w="3"/><text x="92.5964%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (1 samples, 0.04%)</title><rect x="92.4542%" y="117" width="0.0359%" height="15" fill="rgb(213,55,15)" fg:x="2573" fg:w="1"/><text x="92.7042%" y="127.50"></text></g><g><title>burst`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (87 samples, 3.13%)</title><rect x="89.4718%" y="133" width="3.1261%" height="15" fill="rgb(209,9,3)" fg:x="2490" fg:w="87"/><text x="89.7218%" y="143.50">bur..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (3 samples, 0.11%)</title><rect x="92.4901%" y="117" width="0.1078%" height="15" fill="rgb(230,59,30)" fg:x="2574" fg:w="3"/><text x="92.7401%" y="127.50"></text></g><g><title>burst`std::io::stdio::_print (88 samples, 3.16%)</title><rect x="89.4718%" y="149" width="3.1621%" height="15" fill="rgb(209,121,21)" fg:x="2490" fg:w="88"/><text x="89.7218%" y="159.50">bur..</text></g><g><title>burst`core::fmt::write (1 samples, 0.04%)</title><rect x="92.5979%" y="133" width="0.0359%" height="15" fill="rgb(220,109,13)" fg:x="2577" fg:w="1"/><text x="92.8479%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.14%)</title><rect x="92.6338%" y="149" width="0.1437%" height="15" fill="rgb(232,18,1)" fg:x="2578" fg:w="4"/><text x="92.8838%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (27 samples, 0.97%)</title><rect x="92.7776%" y="149" width="0.9702%" height="15" fill="rgb(215,41,42)" fg:x="2582" fg:w="27"/><text x="93.0276%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (41 samples, 1.47%)</title><rect x="93.7478%" y="149" width="1.4732%" height="15" fill="rgb(224,123,36)" fg:x="2609" fg:w="41"/><text x="93.9978%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (11 samples, 0.40%)</title><rect x="94.8257%" y="133" width="0.3953%" height="15" fill="rgb(240,125,3)" fg:x="2639" fg:w="11"/><text x="95.0757%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.04%)</title><rect x="95.2210%" y="149" width="0.0359%" height="15" fill="rgb(205,98,50)" fg:x="2650" fg:w="1"/><text x="95.4710%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.04%)</title><rect x="95.2569%" y="149" width="0.0359%" height="15" fill="rgb(205,185,37)" fg:x="2651" fg:w="1"/><text x="95.5069%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (18 samples, 0.65%)</title><rect x="95.2928%" y="149" width="0.6468%" height="15" fill="rgb(238,207,15)" fg:x="2652" fg:w="18"/><text x="95.5428%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (21 samples, 0.75%)</title><rect x="95.9396%" y="149" width="0.7546%" height="15" fill="rgb(213,199,42)" fg:x="2670" fg:w="21"/><text x="96.1896%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.07%)</title><rect x="96.6942%" y="149" width="0.0719%" height="15" fill="rgb(235,201,11)" fg:x="2691" fg:w="2"/><text x="96.9442%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (55 samples, 1.98%)</title><rect x="96.7661%" y="149" width="1.9763%" height="15" fill="rgb(207,46,11)" fg:x="2693" fg:w="55"/><text x="97.0161%" y="159.50">l..</text></g><g><title>burst`burst::ntfa::NTFABuilder::deplete_minification_queue (2,750 samples, 98.81%)</title><rect x="0.0719%" y="165" width="98.8142%" height="15" fill="rgb(241,35,35)" fg:x="2" fg:w="2750"/><text x="0.3219%" y="175.50">burst`burst::ntfa::NTFABuilder::deplete_minification_queue</text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.14%)</title><rect x="98.7424%" y="149" width="0.1437%" height="15" fill="rgb(243,32,47)" fg:x="2748" fg:w="4"/><text x="98.9924%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.07%)</title><rect x="98.8861%" y="165" width="0.0719%" height="15" fill="rgb(247,202,23)" fg:x="2752" fg:w="2"/><text x="99.1361%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.14%)</title><rect x="98.9580%" y="165" width="0.1437%" height="15" fill="rgb(219,102,11)" fg:x="2754" fg:w="4"/><text x="99.2080%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.11%)</title><rect x="99.1017%" y="165" width="0.1078%" height="15" fill="rgb(243,110,44)" fg:x="2758" fg:w="3"/><text x="99.3517%" y="175.50"></text></g><g><title>all (2,783 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(222,74,54)" fg:x="0" fg:w="2783"/><text x="0.2500%" y="319.50"></text></g><g><title>dyld`start (2,783 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(216,99,12)" fg:x="0" fg:w="2783"/><text x="0.2500%" y="303.50">dyld`start</text></g><g><title>burst`main (2,783 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(226,22,26)" fg:x="0" fg:w="2783"/><text x="0.2500%" y="287.50">burst`main</text></g><g><title>burst`std::rt::lang_start_internal (2,783 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(217,163,10)" fg:x="0" fg:w="2783"/><text x="0.2500%" y="271.50">burst`std::rt::lang_start_internal</text></g><g><title>burst`std::rt::lang_start::_{{closure}} (2,783 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(213,25,53)" fg:x="0" fg:w="2783"/><text x="0.2500%" y="255.50">burst`std::rt::lang_start::_{{closure}}</text></g><g><title>burst`std::sys_common::backtrace::__rust_begin_short_backtrace (2,783 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(252,105,26)" fg:x="0" fg:w="2783"/><text x="0.2500%" y="239.50">burst`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>burst`burst::main (2,783 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,39,43)" fg:x="0" fg:w="2783"/><text x="0.2500%" y="223.50">burst`burst::main</text></g><g><title>burst`burst::synthesis::synthesize (2,782 samples, 99.96%)</title><rect x="0.0359%" y="197" width="99.9641%" height="15" fill="rgb(229,68,48)" fg:x="1" fg:w="2782"/><text x="0.2859%" y="207.50">burst`burst::synthesis::synthesize</text></g><g><title>burst`burst::nftabuilder::_&lt;impl burst::ntfa::NTFABuilder&gt;::build_ntfa (2,782 samples, 99.96%)</title><rect x="0.0359%" y="181" width="99.9641%" height="15" fill="rgb(252,8,32)" fg:x="1" fg:w="2782"/><text x="0.2859%" y="191.50">burst`burst::nftabuilder::_&lt;impl burst::ntfa::NTFABuilder&gt;::build_ntfa</text></g><g><title>libsystem_platform.dylib`_platform_memmove (22 samples, 0.79%)</title><rect x="99.2095%" y="165" width="0.7905%" height="15" fill="rgb(223,20,43)" fg:x="2761" fg:w="22"/><text x="99.4595%" y="175.50"></text></g></svg></svg>