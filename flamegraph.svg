<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="10329"><g><title>burst`burst::dsl::interpret_file (2 samples, 0.02%)</title><rect x="0.0000%" y="197" width="0.0194%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="207.50"></text></g><g><title>burst`DYLD-STUB$$free (17 samples, 0.16%)</title><rect x="0.0194%" y="181" width="0.1646%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="17"/><text x="0.2694%" y="191.50"></text></g><g><title>burst`__rdl_alloc (2 samples, 0.02%)</title><rect x="0.1936%" y="181" width="0.0194%" height="15" fill="rgb(221,193,54)" fg:x="20" fg:w="2"/><text x="0.4436%" y="191.50"></text></g><g><title>burst`__rdl_dealloc (24 samples, 0.23%)</title><rect x="0.2130%" y="181" width="0.2324%" height="15" fill="rgb(248,212,6)" fg:x="22" fg:w="24"/><text x="0.4630%" y="191.50"></text></g><g><title>burst`__rust_dealloc (4 samples, 0.04%)</title><rect x="0.4453%" y="181" width="0.0387%" height="15" fill="rgb(208,68,35)" fg:x="46" fg:w="4"/><text x="0.6953%" y="191.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.05%)</title><rect x="0.4841%" y="181" width="0.0484%" height="15" fill="rgb(232,128,0)" fg:x="50" fg:w="5"/><text x="0.7341%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.09%)</title><rect x="0.7067%" y="133" width="0.0871%" height="15" fill="rgb(207,160,47)" fg:x="73" fg:w="9"/><text x="0.9567%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.09%)</title><rect x="0.7067%" y="117" width="0.0871%" height="15" fill="rgb(228,23,34)" fg:x="73" fg:w="9"/><text x="0.9567%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.06%)</title><rect x="0.7358%" y="101" width="0.0581%" height="15" fill="rgb(218,30,26)" fg:x="76" fg:w="6"/><text x="0.9858%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.04%)</title><rect x="0.7552%" y="85" width="0.0387%" height="15" fill="rgb(220,122,19)" fg:x="78" fg:w="4"/><text x="1.0052%" y="95.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12 samples, 0.12%)</title><rect x="0.6874%" y="149" width="0.1162%" height="15" fill="rgb(250,228,42)" fg:x="71" fg:w="12"/><text x="0.9374%" y="159.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (15 samples, 0.15%)</title><rect x="0.6874%" y="165" width="0.1452%" height="15" fill="rgb(240,193,28)" fg:x="71" fg:w="15"/><text x="0.9374%" y="175.50"></text></g><g><title>burst`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (7 samples, 0.07%)</title><rect x="0.8810%" y="149" width="0.0678%" height="15" fill="rgb(216,20,37)" fg:x="91" fg:w="7"/><text x="1.1310%" y="159.50"></text></g><g><title>burst`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.07%)</title><rect x="0.8810%" y="133" width="0.0678%" height="15" fill="rgb(206,188,39)" fg:x="91" fg:w="7"/><text x="1.1310%" y="143.50"></text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.07%)</title><rect x="0.8810%" y="117" width="0.0678%" height="15" fill="rgb(217,207,13)" fg:x="91" fg:w="7"/><text x="1.1310%" y="127.50"></text></g><g><title>burst`burst::ntfa::NTFABuilder::insert_into_placeholder (11 samples, 0.11%)</title><rect x="0.8520%" y="165" width="0.1065%" height="15" fill="rgb(231,73,38)" fg:x="88" fg:w="11"/><text x="1.1020%" y="175.50"></text></g><g><title>burst`burst::ntfa::dedup_merge (10 samples, 0.10%)</title><rect x="0.9585%" y="165" width="0.0968%" height="15" fill="rgb(225,20,46)" fg:x="99" fg:w="10"/><text x="1.2085%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.03%)</title><rect x="1.0262%" y="149" width="0.0290%" height="15" fill="rgb(210,31,41)" fg:x="106" fg:w="3"/><text x="1.2762%" y="159.50"></text></g><g><title>burst`core::slice::sort::recurse (4 samples, 0.04%)</title><rect x="1.1037%" y="149" width="0.0387%" height="15" fill="rgb(221,200,47)" fg:x="114" fg:w="4"/><text x="1.3537%" y="159.50"></text></g><g><title>burst`core::slice::sort::recurse (10 samples, 0.10%)</title><rect x="1.0553%" y="165" width="0.0968%" height="15" fill="rgb(226,26,5)" fg:x="109" fg:w="10"/><text x="1.3053%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.05%)</title><rect x="1.1715%" y="165" width="0.0484%" height="15" fill="rgb(249,33,26)" fg:x="121" fg:w="5"/><text x="1.4215%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.04%)</title><rect x="1.1811%" y="149" width="0.0387%" height="15" fill="rgb(235,183,28)" fg:x="122" fg:w="4"/><text x="1.4311%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.02%)</title><rect x="1.2199%" y="165" width="0.0194%" height="15" fill="rgb(221,5,38)" fg:x="126" fg:w="2"/><text x="1.4699%" y="175.50"></text></g><g><title>burst`burst::nftabuilder::_&lt;impl burst::ntfa::NTFABuilder&gt;::build_ntfa (76 samples, 0.74%)</title><rect x="0.5325%" y="181" width="0.7358%" height="15" fill="rgb(247,18,42)" fg:x="55" fg:w="76"/><text x="0.7825%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.03%)</title><rect x="1.2392%" y="165" width="0.0290%" height="15" fill="rgb(241,131,45)" fg:x="128" fg:w="3"/><text x="1.4892%" y="175.50"></text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (46 samples, 0.45%)</title><rect x="9.7105%" y="165" width="0.4453%" height="15" fill="rgb(249,31,29)" fg:x="1003" fg:w="46"/><text x="9.9605%" y="175.50"></text></g><g><title>burst`DYLD-STUB$$malloc (18 samples, 0.17%)</title><rect x="10.1559%" y="165" width="0.1743%" height="15" fill="rgb(225,111,53)" fg:x="1049" fg:w="18"/><text x="10.4059%" y="175.50"></text></g><g><title>burst`DYLD-STUB$$memcmp (2 samples, 0.02%)</title><rect x="10.3301%" y="165" width="0.0194%" height="15" fill="rgb(238,160,17)" fg:x="1067" fg:w="2"/><text x="10.5801%" y="175.50"></text></g><g><title>burst`__rdl_alloc (15 samples, 0.15%)</title><rect x="10.3495%" y="165" width="0.1452%" height="15" fill="rgb(214,148,48)" fg:x="1069" fg:w="15"/><text x="10.5995%" y="175.50"></text></g><g><title>burst`__rdl_alloc (3 samples, 0.03%)</title><rect x="10.8529%" y="149" width="0.0290%" height="15" fill="rgb(232,36,49)" fg:x="1121" fg:w="3"/><text x="11.1029%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (15 samples, 0.15%)</title><rect x="11.8598%" y="85" width="0.1452%" height="15" fill="rgb(209,103,24)" fg:x="1225" fg:w="15"/><text x="12.1098%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (101 samples, 0.98%)</title><rect x="11.3467%" y="101" width="0.9778%" height="15" fill="rgb(229,88,8)" fg:x="1172" fg:w="101"/><text x="11.5967%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (33 samples, 0.32%)</title><rect x="12.0050%" y="85" width="0.3195%" height="15" fill="rgb(213,181,19)" fg:x="1240" fg:w="33"/><text x="12.2550%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (140 samples, 1.36%)</title><rect x="10.9982%" y="133" width="1.3554%" height="15" fill="rgb(254,191,54)" fg:x="1136" fg:w="140"/><text x="11.2482%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (114 samples, 1.10%)</title><rect x="11.2499%" y="117" width="1.1037%" height="15" fill="rgb(241,83,37)" fg:x="1162" fg:w="114"/><text x="11.4999%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.03%)</title><rect x="12.3245%" y="101" width="0.0290%" height="15" fill="rgb(233,36,39)" fg:x="1273" fg:w="3"/><text x="12.5745%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (10 samples, 0.10%)</title><rect x="12.3536%" y="133" width="0.0968%" height="15" fill="rgb(226,3,54)" fg:x="1276" fg:w="10"/><text x="12.6036%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.04%)</title><rect x="12.4504%" y="133" width="0.0387%" height="15" fill="rgb(245,192,40)" fg:x="1286" fg:w="4"/><text x="12.7004%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.03%)</title><rect x="12.5762%" y="101" width="0.0290%" height="15" fill="rgb(238,167,29)" fg:x="1299" fg:w="3"/><text x="12.8262%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="12.6440%" y="85" width="0.0194%" height="15" fill="rgb(232,182,51)" fg:x="1306" fg:w="2"/><text x="12.8940%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="12.6440%" y="69" width="0.0194%" height="15" fill="rgb(231,60,39)" fg:x="1306" fg:w="2"/><text x="12.8940%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="12.6634%" y="85" width="0.0194%" height="15" fill="rgb(208,69,12)" fg:x="1308" fg:w="2"/><text x="12.9134%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.02%)</title><rect x="12.6634%" y="69" width="0.0194%" height="15" fill="rgb(235,93,37)" fg:x="1308" fg:w="2"/><text x="12.9134%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (9 samples, 0.09%)</title><rect x="12.6053%" y="101" width="0.0871%" height="15" fill="rgb(213,116,39)" fg:x="1302" fg:w="9"/><text x="12.8553%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.02%)</title><rect x="12.7118%" y="85" width="0.0194%" height="15" fill="rgb(222,207,29)" fg:x="1313" fg:w="2"/><text x="12.9618%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.02%)</title><rect x="12.7118%" y="69" width="0.0194%" height="15" fill="rgb(206,96,30)" fg:x="1313" fg:w="2"/><text x="12.9618%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="12.7311%" y="85" width="0.0194%" height="15" fill="rgb(218,138,4)" fg:x="1315" fg:w="2"/><text x="12.9811%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.02%)</title><rect x="12.7311%" y="69" width="0.0194%" height="15" fill="rgb(250,191,14)" fg:x="1315" fg:w="2"/><text x="12.9811%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.07%)</title><rect x="12.7505%" y="85" width="0.0678%" height="15" fill="rgb(239,60,40)" fg:x="1317" fg:w="7"/><text x="13.0005%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (4 samples, 0.04%)</title><rect x="12.7796%" y="69" width="0.0387%" height="15" fill="rgb(206,27,48)" fg:x="1320" fg:w="4"/><text x="13.0296%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (14 samples, 0.14%)</title><rect x="12.6924%" y="101" width="0.1355%" height="15" fill="rgb(225,35,8)" fg:x="1311" fg:w="14"/><text x="12.9424%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.03%)</title><rect x="12.8280%" y="101" width="0.0290%" height="15" fill="rgb(250,213,24)" fg:x="1325" fg:w="3"/><text x="13.0780%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (45 samples, 0.44%)</title><rect x="12.5278%" y="117" width="0.4357%" height="15" fill="rgb(247,123,22)" fg:x="1294" fg:w="45"/><text x="12.7778%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.11%)</title><rect x="12.8570%" y="101" width="0.1065%" height="15" fill="rgb(231,138,38)" fg:x="1328" fg:w="11"/><text x="13.1070%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.04%)</title><rect x="12.9635%" y="117" width="0.0387%" height="15" fill="rgb(231,145,46)" fg:x="1339" fg:w="4"/><text x="13.2135%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.02%)</title><rect x="13.0119%" y="117" width="0.0194%" height="15" fill="rgb(251,118,11)" fg:x="1344" fg:w="2"/><text x="13.2619%" y="127.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (225 samples, 2.18%)</title><rect x="10.8917%" y="149" width="2.1783%" height="15" fill="rgb(217,147,25)" fg:x="1125" fg:w="225"/><text x="11.1417%" y="159.50">b..</text></g><g><title>libsystem_malloc.dylib`realloc (59 samples, 0.57%)</title><rect x="12.4988%" y="133" width="0.5712%" height="15" fill="rgb(247,81,37)" fg:x="1291" fg:w="59"/><text x="12.7488%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.04%)</title><rect x="13.0313%" y="117" width="0.0387%" height="15" fill="rgb(209,12,38)" fg:x="1346" fg:w="4"/><text x="13.2813%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (4 samples, 0.04%)</title><rect x="13.0313%" y="101" width="0.0387%" height="15" fill="rgb(227,1,9)" fg:x="1346" fg:w="4"/><text x="13.2813%" y="111.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (270 samples, 2.61%)</title><rect x="10.4947%" y="165" width="2.6140%" height="15" fill="rgb(248,47,43)" fg:x="1084" fg:w="270"/><text x="10.7447%" y="175.50">bu..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.04%)</title><rect x="13.0700%" y="149" width="0.0387%" height="15" fill="rgb(221,10,30)" fg:x="1350" fg:w="4"/><text x="13.3200%" y="159.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (8 samples, 0.08%)</title><rect x="13.1087%" y="165" width="0.0775%" height="15" fill="rgb(210,229,1)" fg:x="1354" fg:w="8"/><text x="13.3587%" y="175.50"></text></g><g><title>burst`DYLD-STUB$$malloc (3 samples, 0.03%)</title><rect x="61.3999%" y="133" width="0.0290%" height="15" fill="rgb(222,148,37)" fg:x="6342" fg:w="3"/><text x="61.6499%" y="143.50"></text></g><g><title>burst`__rdl_alloc (7 samples, 0.07%)</title><rect x="61.4387%" y="133" width="0.0678%" height="15" fill="rgb(234,67,33)" fg:x="6346" fg:w="7"/><text x="61.6887%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.08%)</title><rect x="62.2325%" y="101" width="0.0775%" height="15" fill="rgb(247,98,35)" fg:x="6428" fg:w="8"/><text x="62.4825%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (49 samples, 0.47%)</title><rect x="64.2850%" y="69" width="0.4744%" height="15" fill="rgb(247,138,52)" fg:x="6640" fg:w="49"/><text x="64.5350%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (420 samples, 4.07%)</title><rect x="62.6004%" y="85" width="4.0662%" height="15" fill="rgb(213,79,30)" fg:x="6466" fg:w="420"/><text x="62.8504%" y="95.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (197 samples, 1.91%)</title><rect x="64.7594%" y="69" width="1.9073%" height="15" fill="rgb(246,177,23)" fg:x="6689" fg:w="197"/><text x="65.0094%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="66.6473%" y="53" width="0.0194%" height="15" fill="rgb(230,62,27)" fg:x="6884" fg:w="2"/><text x="66.8973%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (534 samples, 5.17%)</title><rect x="61.6807%" y="117" width="5.1699%" height="15" fill="rgb(216,154,8)" fg:x="6371" fg:w="534"/><text x="61.9307%" y="127.50">libsys..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (469 samples, 4.54%)</title><rect x="62.3100%" y="101" width="4.5406%" height="15" fill="rgb(244,35,45)" fg:x="6436" fg:w="469"/><text x="62.5600%" y="111.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (19 samples, 0.18%)</title><rect x="66.6667%" y="85" width="0.1839%" height="15" fill="rgb(251,115,12)" fg:x="6886" fg:w="19"/><text x="66.9167%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (9 samples, 0.09%)</title><rect x="66.8506%" y="117" width="0.0871%" height="15" fill="rgb(240,54,50)" fg:x="6905" fg:w="9"/><text x="67.1006%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.04%)</title><rect x="66.9474%" y="117" width="0.0387%" height="15" fill="rgb(233,84,52)" fg:x="6915" fg:w="4"/><text x="67.1974%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.03%)</title><rect x="67.1411%" y="69" width="0.0290%" height="15" fill="rgb(207,117,47)" fg:x="6935" fg:w="3"/><text x="67.3911%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.05%)</title><rect x="67.1701%" y="69" width="0.0484%" height="15" fill="rgb(249,43,39)" fg:x="6938" fg:w="5"/><text x="67.4201%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.04%)</title><rect x="67.1798%" y="53" width="0.0387%" height="15" fill="rgb(209,38,44)" fg:x="6939" fg:w="4"/><text x="67.4298%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="67.1991%" y="37" width="0.0194%" height="15" fill="rgb(236,212,23)" fg:x="6941" fg:w="2"/><text x="67.4491%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.04%)</title><rect x="67.2185%" y="69" width="0.0387%" height="15" fill="rgb(242,79,21)" fg:x="6943" fg:w="4"/><text x="67.4685%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (22 samples, 0.21%)</title><rect x="67.0927%" y="85" width="0.2130%" height="15" fill="rgb(211,96,35)" fg:x="6930" fg:w="22"/><text x="67.3427%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.05%)</title><rect x="67.2572%" y="69" width="0.0484%" height="15" fill="rgb(253,215,40)" fg:x="6947" fg:w="5"/><text x="67.5072%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.04%)</title><rect x="67.2669%" y="53" width="0.0387%" height="15" fill="rgb(211,81,21)" fg:x="6948" fg:w="4"/><text x="67.5169%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.03%)</title><rect x="67.2766%" y="37" width="0.0290%" height="15" fill="rgb(208,190,38)" fg:x="6949" fg:w="3"/><text x="67.5266%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.08%)</title><rect x="67.3347%" y="69" width="0.0775%" height="15" fill="rgb(235,213,38)" fg:x="6955" fg:w="8"/><text x="67.5847%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.02%)</title><rect x="67.3928%" y="53" width="0.0194%" height="15" fill="rgb(237,122,38)" fg:x="6961" fg:w="2"/><text x="67.6428%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_size (2 samples, 0.02%)</title><rect x="67.4121%" y="69" width="0.0194%" height="15" fill="rgb(244,218,35)" fg:x="6963" fg:w="2"/><text x="67.6621%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (4 samples, 0.04%)</title><rect x="67.4315%" y="69" width="0.0387%" height="15" fill="rgb(240,68,47)" fg:x="6965" fg:w="4"/><text x="67.6815%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.06%)</title><rect x="67.4702%" y="69" width="0.0581%" height="15" fill="rgb(210,16,53)" fg:x="6969" fg:w="6"/><text x="67.7202%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (6 samples, 0.06%)</title><rect x="67.4702%" y="53" width="0.0581%" height="15" fill="rgb(235,124,12)" fg:x="6969" fg:w="6"/><text x="67.7202%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.02%)</title><rect x="67.5090%" y="37" width="0.0194%" height="15" fill="rgb(224,169,11)" fg:x="6973" fg:w="2"/><text x="67.7590%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (23 samples, 0.22%)</title><rect x="67.3250%" y="85" width="0.2227%" height="15" fill="rgb(250,166,2)" fg:x="6954" fg:w="23"/><text x="67.5750%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.02%)</title><rect x="67.5283%" y="69" width="0.0194%" height="15" fill="rgb(242,216,29)" fg:x="6975" fg:w="2"/><text x="67.7783%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.02%)</title><rect x="67.5283%" y="53" width="0.0194%" height="15" fill="rgb(230,116,27)" fg:x="6975" fg:w="2"/><text x="67.7783%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (81 samples, 0.78%)</title><rect x="67.0346%" y="101" width="0.7842%" height="15" fill="rgb(228,99,48)" fg:x="6924" fg:w="81"/><text x="67.2846%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (27 samples, 0.26%)</title><rect x="67.5574%" y="85" width="0.2614%" height="15" fill="rgb(253,11,6)" fg:x="6978" fg:w="27"/><text x="67.8074%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.05%)</title><rect x="67.8188%" y="101" width="0.0484%" height="15" fill="rgb(247,143,39)" fg:x="7005" fg:w="5"/><text x="68.0688%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (98 samples, 0.95%)</title><rect x="66.9862%" y="117" width="0.9488%" height="15" fill="rgb(236,97,10)" fg:x="6919" fg:w="98"/><text x="67.2362%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.05%)</title><rect x="67.8865%" y="101" width="0.0484%" height="15" fill="rgb(233,208,19)" fg:x="7012" fg:w="5"/><text x="68.1365%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.05%)</title><rect x="67.8865%" y="85" width="0.0484%" height="15" fill="rgb(216,164,2)" fg:x="7012" fg:w="5"/><text x="68.1365%" y="95.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (666 samples, 6.45%)</title><rect x="61.5064%" y="133" width="6.4479%" height="15" fill="rgb(220,129,5)" fg:x="6353" fg:w="666"/><text x="61.7564%" y="143.50">burst`al..</text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.02%)</title><rect x="67.9349%" y="117" width="0.0194%" height="15" fill="rgb(242,17,10)" fg:x="7017" fg:w="2"/><text x="68.1849%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.11%)</title><rect x="67.9543%" y="133" width="0.1065%" height="15" fill="rgb(242,107,0)" fg:x="7019" fg:w="11"/><text x="68.2043%" y="143.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (726 samples, 7.03%)</title><rect x="61.0708%" y="149" width="7.0288%" height="15" fill="rgb(251,28,31)" fg:x="6308" fg:w="726"/><text x="61.3208%" y="159.50">burst`all..</text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 0.04%)</title><rect x="68.0608%" y="133" width="0.0387%" height="15" fill="rgb(233,223,10)" fg:x="7030" fg:w="4"/><text x="68.3108%" y="143.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (8 samples, 0.08%)</title><rect x="68.0995%" y="149" width="0.0775%" height="15" fill="rgb(215,21,27)" fg:x="7034" fg:w="8"/><text x="68.3495%" y="159.50"></text></g><g><title>burst`core::slice::sort::partial_insertion_sort (16 samples, 0.15%)</title><rect x="70.0745%" y="133" width="0.1549%" height="15" fill="rgb(232,23,21)" fg:x="7238" fg:w="16"/><text x="70.3245%" y="143.50"></text></g><g><title>burst`core::slice::sort::partial_insertion_sort (21 samples, 0.20%)</title><rect x="70.9362%" y="117" width="0.2033%" height="15" fill="rgb(244,5,23)" fg:x="7327" fg:w="21"/><text x="71.1862%" y="127.50"></text></g><g><title>burst`core::slice::sort::recurse (29 samples, 0.28%)</title><rect x="71.1395%" y="117" width="0.2808%" height="15" fill="rgb(226,81,46)" fg:x="7348" fg:w="29"/><text x="71.3895%" y="127.50"></text></g><g><title>burst`core::slice::sort::shift_tail (12 samples, 0.12%)</title><rect x="71.3041%" y="101" width="0.1162%" height="15" fill="rgb(247,70,30)" fg:x="7365" fg:w="12"/><text x="71.5541%" y="111.50"></text></g><g><title>burst`core::slice::sort::recurse (199 samples, 1.93%)</title><rect x="70.2295%" y="133" width="1.9266%" height="15" fill="rgb(212,68,19)" fg:x="7254" fg:w="199"/><text x="70.4795%" y="143.50">b..</text></g><g><title>burst`core::slice::sort::shift_tail (76 samples, 0.74%)</title><rect x="71.4203%" y="117" width="0.7358%" height="15" fill="rgb(240,187,13)" fg:x="7377" fg:w="76"/><text x="71.6703%" y="127.50"></text></g><g><title>burst`core::slice::sort::recurse (588 samples, 5.69%)</title><rect x="68.1867%" y="149" width="5.6927%" height="15" fill="rgb(223,113,26)" fg:x="7043" fg:w="588"/><text x="68.4367%" y="159.50">burst`c..</text></g><g><title>burst`core::slice::sort::shift_tail (178 samples, 1.72%)</title><rect x="72.1561%" y="133" width="1.7233%" height="15" fill="rgb(206,192,2)" fg:x="7453" fg:w="178"/><text x="72.4061%" y="143.50"></text></g><g><title>burst`core::slice::sort::shift_tail (96 samples, 0.93%)</title><rect x="73.8794%" y="149" width="0.9294%" height="15" fill="rgb(241,108,4)" fg:x="7631" fg:w="96"/><text x="74.1294%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (41 samples, 0.40%)</title><rect x="76.2126%" y="133" width="0.3969%" height="15" fill="rgb(247,173,49)" fg:x="7872" fg:w="41"/><text x="76.4626%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (88 samples, 0.85%)</title><rect x="79.3591%" y="101" width="0.8520%" height="15" fill="rgb(224,114,35)" fg:x="8197" fg:w="88"/><text x="79.6091%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (315 samples, 3.05%)</title><rect x="77.3357%" y="117" width="3.0497%" height="15" fill="rgb(245,159,27)" fg:x="7988" fg:w="315"/><text x="77.5857%" y="127.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (18 samples, 0.17%)</title><rect x="80.2111%" y="101" width="0.1743%" height="15" fill="rgb(245,172,44)" fg:x="8285" fg:w="18"/><text x="80.4611%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (27 samples, 0.26%)</title><rect x="80.3853%" y="117" width="0.2614%" height="15" fill="rgb(236,23,11)" fg:x="8303" fg:w="27"/><text x="80.6353%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (604 samples, 5.85%)</title><rect x="74.8088%" y="149" width="5.8476%" height="15" fill="rgb(205,117,38)" fg:x="7727" fg:w="604"/><text x="75.0588%" y="159.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (418 samples, 4.05%)</title><rect x="76.6095%" y="133" width="4.0469%" height="15" fill="rgb(237,72,25)" fg:x="7913" fg:w="418"/><text x="76.8595%" y="143.50">libs..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (53 samples, 0.51%)</title><rect x="80.6564%" y="149" width="0.5131%" height="15" fill="rgb(244,70,9)" fg:x="8331" fg:w="53"/><text x="80.9064%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.05%)</title><rect x="81.1695%" y="149" width="0.0484%" height="15" fill="rgb(217,125,39)" fg:x="8384" fg:w="5"/><text x="81.4195%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.02%)</title><rect x="81.1986%" y="133" width="0.0194%" height="15" fill="rgb(235,36,10)" fg:x="8387" fg:w="2"/><text x="81.4486%" y="143.50"></text></g><g><title>burst`burst::ntfa::NTFABuilder::getmergedvl (7,052 samples, 68.27%)</title><rect x="13.1862%" y="165" width="68.2738%" height="15" fill="rgb(251,123,47)" fg:x="1362" fg:w="7052"/><text x="13.4362%" y="175.50">burst`burst::ntfa::NTFABuilder::getmergedvl</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (24 samples, 0.23%)</title><rect x="81.2276%" y="149" width="0.2324%" height="15" fill="rgb(221,13,13)" fg:x="8390" fg:w="24"/><text x="81.4776%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.04%)</title><rect x="81.8472%" y="117" width="0.0387%" height="15" fill="rgb(238,131,9)" fg:x="8454" fg:w="4"/><text x="82.0972%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.05%)</title><rect x="82.2248%" y="85" width="0.0484%" height="15" fill="rgb(211,50,8)" fg:x="8493" fg:w="5"/><text x="82.4748%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (40 samples, 0.39%)</title><rect x="81.9440%" y="101" width="0.3873%" height="15" fill="rgb(245,182,24)" fg:x="8464" fg:w="40"/><text x="82.1940%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (6 samples, 0.06%)</title><rect x="82.2732%" y="85" width="0.0581%" height="15" fill="rgb(242,14,37)" fg:x="8498" fg:w="6"/><text x="82.5232%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (48 samples, 0.46%)</title><rect x="81.8860%" y="117" width="0.4647%" height="15" fill="rgb(246,228,12)" fg:x="8458" fg:w="48"/><text x="82.1360%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="82.3313%" y="101" width="0.0194%" height="15" fill="rgb(213,55,15)" fg:x="8504" fg:w="2"/><text x="82.5813%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.02%)</title><rect x="82.3603%" y="85" width="0.0194%" height="15" fill="rgb(209,9,3)" fg:x="8507" fg:w="2"/><text x="82.6103%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (67 samples, 0.65%)</title><rect x="81.7504%" y="133" width="0.6487%" height="15" fill="rgb(230,59,30)" fg:x="8444" fg:w="67"/><text x="82.0004%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.05%)</title><rect x="82.3507%" y="117" width="0.0484%" height="15" fill="rgb(209,121,21)" fg:x="8506" fg:w="5"/><text x="82.6007%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.05%)</title><rect x="82.3507%" y="101" width="0.0484%" height="15" fill="rgb(220,109,13)" fg:x="8506" fg:w="5"/><text x="82.6007%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.02%)</title><rect x="82.3797%" y="85" width="0.0194%" height="15" fill="rgb(232,18,1)" fg:x="8509" fg:w="2"/><text x="82.6297%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.07%)</title><rect x="82.3991%" y="133" width="0.0678%" height="15" fill="rgb(215,41,42)" fg:x="8511" fg:w="7"/><text x="82.6491%" y="143.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (97 samples, 0.94%)</title><rect x="81.5374%" y="149" width="0.9391%" height="15" fill="rgb(224,123,36)" fg:x="8422" fg:w="97"/><text x="81.7874%" y="159.50"></text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (96 samples, 0.93%)</title><rect x="82.4765%" y="149" width="0.9294%" height="15" fill="rgb(240,125,3)" fg:x="8519" fg:w="96"/><text x="82.7265%" y="159.50"></text></g><g><title>burst`DYLD-STUB$$malloc (2 samples, 0.02%)</title><rect x="83.4059%" y="149" width="0.0194%" height="15" fill="rgb(205,98,50)" fg:x="8615" fg:w="2"/><text x="83.6559%" y="159.50"></text></g><g><title>burst`burst::ntfa::NTFABuilder::check_requires_further (300 samples, 2.90%)</title><rect x="83.4447%" y="149" width="2.9044%" height="15" fill="rgb(205,185,37)" fg:x="8619" fg:w="300"/><text x="83.6947%" y="159.50">bu..</text></g><g><title>burst`core::slice::sort::recurse (9 samples, 0.09%)</title><rect x="86.6783%" y="133" width="0.0871%" height="15" fill="rgb(238,207,15)" fg:x="8953" fg:w="9"/><text x="86.9283%" y="143.50"></text></g><g><title>burst`core::slice::sort::shift_tail (2 samples, 0.02%)</title><rect x="86.7461%" y="117" width="0.0194%" height="15" fill="rgb(213,199,42)" fg:x="8960" fg:w="2"/><text x="86.9961%" y="127.50"></text></g><g><title>burst`core::slice::sort::recurse (71 samples, 0.69%)</title><rect x="86.3491%" y="149" width="0.6874%" height="15" fill="rgb(235,201,11)" fg:x="8919" fg:w="71"/><text x="86.5991%" y="159.50"></text></g><g><title>burst`core::slice::sort::shift_tail (28 samples, 0.27%)</title><rect x="86.7654%" y="133" width="0.2711%" height="15" fill="rgb(207,46,11)" fg:x="8962" fg:w="28"/><text x="87.0154%" y="143.50"></text></g><g><title>burst`core::slice::sort::shift_tail (30 samples, 0.29%)</title><rect x="87.0365%" y="149" width="0.2904%" height="15" fill="rgb(241,35,35)" fg:x="8990" fg:w="30"/><text x="87.2865%" y="159.50"></text></g><g><title>burst`hashbrown::map::make_hash (5 samples, 0.05%)</title><rect x="87.4528%" y="133" width="0.0484%" height="15" fill="rgb(243,32,47)" fg:x="9033" fg:w="5"/><text x="87.7028%" y="143.50"></text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (200 samples, 1.94%)</title><rect x="87.5303%" y="117" width="1.9363%" height="15" fill="rgb(247,202,23)" fg:x="9041" fg:w="200"/><text x="87.7803%" y="127.50">b..</text></g><g><title>burst`hashbrown::map::make_hash (33 samples, 0.32%)</title><rect x="89.4666%" y="117" width="0.3195%" height="15" fill="rgb(219,102,11)" fg:x="9241" fg:w="33"/><text x="89.7166%" y="127.50"></text></g><g><title>burst`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (237 samples, 2.29%)</title><rect x="87.5012%" y="133" width="2.2945%" height="15" fill="rgb(243,110,44)" fg:x="9038" fg:w="237"/><text x="87.7512%" y="143.50">b..</text></g><g><title>burst`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (256 samples, 2.48%)</title><rect x="87.3269%" y="149" width="2.4785%" height="15" fill="rgb(222,74,54)" fg:x="9020" fg:w="256"/><text x="87.5769%" y="159.50">bu..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.03%)</title><rect x="89.8054%" y="149" width="0.0290%" height="15" fill="rgb(216,99,12)" fg:x="9276" fg:w="3"/><text x="90.0554%" y="159.50"></text></g><g><title>burst`burst::ntfa::NTFABuilder::insert_into_placeholder (871 samples, 8.43%)</title><rect x="81.4600%" y="165" width="8.4326%" height="15" fill="rgb(226,22,26)" fg:x="8414" fg:w="871"/><text x="81.7100%" y="175.50">burst`burst:..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.06%)</title><rect x="89.8344%" y="149" width="0.0581%" height="15" fill="rgb(217,163,10)" fg:x="9279" fg:w="6"/><text x="90.0844%" y="159.50"></text></g><g><title>burst`core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (68 samples, 0.66%)</title><rect x="89.8925%" y="165" width="0.6583%" height="15" fill="rgb(213,25,53)" fg:x="9285" fg:w="68"/><text x="90.1425%" y="175.50"></text></g><g><title>burst`hashbrown::map::make_hash (29 samples, 0.28%)</title><rect x="90.6864%" y="133" width="0.2808%" height="15" fill="rgb(252,105,26)" fg:x="9367" fg:w="29"/><text x="90.9364%" y="143.50"></text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="91.0930%" y="117" width="0.0290%" height="15" fill="rgb(220,39,43)" fg:x="9409" fg:w="3"/><text x="91.3430%" y="127.50"></text></g><g><title>burst`core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (4 samples, 0.04%)</title><rect x="91.1221%" y="117" width="0.0387%" height="15" fill="rgb(229,68,48)" fg:x="9412" fg:w="4"/><text x="91.3721%" y="127.50"></text></g><g><title>burst`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (39 samples, 0.38%)</title><rect x="90.9672%" y="133" width="0.3776%" height="15" fill="rgb(252,8,32)" fg:x="9396" fg:w="39"/><text x="91.2172%" y="143.50"></text></g><g><title>burst`hashbrown::map::make_hash (19 samples, 0.18%)</title><rect x="91.1608%" y="117" width="0.1839%" height="15" fill="rgb(223,20,43)" fg:x="9416" fg:w="19"/><text x="91.4108%" y="127.50"></text></g><g><title>burst`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (82 samples, 0.79%)</title><rect x="90.5606%" y="165" width="0.7939%" height="15" fill="rgb(229,81,49)" fg:x="9354" fg:w="82"/><text x="90.8106%" y="175.50"></text></g><g><title>burst`hashbrown::raw::RawTable&lt;T,A&gt;::insert (70 samples, 0.68%)</title><rect x="90.6767%" y="149" width="0.6777%" height="15" fill="rgb(236,28,36)" fg:x="9366" fg:w="70"/><text x="90.9267%" y="159.50"></text></g><g><title>burst`hashbrown::map::make_hash (72 samples, 0.70%)</title><rect x="91.3544%" y="165" width="0.6971%" height="15" fill="rgb(249,185,26)" fg:x="9436" fg:w="72"/><text x="91.6044%" y="175.50"></text></g><g><title>burst`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (3 samples, 0.03%)</title><rect x="92.0612%" y="165" width="0.0290%" height="15" fill="rgb(249,174,33)" fg:x="9509" fg:w="3"/><text x="92.3112%" y="175.50"></text></g><g><title>burst`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (19 samples, 0.18%)</title><rect x="92.0902%" y="165" width="0.1839%" height="15" fill="rgb(233,201,37)" fg:x="9512" fg:w="19"/><text x="92.3402%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (21 samples, 0.20%)</title><rect x="92.2742%" y="165" width="0.2033%" height="15" fill="rgb(221,78,26)" fg:x="9531" fg:w="21"/><text x="92.5242%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.06%)</title><rect x="92.4194%" y="149" width="0.0581%" height="15" fill="rgb(250,127,30)" fg:x="9546" fg:w="6"/><text x="92.6694%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.04%)</title><rect x="92.4388%" y="133" width="0.0387%" height="15" fill="rgb(230,49,44)" fg:x="9548" fg:w="4"/><text x="92.6888%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.03%)</title><rect x="92.4484%" y="117" width="0.0290%" height="15" fill="rgb(229,67,23)" fg:x="9549" fg:w="3"/><text x="92.6984%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (110 samples, 1.06%)</title><rect x="94.4235%" y="149" width="1.0650%" height="15" fill="rgb(249,83,47)" fg:x="9753" fg:w="110"/><text x="94.6735%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.06%)</title><rect x="95.4884%" y="149" width="0.0581%" height="15" fill="rgb(215,43,3)" fg:x="9863" fg:w="6"/><text x="95.7384%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (317 samples, 3.07%)</title><rect x="92.4872%" y="165" width="3.0690%" height="15" fill="rgb(238,154,13)" fg:x="9553" fg:w="317"/><text x="92.7372%" y="175.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (10 samples, 0.10%)</title><rect x="95.5659%" y="165" width="0.0968%" height="15" fill="rgb(219,56,2)" fg:x="9871" fg:w="10"/><text x="95.8159%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (162 samples, 1.57%)</title><rect x="95.6627%" y="165" width="1.5684%" height="15" fill="rgb(233,0,4)" fg:x="9881" fg:w="162"/><text x="95.9127%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (8 samples, 0.08%)</title><rect x="97.1536%" y="149" width="0.0775%" height="15" fill="rgb(235,30,7)" fg:x="10035" fg:w="8"/><text x="97.4036%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.08%)</title><rect x="97.1536%" y="133" width="0.0775%" height="15" fill="rgb(250,79,13)" fg:x="10035" fg:w="8"/><text x="97.4036%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (20 samples, 0.19%)</title><rect x="97.2311%" y="165" width="0.1936%" height="15" fill="rgb(211,146,34)" fg:x="10043" fg:w="20"/><text x="97.4811%" y="175.50"></text></g><g><title>burst`burst::ntfa::NTFABuilder::intersect (9,936 samples, 96.20%)</title><rect x="1.2780%" y="181" width="96.1952%" height="15" fill="rgb(228,22,38)" fg:x="132" fg:w="9936"/><text x="1.5280%" y="191.50">burst`burst::ntfa::NTFABuilder::intersect</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (4 samples, 0.04%)</title><rect x="97.4344%" y="165" width="0.0387%" height="15" fill="rgb(235,168,5)" fg:x="10064" fg:w="4"/><text x="97.6844%" y="175.50"></text></g><g><title>burst`hashbrown::map::make_hash (19 samples, 0.18%)</title><rect x="97.4731%" y="181" width="0.1839%" height="15" fill="rgb(221,155,16)" fg:x="10068" fg:w="19"/><text x="97.7231%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (19 samples, 0.18%)</title><rect x="97.6571%" y="181" width="0.1839%" height="15" fill="rgb(215,215,53)" fg:x="10087" fg:w="19"/><text x="97.9071%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (110 samples, 1.06%)</title><rect x="97.8410%" y="181" width="1.0650%" height="15" fill="rgb(223,4,10)" fg:x="10106" fg:w="110"/><text x="98.0910%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (29 samples, 0.28%)</title><rect x="98.9060%" y="181" width="0.2808%" height="15" fill="rgb(234,103,6)" fg:x="10216" fg:w="29"/><text x="99.1560%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (67 samples, 0.65%)</title><rect x="99.1868%" y="181" width="0.6487%" height="15" fill="rgb(227,97,0)" fg:x="10245" fg:w="67"/><text x="99.4368%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (9 samples, 0.09%)</title><rect x="99.8354%" y="181" width="0.0871%" height="15" fill="rgb(234,150,53)" fg:x="10312" fg:w="9"/><text x="100.0854%" y="191.50"></text></g><g><title>all (10,329 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(228,201,54)" fg:x="0" fg:w="10329"/><text x="0.2500%" y="319.50"></text></g><g><title>dyld`start (10,329 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(222,22,37)" fg:x="0" fg:w="10329"/><text x="0.2500%" y="303.50">dyld`start</text></g><g><title>burst`main (10,329 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(237,53,32)" fg:x="0" fg:w="10329"/><text x="0.2500%" y="287.50">burst`main</text></g><g><title>burst`std::rt::lang_start_internal (10,329 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(233,25,53)" fg:x="0" fg:w="10329"/><text x="0.2500%" y="271.50">burst`std::rt::lang_start_internal</text></g><g><title>burst`std::rt::lang_start::_{{closure}} (10,329 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(210,40,34)" fg:x="0" fg:w="10329"/><text x="0.2500%" y="255.50">burst`std::rt::lang_start::_{{closure}}</text></g><g><title>burst`std::sys_common::backtrace::__rust_begin_short_backtrace (10,329 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(241,220,44)" fg:x="0" fg:w="10329"/><text x="0.2500%" y="239.50">burst`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>burst`burst::main (10,329 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,28,35)" fg:x="0" fg:w="10329"/><text x="0.2500%" y="223.50">burst`burst::main</text></g><g><title>burst`burst::synthesis::synthesize (10,327 samples, 99.98%)</title><rect x="0.0194%" y="197" width="99.9806%" height="15" fill="rgb(210,56,17)" fg:x="2" fg:w="10327"/><text x="0.2694%" y="207.50">burst`burst::synthesis::synthesize</text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.08%)</title><rect x="99.9225%" y="181" width="0.0775%" height="15" fill="rgb(224,130,29)" fg:x="10321" fg:w="8"/><text x="100.1725%" y="191.50"></text></g></svg></svg>