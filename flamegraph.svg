<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="562"><g><title>burst`DYLD-STUB$$free (3 samples, 0.53%)</title><rect x="0.0000%" y="181" width="0.5338%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="191.50"></text></g><g><title>burst`DYLD-STUB$$memcpy (1 samples, 0.18%)</title><rect x="0.5338%" y="181" width="0.1779%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="1"/><text x="0.7838%" y="191.50"></text></g><g><title>burst`DYLD-STUB$$memmove (1 samples, 0.18%)</title><rect x="0.7117%" y="181" width="0.1779%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="1"/><text x="0.9617%" y="191.50"></text></g><g><title>burst`__rdl_alloc (1 samples, 0.18%)</title><rect x="0.8897%" y="181" width="0.1779%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="1"/><text x="1.1397%" y="191.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 1.25%)</title><rect x="1.0676%" y="181" width="1.2456%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="7"/><text x="1.3176%" y="191.50"></text></g><g><title>burst`burst::ntfa::PartialNTFA::add_rule (2 samples, 0.36%)</title><rect x="2.3132%" y="165" width="0.3559%" height="15" fill="rgb(232,128,0)" fg:x="13" fg:w="2"/><text x="2.5632%" y="175.50"></text></g><g><title>burst`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.36%)</title><rect x="2.3132%" y="149" width="0.3559%" height="15" fill="rgb(207,160,47)" fg:x="13" fg:w="2"/><text x="2.5632%" y="159.50"></text></g><g><title>burst`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.18%)</title><rect x="2.4911%" y="133" width="0.1779%" height="15" fill="rgb(228,23,34)" fg:x="14" fg:w="1"/><text x="2.7411%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.18%)</title><rect x="2.4911%" y="117" width="0.1779%" height="15" fill="rgb(218,30,26)" fg:x="14" fg:w="1"/><text x="2.7411%" y="127.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 0.71%)</title><rect x="3.5587%" y="149" width="0.7117%" height="15" fill="rgb(220,122,19)" fg:x="20" fg:w="4"/><text x="3.8087%" y="159.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.53%)</title><rect x="3.7367%" y="133" width="0.5338%" height="15" fill="rgb(250,228,42)" fg:x="21" fg:w="3"/><text x="3.9867%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.53%)</title><rect x="3.7367%" y="117" width="0.5338%" height="15" fill="rgb(240,193,28)" fg:x="21" fg:w="3"/><text x="3.9867%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.53%)</title><rect x="3.7367%" y="101" width="0.5338%" height="15" fill="rgb(216,20,37)" fg:x="21" fg:w="3"/><text x="3.9867%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.53%)</title><rect x="3.7367%" y="85" width="0.5338%" height="15" fill="rgb(206,188,39)" fg:x="21" fg:w="3"/><text x="3.9867%" y="95.50"></text></g><g><title>burst`burst::ntfa::PartialNTFA::convert::merge (2 samples, 0.36%)</title><rect x="4.2705%" y="149" width="0.3559%" height="15" fill="rgb(217,207,13)" fg:x="24" fg:w="2"/><text x="4.5205%" y="159.50"></text></g><g><title>burst`core::slice::sort::recurse (1 samples, 0.18%)</title><rect x="4.6263%" y="149" width="0.1779%" height="15" fill="rgb(231,73,38)" fg:x="26" fg:w="1"/><text x="4.8763%" y="159.50"></text></g><g><title>burst`core::slice::sort::shift_tail (1 samples, 0.18%)</title><rect x="4.6263%" y="133" width="0.1779%" height="15" fill="rgb(225,20,46)" fg:x="26" fg:w="1"/><text x="4.8763%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.18%)</title><rect x="4.8043%" y="149" width="0.1779%" height="15" fill="rgb(210,31,41)" fg:x="27" fg:w="1"/><text x="5.0543%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.18%)</title><rect x="4.8043%" y="133" width="0.1779%" height="15" fill="rgb(221,200,47)" fg:x="27" fg:w="1"/><text x="5.0543%" y="143.50"></text></g><g><title>burst`burst::ntfa::PartialNTFA::convert (14 samples, 2.49%)</title><rect x="2.6690%" y="165" width="2.4911%" height="15" fill="rgb(226,26,5)" fg:x="15" fg:w="14"/><text x="2.9190%" y="175.50">bu..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.18%)</title><rect x="4.9822%" y="149" width="0.1779%" height="15" fill="rgb(249,33,26)" fg:x="28" fg:w="1"/><text x="5.2322%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (7 samples, 1.25%)</title><rect x="5.1601%" y="165" width="1.2456%" height="15" fill="rgb(235,183,28)" fg:x="29" fg:w="7"/><text x="5.4101%" y="175.50"></text></g><g><title>burst`burst::nftabuilder::_&lt;impl burst::ntfa::NTFABuilder&gt;::build_ntfa (25 samples, 4.45%)</title><rect x="2.3132%" y="181" width="4.4484%" height="15" fill="rgb(221,5,38)" fg:x="13" fg:w="25"/><text x="2.5632%" y="191.50">burst..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.36%)</title><rect x="6.4057%" y="165" width="0.3559%" height="15" fill="rgb(247,18,42)" fg:x="36" fg:w="2"/><text x="6.6557%" y="175.50"></text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 1.60%)</title><rect x="24.5552%" y="165" width="1.6014%" height="15" fill="rgb(241,131,45)" fg:x="138" fg:w="9"/><text x="24.8052%" y="175.50"></text></g><g><title>burst`DYLD-STUB$$malloc (1 samples, 0.18%)</title><rect x="27.5801%" y="149" width="0.1779%" height="15" fill="rgb(249,31,29)" fg:x="155" fg:w="1"/><text x="27.8301%" y="159.50"></text></g><g><title>burst`DYLD-STUB$$realloc (2 samples, 0.36%)</title><rect x="27.7580%" y="149" width="0.3559%" height="15" fill="rgb(225,111,53)" fg:x="156" fg:w="2"/><text x="28.0080%" y="159.50"></text></g><g><title>burst`__rdl_alloc (1 samples, 0.18%)</title><rect x="28.1139%" y="149" width="0.1779%" height="15" fill="rgb(238,160,17)" fg:x="158" fg:w="1"/><text x="28.3639%" y="159.50"></text></g><g><title>burst`__rdl_realloc (1 samples, 0.18%)</title><rect x="28.2918%" y="149" width="0.1779%" height="15" fill="rgb(214,148,48)" fg:x="159" fg:w="1"/><text x="28.5418%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.71%)</title><rect x="33.9858%" y="85" width="0.7117%" height="15" fill="rgb(232,36,49)" fg:x="191" fg:w="4"/><text x="34.2358%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (18 samples, 3.20%)</title><rect x="31.6726%" y="101" width="3.2028%" height="15" fill="rgb(209,103,24)" fg:x="178" fg:w="18"/><text x="31.9226%" y="111.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.18%)</title><rect x="34.6975%" y="85" width="0.1779%" height="15" fill="rgb(229,88,8)" fg:x="195" fg:w="1"/><text x="34.9475%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (34 samples, 6.05%)</title><rect x="29.3594%" y="133" width="6.0498%" height="15" fill="rgb(213,181,19)" fg:x="165" fg:w="34"/><text x="29.6094%" y="143.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (26 samples, 4.63%)</title><rect x="30.7829%" y="117" width="4.6263%" height="15" fill="rgb(254,191,54)" fg:x="173" fg:w="26"/><text x="31.0329%" y="127.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.53%)</title><rect x="34.8754%" y="101" width="0.5338%" height="15" fill="rgb(241,83,37)" fg:x="196" fg:w="3"/><text x="35.1254%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.36%)</title><rect x="35.4093%" y="133" width="0.3559%" height="15" fill="rgb(233,36,39)" fg:x="199" fg:w="2"/><text x="35.6593%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.36%)</title><rect x="35.7651%" y="133" width="0.3559%" height="15" fill="rgb(226,3,54)" fg:x="201" fg:w="2"/><text x="36.0151%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.36%)</title><rect x="36.1210%" y="133" width="0.3559%" height="15" fill="rgb(245,192,40)" fg:x="203" fg:w="2"/><text x="36.3710%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (2 samples, 0.36%)</title><rect x="37.5445%" y="117" width="0.3559%" height="15" fill="rgb(238,167,29)" fg:x="211" fg:w="2"/><text x="37.7945%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (1 samples, 0.18%)</title><rect x="38.6121%" y="101" width="0.1779%" height="15" fill="rgb(232,182,51)" fg:x="217" fg:w="1"/><text x="38.8621%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 1.25%)</title><rect x="38.7900%" y="101" width="1.2456%" height="15" fill="rgb(231,60,39)" fg:x="218" fg:w="7"/><text x="39.0400%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (3 samples, 0.53%)</title><rect x="40.7473%" y="85" width="0.5338%" height="15" fill="rgb(208,69,12)" fg:x="229" fg:w="3"/><text x="40.9973%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 1.60%)</title><rect x="41.2811%" y="85" width="1.6014%" height="15" fill="rgb(235,93,37)" fg:x="232" fg:w="9"/><text x="41.5311%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 1.07%)</title><rect x="45.0178%" y="53" width="1.0676%" height="15" fill="rgb(213,116,39)" fg:x="253" fg:w="6"/><text x="45.2678%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (24 samples, 4.27%)</title><rect x="43.5943%" y="69" width="4.2705%" height="15" fill="rgb(222,207,29)" fg:x="245" fg:w="24"/><text x="43.8443%" y="79.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (10 samples, 1.78%)</title><rect x="46.0854%" y="53" width="1.7794%" height="15" fill="rgb(206,96,30)" fg:x="259" fg:w="10"/><text x="46.3354%" y="63.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (29 samples, 5.16%)</title><rect x="42.8826%" y="85" width="5.1601%" height="15" fill="rgb(218,138,4)" fg:x="241" fg:w="29"/><text x="43.1326%" y="95.50">libsys..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.18%)</title><rect x="47.8648%" y="69" width="0.1779%" height="15" fill="rgb(250,191,14)" fg:x="269" fg:w="1"/><text x="48.1148%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.71%)</title><rect x="48.0427%" y="85" width="0.7117%" height="15" fill="rgb(239,60,40)" fg:x="270" fg:w="4"/><text x="48.2927%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (1 samples, 0.18%)</title><rect x="48.7544%" y="53" width="0.1779%" height="15" fill="rgb(206,27,48)" fg:x="274" fg:w="1"/><text x="49.0044%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (1 samples, 0.18%)</title><rect x="48.7544%" y="37" width="0.1779%" height="15" fill="rgb(225,35,8)" fg:x="274" fg:w="1"/><text x="49.0044%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (52 samples, 9.25%)</title><rect x="40.0356%" y="101" width="9.2527%" height="15" fill="rgb(250,213,24)" fg:x="225" fg:w="52"/><text x="40.2856%" y="111.50">libsystem_mal..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.53%)</title><rect x="48.7544%" y="85" width="0.5338%" height="15" fill="rgb(247,123,22)" fg:x="274" fg:w="3"/><text x="49.0044%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.53%)</title><rect x="48.7544%" y="69" width="0.5338%" height="15" fill="rgb(231,138,38)" fg:x="274" fg:w="3"/><text x="49.0044%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.36%)</title><rect x="48.9324%" y="53" width="0.3559%" height="15" fill="rgb(231,145,46)" fg:x="275" fg:w="2"/><text x="49.1824%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.18%)</title><rect x="49.1103%" y="37" width="0.1779%" height="15" fill="rgb(251,118,11)" fg:x="276" fg:w="1"/><text x="49.3603%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.18%)</title><rect x="49.2883%" y="85" width="0.1779%" height="15" fill="rgb(217,147,25)" fg:x="277" fg:w="1"/><text x="49.5383%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.18%)</title><rect x="49.2883%" y="69" width="0.1779%" height="15" fill="rgb(247,81,37)" fg:x="277" fg:w="1"/><text x="49.5383%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 0.53%)</title><rect x="49.2883%" y="101" width="0.5338%" height="15" fill="rgb(209,12,38)" fg:x="277" fg:w="3"/><text x="49.5383%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.36%)</title><rect x="49.4662%" y="85" width="0.3559%" height="15" fill="rgb(227,1,9)" fg:x="278" fg:w="2"/><text x="49.7162%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.36%)</title><rect x="49.4662%" y="69" width="0.3559%" height="15" fill="rgb(248,47,43)" fg:x="278" fg:w="2"/><text x="49.7162%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.18%)</title><rect x="49.6441%" y="53" width="0.1779%" height="15" fill="rgb(221,10,30)" fg:x="279" fg:w="1"/><text x="49.8941%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (73 samples, 12.99%)</title><rect x="37.9004%" y="117" width="12.9893%" height="15" fill="rgb(210,229,1)" fg:x="213" fg:w="73"/><text x="38.1504%" y="127.50">libsystem_malloc.dyl..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 1.07%)</title><rect x="49.8221%" y="101" width="1.0676%" height="15" fill="rgb(222,148,37)" fg:x="280" fg:w="6"/><text x="50.0721%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 1.07%)</title><rect x="50.8897%" y="117" width="1.0676%" height="15" fill="rgb(234,67,33)" fg:x="286" fg:w="6"/><text x="51.1397%" y="127.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (134 samples, 23.84%)</title><rect x="28.4698%" y="149" width="23.8434%" height="15" fill="rgb(247,98,35)" fg:x="160" fg:w="134"/><text x="28.7198%" y="159.50">burst`alloc::raw_vec::finish_grow</text></g><g><title>libsystem_malloc.dylib`realloc (89 samples, 15.84%)</title><rect x="36.4769%" y="133" width="15.8363%" height="15" fill="rgb(247,138,52)" fg:x="205" fg:w="89"/><text x="36.7269%" y="143.50">libsystem_malloc.dylib`r..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.36%)</title><rect x="51.9573%" y="117" width="0.3559%" height="15" fill="rgb(213,79,30)" fg:x="292" fg:w="2"/><text x="52.2073%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.71%)</title><rect x="52.3132%" y="149" width="0.7117%" height="15" fill="rgb(246,177,23)" fg:x="294" fg:w="4"/><text x="52.5632%" y="159.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (155 samples, 27.58%)</title><rect x="26.1566%" y="165" width="27.5801%" height="15" fill="rgb(230,62,27)" fg:x="147" fg:w="155"/><text x="26.4066%" y="175.50">burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::..</text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 0.71%)</title><rect x="53.0249%" y="149" width="0.7117%" height="15" fill="rgb(216,154,8)" fg:x="298" fg:w="4"/><text x="53.2749%" y="159.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (4 samples, 0.71%)</title><rect x="53.7367%" y="165" width="0.7117%" height="15" fill="rgb(244,35,45)" fg:x="302" fg:w="4"/><text x="53.9867%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.36%)</title><rect x="55.6940%" y="117" width="0.3559%" height="15" fill="rgb(251,115,12)" fg:x="313" fg:w="2"/><text x="55.9440%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.53%)</title><rect x="56.4057%" y="85" width="0.5338%" height="15" fill="rgb(240,54,50)" fg:x="317" fg:w="3"/><text x="56.6557%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 2.14%)</title><rect x="56.0498%" y="117" width="2.1352%" height="15" fill="rgb(233,84,52)" fg:x="315" fg:w="12"/><text x="56.2998%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 2.14%)</title><rect x="56.0498%" y="101" width="2.1352%" height="15" fill="rgb(207,117,47)" fg:x="315" fg:w="12"/><text x="56.2998%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (7 samples, 1.25%)</title><rect x="56.9395%" y="85" width="1.2456%" height="15" fill="rgb(249,43,39)" fg:x="320" fg:w="7"/><text x="57.1895%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 2.85%)</title><rect x="55.5160%" y="133" width="2.8470%" height="15" fill="rgb(209,38,44)" fg:x="312" fg:w="16"/><text x="55.7660%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.18%)</title><rect x="58.1851%" y="117" width="0.1779%" height="15" fill="rgb(236,212,23)" fg:x="327" fg:w="1"/><text x="58.4351%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.18%)</title><rect x="58.1851%" y="101" width="0.1779%" height="15" fill="rgb(242,79,21)" fg:x="327" fg:w="1"/><text x="58.4351%" y="111.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (22 samples, 3.91%)</title><rect x="54.6263%" y="149" width="3.9146%" height="15" fill="rgb(211,96,35)" fg:x="307" fg:w="22"/><text x="54.8763%" y="159.50">burs..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.18%)</title><rect x="58.3630%" y="133" width="0.1779%" height="15" fill="rgb(253,215,40)" fg:x="328" fg:w="1"/><text x="58.6130%" y="143.50"></text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (21 samples, 3.74%)</title><rect x="58.5409%" y="149" width="3.7367%" height="15" fill="rgb(211,81,21)" fg:x="329" fg:w="21"/><text x="58.7909%" y="159.50">burs..</text></g><g><title>burst`DYLD-STUB$$malloc (1 samples, 0.18%)</title><rect x="62.2776%" y="149" width="0.1779%" height="15" fill="rgb(208,190,38)" fg:x="350" fg:w="1"/><text x="62.5276%" y="159.50"></text></g><g><title>burst`DYLD-STUB$$memcpy (1 samples, 0.18%)</title><rect x="62.4555%" y="149" width="0.1779%" height="15" fill="rgb(235,213,38)" fg:x="351" fg:w="1"/><text x="62.7055%" y="159.50"></text></g><g><title>burst`__rdl_alloc (1 samples, 0.18%)</title><rect x="62.6335%" y="149" width="0.1779%" height="15" fill="rgb(237,122,38)" fg:x="352" fg:w="1"/><text x="62.8835%" y="159.50"></text></g><g><title>burst`core::slice::sort::recurse (2 samples, 0.36%)</title><rect x="63.7011%" y="117" width="0.3559%" height="15" fill="rgb(244,218,35)" fg:x="358" fg:w="2"/><text x="63.9511%" y="127.50"></text></g><g><title>burst`core::slice::sort::shift_tail (1 samples, 0.18%)</title><rect x="63.8790%" y="101" width="0.1779%" height="15" fill="rgb(240,68,47)" fg:x="359" fg:w="1"/><text x="64.1290%" y="111.50"></text></g><g><title>burst`core::slice::sort::recurse (5 samples, 0.89%)</title><rect x="63.5231%" y="133" width="0.8897%" height="15" fill="rgb(210,16,53)" fg:x="357" fg:w="5"/><text x="63.7731%" y="143.50"></text></g><g><title>burst`core::slice::sort::shift_tail (2 samples, 0.36%)</title><rect x="64.0569%" y="117" width="0.3559%" height="15" fill="rgb(235,124,12)" fg:x="360" fg:w="2"/><text x="64.3069%" y="127.50"></text></g><g><title>burst`core::slice::sort::recurse (13 samples, 2.31%)</title><rect x="62.8114%" y="149" width="2.3132%" height="15" fill="rgb(224,169,11)" fg:x="353" fg:w="13"/><text x="63.0614%" y="159.50">b..</text></g><g><title>burst`core::slice::sort::shift_tail (4 samples, 0.71%)</title><rect x="64.4128%" y="133" width="0.7117%" height="15" fill="rgb(250,166,2)" fg:x="362" fg:w="4"/><text x="64.6628%" y="143.50"></text></g><g><title>burst`core::slice::sort::shift_tail (3 samples, 0.53%)</title><rect x="65.1246%" y="149" width="0.5338%" height="15" fill="rgb(242,216,29)" fg:x="366" fg:w="3"/><text x="65.3746%" y="159.50"></text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (35 samples, 6.23%)</title><rect x="65.8363%" y="117" width="6.2278%" height="15" fill="rgb(230,116,27)" fg:x="370" fg:w="35"/><text x="66.0863%" y="127.50">burst`&lt;s..</text></g><g><title>burst`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (41 samples, 7.30%)</title><rect x="65.6584%" y="149" width="7.2954%" height="15" fill="rgb(228,99,48)" fg:x="369" fg:w="41"/><text x="65.9084%" y="159.50">burst`hash..</text></g><g><title>burst`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (40 samples, 7.12%)</title><rect x="65.8363%" y="133" width="7.1174%" height="15" fill="rgb(253,11,6)" fg:x="370" fg:w="40"/><text x="66.0863%" y="143.50">burst`hash..</text></g><g><title>burst`hashbrown::map::make_hash (5 samples, 0.89%)</title><rect x="72.0641%" y="117" width="0.8897%" height="15" fill="rgb(247,143,39)" fg:x="405" fg:w="5"/><text x="72.3141%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.18%)</title><rect x="72.9537%" y="149" width="0.1779%" height="15" fill="rgb(236,97,10)" fg:x="410" fg:w="1"/><text x="73.2037%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.18%)</title><rect x="72.9537%" y="133" width="0.1779%" height="15" fill="rgb(233,208,19)" fg:x="410" fg:w="1"/><text x="73.2037%" y="143.50"></text></g><g><title>burst`burst::ntfa::NTFABuilder::insert_into_placeholder (107 samples, 19.04%)</title><rect x="54.4484%" y="165" width="19.0391%" height="15" fill="rgb(216,164,2)" fg:x="306" fg:w="107"/><text x="54.6984%" y="175.50">burst`burst::ntfa::NTFABuilder..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.36%)</title><rect x="73.1317%" y="149" width="0.3559%" height="15" fill="rgb(220,129,5)" fg:x="411" fg:w="2"/><text x="73.3817%" y="159.50"></text></g><g><title>burst`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.53%)</title><rect x="73.4875%" y="165" width="0.5338%" height="15" fill="rgb(242,17,10)" fg:x="413" fg:w="3"/><text x="73.7375%" y="175.50"></text></g><g><title>burst`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (22 samples, 3.91%)</title><rect x="74.0214%" y="165" width="3.9146%" height="15" fill="rgb(242,107,0)" fg:x="416" fg:w="22"/><text x="74.2714%" y="175.50">burs..</text></g><g><title>burst`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.18%)</title><rect x="77.7580%" y="149" width="0.1779%" height="15" fill="rgb(251,28,31)" fg:x="437" fg:w="1"/><text x="78.0080%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 1.60%)</title><rect x="78.4698%" y="133" width="1.6014%" height="15" fill="rgb(233,223,10)" fg:x="441" fg:w="9"/><text x="78.7198%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.53%)</title><rect x="79.5374%" y="117" width="0.5338%" height="15" fill="rgb(215,21,27)" fg:x="447" fg:w="3"/><text x="79.7874%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 2.67%)</title><rect x="77.9359%" y="165" width="2.6690%" height="15" fill="rgb(232,23,21)" fg:x="438" fg:w="15"/><text x="78.1859%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 2.14%)</title><rect x="78.4698%" y="149" width="2.1352%" height="15" fill="rgb(244,5,23)" fg:x="441" fg:w="12"/><text x="78.7198%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.53%)</title><rect x="80.0712%" y="133" width="0.5338%" height="15" fill="rgb(226,81,46)" fg:x="450" fg:w="3"/><text x="80.3212%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (47 samples, 8.36%)</title><rect x="80.6050%" y="165" width="8.3630%" height="15" fill="rgb(247,70,30)" fg:x="453" fg:w="47"/><text x="80.8550%" y="175.50">libsystem_ma..</text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (22 samples, 3.91%)</title><rect x="85.0534%" y="149" width="3.9146%" height="15" fill="rgb(212,68,19)" fg:x="478" fg:w="22"/><text x="85.3034%" y="159.50">libs..</text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.18%)</title><rect x="88.9680%" y="165" width="0.1779%" height="15" fill="rgb(240,187,13)" fg:x="500" fg:w="1"/><text x="89.2180%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.18%)</title><rect x="88.9680%" y="149" width="0.1779%" height="15" fill="rgb(223,113,26)" fg:x="500" fg:w="1"/><text x="89.2180%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.53%)</title><rect x="89.1459%" y="165" width="0.5338%" height="15" fill="rgb(206,192,2)" fg:x="501" fg:w="3"/><text x="89.3959%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 1.60%)</title><rect x="89.6797%" y="165" width="1.6014%" height="15" fill="rgb(241,108,4)" fg:x="504" fg:w="9"/><text x="89.9297%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.18%)</title><rect x="91.2811%" y="165" width="0.1779%" height="15" fill="rgb(247,173,49)" fg:x="513" fg:w="1"/><text x="91.5311%" y="175.50"></text></g><g><title>burst`burst::ntfa::NTFABuilder::intersect (479 samples, 85.23%)</title><rect x="6.7616%" y="181" width="85.2313%" height="15" fill="rgb(224,114,35)" fg:x="38" fg:w="479"/><text x="7.0116%" y="191.50">burst`burst::ntfa::NTFABuilder::intersect</text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.53%)</title><rect x="91.4591%" y="165" width="0.5338%" height="15" fill="rgb(245,159,27)" fg:x="514" fg:w="3"/><text x="91.7091%" y="175.50"></text></g><g><title>burst`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.18%)</title><rect x="91.9929%" y="181" width="0.1779%" height="15" fill="rgb(245,172,44)" fg:x="517" fg:w="1"/><text x="92.2429%" y="191.50"></text></g><g><title>burst`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (17 samples, 3.02%)</title><rect x="92.1708%" y="181" width="3.0249%" height="15" fill="rgb(236,23,11)" fg:x="518" fg:w="17"/><text x="92.4208%" y="191.50">bur..</text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.53%)</title><rect x="95.1957%" y="181" width="0.5338%" height="15" fill="rgb(205,117,38)" fg:x="535" fg:w="3"/><text x="95.4457%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.89%)</title><rect x="95.7295%" y="181" width="0.8897%" height="15" fill="rgb(237,72,25)" fg:x="538" fg:w="5"/><text x="95.9795%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (5 samples, 0.89%)</title><rect x="96.6192%" y="181" width="0.8897%" height="15" fill="rgb(244,70,9)" fg:x="543" fg:w="5"/><text x="96.8692%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.36%)</title><rect x="97.5089%" y="181" width="0.3559%" height="15" fill="rgb(217,125,39)" fg:x="548" fg:w="2"/><text x="97.7589%" y="191.50"></text></g><g><title>burst`std::rt::lang_start::_{{closure}} (561 samples, 99.82%)</title><rect x="0.0000%" y="245" width="99.8221%" height="15" fill="rgb(235,36,10)" fg:x="0" fg:w="561"/><text x="0.2500%" y="255.50">burst`std::rt::lang_start::_{{closure}}</text></g><g><title>burst`std::sys_common::backtrace::__rust_begin_short_backtrace (561 samples, 99.82%)</title><rect x="0.0000%" y="229" width="99.8221%" height="15" fill="rgb(251,123,47)" fg:x="0" fg:w="561"/><text x="0.2500%" y="239.50">burst`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>burst`burst::main (561 samples, 99.82%)</title><rect x="0.0000%" y="213" width="99.8221%" height="15" fill="rgb(221,13,13)" fg:x="0" fg:w="561"/><text x="0.2500%" y="223.50">burst`burst::main</text></g><g><title>burst`burst::synthesis::synthesize (561 samples, 99.82%)</title><rect x="0.0000%" y="197" width="99.8221%" height="15" fill="rgb(238,131,9)" fg:x="0" fg:w="561"/><text x="0.2500%" y="207.50">burst`burst::synthesis::synthesize</text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 1.96%)</title><rect x="97.8648%" y="181" width="1.9573%" height="15" fill="rgb(211,50,8)" fg:x="550" fg:w="11"/><text x="98.1148%" y="191.50">l..</text></g><g><title>all (562 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(245,182,24)" fg:x="0" fg:w="562"/><text x="0.2500%" y="319.50"></text></g><g><title>dyld`start (562 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(242,14,37)" fg:x="0" fg:w="562"/><text x="0.2500%" y="303.50">dyld`start</text></g><g><title>burst`main (562 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(246,228,12)" fg:x="0" fg:w="562"/><text x="0.2500%" y="287.50">burst`main</text></g><g><title>burst`std::rt::lang_start_internal (562 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(213,55,15)" fg:x="0" fg:w="562"/><text x="0.2500%" y="271.50">burst`std::rt::lang_start_internal</text></g><g><title>burst`std::thread::Thread::new (1 samples, 0.18%)</title><rect x="99.8221%" y="245" width="0.1779%" height="15" fill="rgb(209,9,3)" fg:x="561" fg:w="1"/><text x="100.0721%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_lock_init_slow (1 samples, 0.18%)</title><rect x="99.8221%" y="229" width="0.1779%" height="15" fill="rgb(230,59,30)" fg:x="561" fg:w="1"/><text x="100.0721%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_check_init_slow (1 samples, 0.18%)</title><rect x="99.8221%" y="213" width="0.1779%" height="15" fill="rgb(209,121,21)" fg:x="561" fg:w="1"/><text x="100.0721%" y="223.50"></text></g></svg></svg>