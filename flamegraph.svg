<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="485.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="485.00"> </text><svg id="frames" x="10" width="1180" total_samples="434"><g><title>burst`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.23%)</title><rect x="0.0000%" y="341" width="0.2304%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.23%)</title><rect x="0.0000%" y="325" width="0.2304%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (1 samples, 0.23%)</title><rect x="0.0000%" y="309" width="0.2304%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.23%)</title><rect x="0.0000%" y="293" width="0.2304%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.23%)</title><rect x="0.0000%" y="277" width="0.2304%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.23%)</title><rect x="0.0000%" y="261" width="0.2304%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.23%)</title><rect x="0.0000%" y="245" width="0.2304%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.23%)</title><rect x="0.0000%" y="229" width="0.2304%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.23%)</title><rect x="0.9217%" y="309" width="0.2304%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="1"/><text x="1.1717%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.23%)</title><rect x="0.9217%" y="293" width="0.2304%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="1"/><text x="1.1717%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.23%)</title><rect x="1.1521%" y="309" width="0.2304%" height="15" fill="rgb(250,228,42)" fg:x="5" fg:w="1"/><text x="1.4021%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.23%)</title><rect x="1.1521%" y="293" width="0.2304%" height="15" fill="rgb(240,193,28)" fg:x="5" fg:w="1"/><text x="1.4021%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.69%)</title><rect x="1.3825%" y="309" width="0.6912%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="3"/><text x="1.6325%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (2 samples, 0.46%)</title><rect x="1.6129%" y="293" width="0.4608%" height="15" fill="rgb(206,188,39)" fg:x="7" fg:w="2"/><text x="1.8629%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.46%)</title><rect x="1.6129%" y="277" width="0.4608%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="2"/><text x="1.8629%" y="287.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 2.07%)</title><rect x="0.2304%" y="325" width="2.0737%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="9"/><text x="0.4804%" y="335.50">b..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.23%)</title><rect x="2.0737%" y="309" width="0.2304%" height="15" fill="rgb(225,20,46)" fg:x="9" fg:w="1"/><text x="2.3237%" y="319.50"></text></g><g><title>burst`hashbrown::map::HashMap&lt;K,V,S,A&gt;::retain (1 samples, 0.23%)</title><rect x="2.3041%" y="277" width="0.2304%" height="15" fill="rgb(210,31,41)" fg:x="10" fg:w="1"/><text x="2.5541%" y="287.50"></text></g><g><title>burst`alloc::vec::Vec&lt;T,A&gt;::retain (1 samples, 0.23%)</title><rect x="2.3041%" y="261" width="0.2304%" height="15" fill="rgb(221,200,47)" fg:x="10" fg:w="1"/><text x="2.5541%" y="271.50"></text></g><g><title>burst`burst::spec::SingleSpecDisjunct::refine (2 samples, 0.46%)</title><rect x="2.3041%" y="309" width="0.4608%" height="15" fill="rgb(226,26,5)" fg:x="10" fg:w="2"/><text x="2.5541%" y="319.50"></text></g><g><title>burst`burst::ntfa::PartialNTFA::refine (2 samples, 0.46%)</title><rect x="2.3041%" y="293" width="0.4608%" height="15" fill="rgb(249,33,26)" fg:x="10" fg:w="2"/><text x="2.5541%" y="303.50"></text></g><g><title>burst`hashbrown::map::make_hash (1 samples, 0.23%)</title><rect x="2.5346%" y="277" width="0.2304%" height="15" fill="rgb(235,183,28)" fg:x="11" fg:w="1"/><text x="2.7846%" y="287.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T&gt; as odds::vec::VecExt&lt;T&gt;&gt;::retain_mut (3 samples, 0.69%)</title><rect x="2.3041%" y="325" width="0.6912%" height="15" fill="rgb(221,5,38)" fg:x="10" fg:w="3"/><text x="2.5541%" y="335.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;(usize,burst::spec::SingleSpecElem)&gt; (1 samples, 0.23%)</title><rect x="2.7650%" y="309" width="0.2304%" height="15" fill="rgb(247,18,42)" fg:x="12" fg:w="1"/><text x="3.0150%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.23%)</title><rect x="2.7650%" y="293" width="0.2304%" height="15" fill="rgb(241,131,45)" fg:x="12" fg:w="1"/><text x="3.0150%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.23%)</title><rect x="3.2258%" y="277" width="0.2304%" height="15" fill="rgb(249,31,29)" fg:x="14" fg:w="1"/><text x="3.4758%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.23%)</title><rect x="3.2258%" y="261" width="0.2304%" height="15" fill="rgb(225,111,53)" fg:x="14" fg:w="1"/><text x="3.4758%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.23%)</title><rect x="3.4562%" y="277" width="0.2304%" height="15" fill="rgb(238,160,17)" fg:x="15" fg:w="1"/><text x="3.7062%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.23%)</title><rect x="3.4562%" y="261" width="0.2304%" height="15" fill="rgb(214,148,48)" fg:x="15" fg:w="1"/><text x="3.7062%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (1 samples, 0.23%)</title><rect x="3.4562%" y="245" width="0.2304%" height="15" fill="rgb(232,36,49)" fg:x="15" fg:w="1"/><text x="3.7062%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.23%)</title><rect x="3.4562%" y="229" width="0.2304%" height="15" fill="rgb(209,103,24)" fg:x="15" fg:w="1"/><text x="3.7062%" y="239.50"></text></g><g><title>burst`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 1.38%)</title><rect x="2.9954%" y="293" width="1.3825%" height="15" fill="rgb(229,88,8)" fg:x="13" fg:w="6"/><text x="3.2454%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.69%)</title><rect x="3.6866%" y="277" width="0.6912%" height="15" fill="rgb(213,181,19)" fg:x="16" fg:w="3"/><text x="3.9366%" y="287.50"></text></g><g><title>burst`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 1.61%)</title><rect x="2.9954%" y="325" width="1.6129%" height="15" fill="rgb(254,191,54)" fg:x="13" fg:w="7"/><text x="3.2454%" y="335.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;(usize,burst::spec::SingleSpecElem)&gt; (7 samples, 1.61%)</title><rect x="2.9954%" y="309" width="1.6129%" height="15" fill="rgb(241,83,37)" fg:x="13" fg:w="7"/><text x="3.2454%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.23%)</title><rect x="4.3779%" y="293" width="0.2304%" height="15" fill="rgb(233,36,39)" fg:x="19" fg:w="1"/><text x="4.6279%" y="303.50"></text></g><g><title>burst`DYLD-STUB$$free (1 samples, 0.23%)</title><rect x="4.6083%" y="325" width="0.2304%" height="15" fill="rgb(226,3,54)" fg:x="20" fg:w="1"/><text x="4.8583%" y="335.50"></text></g><g><title>burst`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (34 samples, 7.83%)</title><rect x="4.8387%" y="325" width="7.8341%" height="15" fill="rgb(245,192,40)" fg:x="21" fg:w="34"/><text x="5.0887%" y="335.50">burst`alloc..</text></g><g><title>burst`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::push (1 samples, 0.23%)</title><rect x="12.6728%" y="325" width="0.2304%" height="15" fill="rgb(238,167,29)" fg:x="55" fg:w="1"/><text x="12.9228%" y="335.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.23%)</title><rect x="12.9032%" y="325" width="0.2304%" height="15" fill="rgb(232,182,51)" fg:x="56" fg:w="1"/><text x="13.1532%" y="335.50"></text></g><g><title>burst`burst::acceptingrun::SolutionStatus::absolute_carry (2 samples, 0.46%)</title><rect x="13.1336%" y="325" width="0.4608%" height="15" fill="rgb(231,60,39)" fg:x="57" fg:w="2"/><text x="13.3836%" y="335.50"></text></g><g><title>burst`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.69%)</title><rect x="17.5115%" y="309" width="0.6912%" height="15" fill="rgb(208,69,12)" fg:x="76" fg:w="3"/><text x="17.7615%" y="319.50"></text></g><g><title>burst`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.46%)</title><rect x="17.7419%" y="293" width="0.4608%" height="15" fill="rgb(235,93,37)" fg:x="77" fg:w="2"/><text x="17.9919%" y="303.50"></text></g><g><title>burst`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.46%)</title><rect x="17.7419%" y="277" width="0.4608%" height="15" fill="rgb(213,116,39)" fg:x="77" fg:w="2"/><text x="17.9919%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.46%)</title><rect x="17.7419%" y="261" width="0.4608%" height="15" fill="rgb(222,207,29)" fg:x="77" fg:w="2"/><text x="17.9919%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.46%)</title><rect x="17.7419%" y="245" width="0.4608%" height="15" fill="rgb(206,96,30)" fg:x="77" fg:w="2"/><text x="17.9919%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 1.15%)</title><rect x="18.2028%" y="293" width="1.1521%" height="15" fill="rgb(218,138,4)" fg:x="79" fg:w="5"/><text x="18.4528%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (5 samples, 1.15%)</title><rect x="18.2028%" y="277" width="1.1521%" height="15" fill="rgb(250,191,14)" fg:x="79" fg:w="5"/><text x="18.4528%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 1.15%)</title><rect x="18.2028%" y="261" width="1.1521%" height="15" fill="rgb(239,60,40)" fg:x="79" fg:w="5"/><text x="18.4528%" y="271.50"></text></g><g><title>burst`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 1.38%)</title><rect x="18.2028%" y="309" width="1.3825%" height="15" fill="rgb(206,27,48)" fg:x="79" fg:w="6"/><text x="18.4528%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.23%)</title><rect x="19.3548%" y="293" width="0.2304%" height="15" fill="rgb(225,35,8)" fg:x="84" fg:w="1"/><text x="19.6048%" y="303.50"></text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 1.15%)</title><rect x="19.5853%" y="309" width="1.1521%" height="15" fill="rgb(250,213,24)" fg:x="85" fg:w="5"/><text x="19.8353%" y="319.50"></text></g><g><title>burst`DYLD-STUB$$free (1 samples, 0.23%)</title><rect x="20.7373%" y="309" width="0.2304%" height="15" fill="rgb(247,123,22)" fg:x="90" fg:w="1"/><text x="20.9873%" y="319.50"></text></g><g><title>burst`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::push (9 samples, 2.07%)</title><rect x="20.9677%" y="309" width="2.0737%" height="15" fill="rgb(231,138,38)" fg:x="91" fg:w="9"/><text x="21.2177%" y="319.50">b..</text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.23%)</title><rect x="22.8111%" y="293" width="0.2304%" height="15" fill="rgb(231,145,46)" fg:x="99" fg:w="1"/><text x="23.0611%" y="303.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (1 samples, 0.23%)</title><rect x="22.8111%" y="277" width="0.2304%" height="15" fill="rgb(251,118,11)" fg:x="99" fg:w="1"/><text x="23.0611%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.23%)</title><rect x="22.8111%" y="261" width="0.2304%" height="15" fill="rgb(217,147,25)" fg:x="99" fg:w="1"/><text x="23.0611%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.23%)</title><rect x="22.8111%" y="245" width="0.2304%" height="15" fill="rgb(247,81,37)" fg:x="99" fg:w="1"/><text x="23.0611%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.23%)</title><rect x="22.8111%" y="229" width="0.2304%" height="15" fill="rgb(209,12,38)" fg:x="99" fg:w="1"/><text x="23.0611%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.46%)</title><rect x="23.5023%" y="277" width="0.4608%" height="15" fill="rgb(227,1,9)" fg:x="102" fg:w="2"/><text x="23.7523%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.23%)</title><rect x="23.9631%" y="261" width="0.2304%" height="15" fill="rgb(248,47,43)" fg:x="104" fg:w="1"/><text x="24.2131%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.23%)</title><rect x="24.4240%" y="229" width="0.2304%" height="15" fill="rgb(221,10,30)" fg:x="106" fg:w="1"/><text x="24.6740%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_add_ptr (1 samples, 0.23%)</title><rect x="24.4240%" y="213" width="0.2304%" height="15" fill="rgb(210,229,1)" fg:x="106" fg:w="1"/><text x="24.6740%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (1 samples, 0.23%)</title><rect x="24.6544%" y="229" width="0.2304%" height="15" fill="rgb(222,148,37)" fg:x="107" fg:w="1"/><text x="24.9044%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.46%)</title><rect x="24.8848%" y="213" width="0.4608%" height="15" fill="rgb(234,67,33)" fg:x="108" fg:w="2"/><text x="25.1348%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.46%)</title><rect x="24.8848%" y="197" width="0.4608%" height="15" fill="rgb(247,98,35)" fg:x="108" fg:w="2"/><text x="25.1348%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.23%)</title><rect x="25.1152%" y="181" width="0.2304%" height="15" fill="rgb(247,138,52)" fg:x="109" fg:w="1"/><text x="25.3652%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (6 samples, 1.38%)</title><rect x="24.1935%" y="245" width="1.3825%" height="15" fill="rgb(213,79,30)" fg:x="105" fg:w="6"/><text x="24.4435%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.69%)</title><rect x="24.8848%" y="229" width="0.6912%" height="15" fill="rgb(246,177,23)" fg:x="108" fg:w="3"/><text x="25.1348%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.23%)</title><rect x="25.3456%" y="213" width="0.2304%" height="15" fill="rgb(230,62,27)" fg:x="110" fg:w="1"/><text x="25.5956%" y="223.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (12 samples, 2.76%)</title><rect x="23.0415%" y="309" width="2.7650%" height="15" fill="rgb(216,154,8)" fg:x="100" fg:w="12"/><text x="23.2915%" y="319.50">bu..</text></g><g><title>burst`alloc::raw_vec::finish_grow (11 samples, 2.53%)</title><rect x="23.2719%" y="293" width="2.5346%" height="15" fill="rgb(244,35,45)" fg:x="101" fg:w="11"/><text x="23.5219%" y="303.50">bu..</text></g><g><title>libsystem_malloc.dylib`realloc (8 samples, 1.84%)</title><rect x="23.9631%" y="277" width="1.8433%" height="15" fill="rgb(251,115,12)" fg:x="104" fg:w="8"/><text x="24.2131%" y="287.50">l..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (7 samples, 1.61%)</title><rect x="24.1935%" y="261" width="1.6129%" height="15" fill="rgb(240,54,50)" fg:x="105" fg:w="7"/><text x="24.4435%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.23%)</title><rect x="25.5760%" y="245" width="0.2304%" height="15" fill="rgb(233,84,52)" fg:x="111" fg:w="1"/><text x="25.8260%" y="255.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="28.1106%" y="261" width="0.2304%" height="15" fill="rgb(207,117,47)" fg:x="122" fg:w="1"/><text x="28.3606%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.23%)</title><rect x="28.1106%" y="245" width="0.2304%" height="15" fill="rgb(249,43,39)" fg:x="122" fg:w="1"/><text x="28.3606%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.23%)</title><rect x="28.1106%" y="229" width="0.2304%" height="15" fill="rgb(209,38,44)" fg:x="122" fg:w="1"/><text x="28.3606%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.23%)</title><rect x="28.1106%" y="213" width="0.2304%" height="15" fill="rgb(236,212,23)" fg:x="122" fg:w="1"/><text x="28.3606%" y="223.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (2 samples, 0.46%)</title><rect x="28.8018%" y="229" width="0.4608%" height="15" fill="rgb(242,79,21)" fg:x="125" fg:w="2"/><text x="29.0518%" y="239.50"></text></g><g><title>burst`__rdl_alloc (2 samples, 0.46%)</title><rect x="29.2627%" y="229" width="0.4608%" height="15" fill="rgb(211,96,35)" fg:x="127" fg:w="2"/><text x="29.5127%" y="239.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="30.6452%" y="197" width="0.2304%" height="15" fill="rgb(253,215,40)" fg:x="133" fg:w="1"/><text x="30.8952%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.23%)</title><rect x="30.6452%" y="181" width="0.2304%" height="15" fill="rgb(211,81,21)" fg:x="133" fg:w="1"/><text x="30.8952%" y="191.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="31.3364%" y="165" width="0.2304%" height="15" fill="rgb(208,190,38)" fg:x="136" fg:w="1"/><text x="31.5864%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.23%)</title><rect x="31.3364%" y="149" width="0.2304%" height="15" fill="rgb(235,213,38)" fg:x="136" fg:w="1"/><text x="31.5864%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.23%)</title><rect x="31.3364%" y="133" width="0.2304%" height="15" fill="rgb(237,122,38)" fg:x="136" fg:w="1"/><text x="31.5864%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.23%)</title><rect x="31.3364%" y="117" width="0.2304%" height="15" fill="rgb(244,218,35)" fg:x="136" fg:w="1"/><text x="31.5864%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.23%)</title><rect x="31.3364%" y="101" width="0.2304%" height="15" fill="rgb(240,68,47)" fg:x="136" fg:w="1"/><text x="31.5864%" y="111.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="31.7972%" y="117" width="0.2304%" height="15" fill="rgb(210,16,53)" fg:x="138" fg:w="1"/><text x="32.0472%" y="127.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="31.7972%" y="101" width="0.2304%" height="15" fill="rgb(235,124,12)" fg:x="138" fg:w="1"/><text x="32.0472%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.23%)</title><rect x="31.7972%" y="85" width="0.2304%" height="15" fill="rgb(224,169,11)" fg:x="138" fg:w="1"/><text x="32.0472%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.23%)</title><rect x="31.7972%" y="69" width="0.2304%" height="15" fill="rgb(250,166,2)" fg:x="138" fg:w="1"/><text x="32.0472%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.23%)</title><rect x="31.7972%" y="53" width="0.2304%" height="15" fill="rgb(242,216,29)" fg:x="138" fg:w="1"/><text x="32.0472%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.23%)</title><rect x="31.7972%" y="37" width="0.2304%" height="15" fill="rgb(230,116,27)" fg:x="138" fg:w="1"/><text x="32.0472%" y="47.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (3 samples, 0.69%)</title><rect x="31.5668%" y="149" width="0.6912%" height="15" fill="rgb(228,99,48)" fg:x="137" fg:w="3"/><text x="31.8168%" y="159.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (2 samples, 0.46%)</title><rect x="31.7972%" y="133" width="0.4608%" height="15" fill="rgb(253,11,6)" fg:x="138" fg:w="2"/><text x="32.0472%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.23%)</title><rect x="32.0276%" y="117" width="0.2304%" height="15" fill="rgb(247,143,39)" fg:x="139" fg:w="1"/><text x="32.2776%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.23%)</title><rect x="32.0276%" y="101" width="0.2304%" height="15" fill="rgb(236,97,10)" fg:x="139" fg:w="1"/><text x="32.2776%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.23%)</title><rect x="32.0276%" y="85" width="0.2304%" height="15" fill="rgb(233,208,19)" fg:x="139" fg:w="1"/><text x="32.2776%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.23%)</title><rect x="32.0276%" y="69" width="0.2304%" height="15" fill="rgb(216,164,2)" fg:x="139" fg:w="1"/><text x="32.2776%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.23%)</title><rect x="32.2581%" y="101" width="0.2304%" height="15" fill="rgb(220,129,5)" fg:x="140" fg:w="1"/><text x="32.5081%" y="111.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (6 samples, 1.38%)</title><rect x="31.5668%" y="165" width="1.3825%" height="15" fill="rgb(242,17,10)" fg:x="137" fg:w="6"/><text x="31.8168%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.69%)</title><rect x="32.2581%" y="149" width="0.6912%" height="15" fill="rgb(242,107,0)" fg:x="140" fg:w="3"/><text x="32.5081%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.69%)</title><rect x="32.2581%" y="133" width="0.6912%" height="15" fill="rgb(251,28,31)" fg:x="140" fg:w="3"/><text x="32.5081%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.69%)</title><rect x="32.2581%" y="117" width="0.6912%" height="15" fill="rgb(233,223,10)" fg:x="140" fg:w="3"/><text x="32.5081%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.46%)</title><rect x="32.4885%" y="101" width="0.4608%" height="15" fill="rgb(215,21,27)" fg:x="141" fg:w="2"/><text x="32.7385%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.23%)</title><rect x="32.9493%" y="117" width="0.2304%" height="15" fill="rgb(232,23,21)" fg:x="143" fg:w="1"/><text x="33.1993%" y="127.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (11 samples, 2.53%)</title><rect x="31.1060%" y="181" width="2.5346%" height="15" fill="rgb(244,5,23)" fg:x="135" fg:w="11"/><text x="31.3560%" y="191.50">bu..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.69%)</title><rect x="32.9493%" y="165" width="0.6912%" height="15" fill="rgb(226,81,46)" fg:x="143" fg:w="3"/><text x="33.1993%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.69%)</title><rect x="32.9493%" y="149" width="0.6912%" height="15" fill="rgb(247,70,30)" fg:x="143" fg:w="3"/><text x="33.1993%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.69%)</title><rect x="32.9493%" y="133" width="0.6912%" height="15" fill="rgb(212,68,19)" fg:x="143" fg:w="3"/><text x="33.1993%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.46%)</title><rect x="33.1797%" y="117" width="0.4608%" height="15" fill="rgb(240,187,13)" fg:x="144" fg:w="2"/><text x="33.4297%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.46%)</title><rect x="33.6406%" y="181" width="0.4608%" height="15" fill="rgb(223,113,26)" fg:x="146" fg:w="2"/><text x="33.8906%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.46%)</title><rect x="33.6406%" y="165" width="0.4608%" height="15" fill="rgb(206,192,2)" fg:x="146" fg:w="2"/><text x="33.8906%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.46%)</title><rect x="33.6406%" y="149" width="0.4608%" height="15" fill="rgb(241,108,4)" fg:x="146" fg:w="2"/><text x="33.8906%" y="159.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (15 samples, 3.46%)</title><rect x="30.8756%" y="197" width="3.4562%" height="15" fill="rgb(247,173,49)" fg:x="134" fg:w="15"/><text x="31.1256%" y="207.50">bur..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.23%)</title><rect x="34.1014%" y="181" width="0.2304%" height="15" fill="rgb(224,114,35)" fg:x="148" fg:w="1"/><text x="34.3514%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.23%)</title><rect x="34.7926%" y="149" width="0.2304%" height="15" fill="rgb(245,159,27)" fg:x="151" fg:w="1"/><text x="35.0426%" y="159.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (22 samples, 5.07%)</title><rect x="30.4147%" y="213" width="5.0691%" height="15" fill="rgb(245,172,44)" fg:x="132" fg:w="22"/><text x="30.6647%" y="223.50">burst`..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 1.15%)</title><rect x="34.3318%" y="197" width="1.1521%" height="15" fill="rgb(236,23,11)" fg:x="149" fg:w="5"/><text x="34.5818%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.92%)</title><rect x="34.5622%" y="181" width="0.9217%" height="15" fill="rgb(205,117,38)" fg:x="150" fg:w="4"/><text x="34.8122%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.92%)</title><rect x="34.5622%" y="165" width="0.9217%" height="15" fill="rgb(237,72,25)" fg:x="150" fg:w="4"/><text x="34.8122%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.46%)</title><rect x="35.0230%" y="149" width="0.4608%" height="15" fill="rgb(244,70,9)" fg:x="152" fg:w="2"/><text x="35.2730%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.23%)</title><rect x="36.6359%" y="165" width="0.2304%" height="15" fill="rgb(217,125,39)" fg:x="159" fg:w="1"/><text x="36.8859%" y="175.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (36 samples, 8.29%)</title><rect x="29.7235%" y="229" width="8.2949%" height="15" fill="rgb(235,36,10)" fg:x="129" fg:w="36"/><text x="29.9735%" y="239.50">burst`alloc:..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 2.53%)</title><rect x="35.4839%" y="213" width="2.5346%" height="15" fill="rgb(251,123,47)" fg:x="154" fg:w="11"/><text x="35.7339%" y="223.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 2.53%)</title><rect x="35.4839%" y="197" width="2.5346%" height="15" fill="rgb(221,13,13)" fg:x="154" fg:w="11"/><text x="35.7339%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 2.30%)</title><rect x="35.7143%" y="181" width="2.3041%" height="15" fill="rgb(238,131,9)" fg:x="155" fg:w="10"/><text x="35.9643%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (5 samples, 1.15%)</title><rect x="36.8664%" y="165" width="1.1521%" height="15" fill="rgb(211,50,8)" fg:x="160" fg:w="5"/><text x="37.1164%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.46%)</title><rect x="38.0184%" y="181" width="0.4608%" height="15" fill="rgb(245,182,24)" fg:x="165" fg:w="2"/><text x="38.2684%" y="191.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (44 samples, 10.14%)</title><rect x="28.5714%" y="245" width="10.1382%" height="15" fill="rgb(242,14,37)" fg:x="124" fg:w="44"/><text x="28.8214%" y="255.50">burst`&lt;burst::d..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.69%)</title><rect x="38.0184%" y="229" width="0.6912%" height="15" fill="rgb(246,228,12)" fg:x="165" fg:w="3"/><text x="38.2684%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.69%)</title><rect x="38.0184%" y="213" width="0.6912%" height="15" fill="rgb(213,55,15)" fg:x="165" fg:w="3"/><text x="38.2684%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.69%)</title><rect x="38.0184%" y="197" width="0.6912%" height="15" fill="rgb(209,9,3)" fg:x="165" fg:w="3"/><text x="38.2684%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.23%)</title><rect x="38.4793%" y="181" width="0.2304%" height="15" fill="rgb(230,59,30)" fg:x="167" fg:w="1"/><text x="38.7293%" y="191.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (1 samples, 0.23%)</title><rect x="38.7097%" y="245" width="0.2304%" height="15" fill="rgb(209,121,21)" fg:x="168" fg:w="1"/><text x="38.9597%" y="255.50"></text></g><g><title>burst`alloc::slice::hack::to_vec (49 samples, 11.29%)</title><rect x="28.3410%" y="261" width="11.2903%" height="15" fill="rgb(220,109,13)" fg:x="123" fg:w="49"/><text x="28.5910%" y="271.50">burst`alloc::slic..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.69%)</title><rect x="38.9401%" y="245" width="0.6912%" height="15" fill="rgb(232,18,1)" fg:x="169" fg:w="3"/><text x="39.1901%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.23%)</title><rect x="39.4009%" y="229" width="0.2304%" height="15" fill="rgb(215,41,42)" fg:x="171" fg:w="1"/><text x="39.6509%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.23%)</title><rect x="39.4009%" y="213" width="0.2304%" height="15" fill="rgb(224,123,36)" fg:x="171" fg:w="1"/><text x="39.6509%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.23%)</title><rect x="39.8618%" y="245" width="0.2304%" height="15" fill="rgb(240,125,3)" fg:x="173" fg:w="1"/><text x="40.1118%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.46%)</title><rect x="40.5530%" y="213" width="0.4608%" height="15" fill="rgb(205,98,50)" fg:x="176" fg:w="2"/><text x="40.8030%" y="223.50"></text></g><g><title>burst`&lt;burst::dsl::Dsl as core::clone::Clone&gt;::clone (60 samples, 13.82%)</title><rect x="27.8802%" y="277" width="13.8249%" height="15" fill="rgb(205,185,37)" fg:x="121" fg:w="60"/><text x="28.1302%" y="287.50">burst`&lt;burst::dsl::Ds..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 2.07%)</title><rect x="39.6313%" y="261" width="2.0737%" height="15" fill="rgb(238,207,15)" fg:x="172" fg:w="9"/><text x="39.8813%" y="271.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 1.61%)</title><rect x="40.0922%" y="245" width="1.6129%" height="15" fill="rgb(213,199,42)" fg:x="174" fg:w="7"/><text x="40.3422%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 1.38%)</title><rect x="40.3226%" y="229" width="1.3825%" height="15" fill="rgb(235,201,11)" fg:x="175" fg:w="6"/><text x="40.5726%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.69%)</title><rect x="41.0138%" y="213" width="0.6912%" height="15" fill="rgb(207,46,11)" fg:x="178" fg:w="3"/><text x="41.2638%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.23%)</title><rect x="41.9355%" y="261" width="0.2304%" height="15" fill="rgb(241,35,35)" fg:x="182" fg:w="1"/><text x="42.1855%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.23%)</title><rect x="43.0876%" y="229" width="0.2304%" height="15" fill="rgb(243,32,47)" fg:x="187" fg:w="1"/><text x="43.3376%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 1.61%)</title><rect x="42.3963%" y="245" width="1.6129%" height="15" fill="rgb(247,202,23)" fg:x="184" fg:w="7"/><text x="42.6463%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.69%)</title><rect x="43.3180%" y="229" width="0.6912%" height="15" fill="rgb(219,102,11)" fg:x="188" fg:w="3"/><text x="43.5680%" y="239.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (74 samples, 17.05%)</title><rect x="27.4194%" y="293" width="17.0507%" height="15" fill="rgb(243,110,44)" fg:x="119" fg:w="74"/><text x="27.6694%" y="303.50">burst`&lt;alloc::vec::Vec&lt;T&gt; ..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 2.76%)</title><rect x="41.7051%" y="277" width="2.7650%" height="15" fill="rgb(222,74,54)" fg:x="181" fg:w="12"/><text x="41.9551%" y="287.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 2.30%)</title><rect x="42.1659%" y="261" width="2.3041%" height="15" fill="rgb(216,99,12)" fg:x="183" fg:w="10"/><text x="42.4159%" y="271.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.46%)</title><rect x="44.0092%" y="245" width="0.4608%" height="15" fill="rgb(226,22,26)" fg:x="191" fg:w="2"/><text x="44.2592%" y="255.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.23%)</title><rect x="44.4700%" y="293" width="0.2304%" height="15" fill="rgb(217,163,10)" fg:x="193" fg:w="1"/><text x="44.7200%" y="303.50"></text></g><g><title>burst`alloc::vec::Vec&lt;T,A&gt;::retain (7 samples, 1.61%)</title><rect x="44.7005%" y="293" width="1.6129%" height="15" fill="rgb(213,25,53)" fg:x="194" fg:w="7"/><text x="44.9505%" y="303.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.46%)</title><rect x="45.8525%" y="277" width="0.4608%" height="15" fill="rgb(252,105,26)" fg:x="199" fg:w="2"/><text x="46.1025%" y="287.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (1 samples, 0.23%)</title><rect x="46.0829%" y="261" width="0.2304%" height="15" fill="rgb(220,39,43)" fg:x="200" fg:w="1"/><text x="46.3329%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.23%)</title><rect x="46.0829%" y="245" width="0.2304%" height="15" fill="rgb(229,68,48)" fg:x="200" fg:w="1"/><text x="46.3329%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.23%)</title><rect x="46.0829%" y="229" width="0.2304%" height="15" fill="rgb(252,8,32)" fg:x="200" fg:w="1"/><text x="46.3329%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.23%)</title><rect x="46.0829%" y="213" width="0.2304%" height="15" fill="rgb(223,20,43)" fg:x="200" fg:w="1"/><text x="46.3329%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.23%)</title><rect x="47.9263%" y="245" width="0.2304%" height="15" fill="rgb(229,81,49)" fg:x="208" fg:w="1"/><text x="48.1763%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 1.61%)</title><rect x="47.2350%" y="261" width="1.6129%" height="15" fill="rgb(236,28,36)" fg:x="205" fg:w="7"/><text x="47.4850%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.69%)</title><rect x="48.1567%" y="245" width="0.6912%" height="15" fill="rgb(249,185,26)" fg:x="209" fg:w="3"/><text x="48.4067%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 2.76%)</title><rect x="46.3134%" y="293" width="2.7650%" height="15" fill="rgb(249,174,33)" fg:x="201" fg:w="12"/><text x="46.5634%" y="303.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 2.07%)</title><rect x="47.0046%" y="277" width="2.0737%" height="15" fill="rgb(233,201,37)" fg:x="204" fg:w="9"/><text x="47.2546%" y="287.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.23%)</title><rect x="48.8479%" y="261" width="0.2304%" height="15" fill="rgb(221,78,26)" fg:x="212" fg:w="1"/><text x="49.0979%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.23%)</title><rect x="49.0783%" y="293" width="0.2304%" height="15" fill="rgb(250,127,30)" fg:x="213" fg:w="1"/><text x="49.3283%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 1.15%)</title><rect x="49.3088%" y="293" width="1.1521%" height="15" fill="rgb(230,49,44)" fg:x="214" fg:w="5"/><text x="49.5588%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 1.15%)</title><rect x="49.3088%" y="277" width="1.1521%" height="15" fill="rgb(229,67,23)" fg:x="214" fg:w="5"/><text x="49.5588%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.23%)</title><rect x="50.4608%" y="293" width="0.2304%" height="15" fill="rgb(249,83,47)" fg:x="219" fg:w="1"/><text x="50.7108%" y="303.50"></text></g><g><title>burst`burst::acceptingrun::SolutionStatus::absolute_carry (109 samples, 25.12%)</title><rect x="25.8065%" y="309" width="25.1152%" height="15" fill="rgb(215,43,3)" fg:x="112" fg:w="109"/><text x="26.0565%" y="319.50">burst`burst::acceptingrun::SolutionStatu..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.23%)</title><rect x="50.6912%" y="293" width="0.2304%" height="15" fill="rgb(238,154,13)" fg:x="220" fg:w="1"/><text x="50.9412%" y="303.50"></text></g><g><title>burst`DYLD-STUB$$free (1 samples, 0.23%)</title><rect x="52.5346%" y="293" width="0.2304%" height="15" fill="rgb(219,56,2)" fg:x="228" fg:w="1"/><text x="52.7846%" y="303.50"></text></g><g><title>burst`__rust_dealloc (1 samples, 0.23%)</title><rect x="52.7650%" y="293" width="0.2304%" height="15" fill="rgb(233,0,4)" fg:x="229" fg:w="1"/><text x="53.0150%" y="303.50"></text></g><g><title>burst`DYLD-STUB$$free (1 samples, 0.23%)</title><rect x="58.5253%" y="245" width="0.2304%" height="15" fill="rgb(235,30,7)" fg:x="254" fg:w="1"/><text x="58.7753%" y="255.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (6 samples, 1.38%)</title><rect x="59.6774%" y="229" width="1.3825%" height="15" fill="rgb(250,79,13)" fg:x="259" fg:w="6"/><text x="59.9274%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.92%)</title><rect x="60.1382%" y="213" width="0.9217%" height="15" fill="rgb(211,146,34)" fg:x="261" fg:w="4"/><text x="60.3882%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.69%)</title><rect x="60.3687%" y="197" width="0.6912%" height="15" fill="rgb(228,22,38)" fg:x="262" fg:w="3"/><text x="60.6187%" y="207.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (13 samples, 3.00%)</title><rect x="58.7558%" y="245" width="2.9954%" height="15" fill="rgb(235,168,5)" fg:x="255" fg:w="13"/><text x="59.0058%" y="255.50">bur..</text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.69%)</title><rect x="61.0599%" y="229" width="0.6912%" height="15" fill="rgb(221,155,16)" fg:x="265" fg:w="3"/><text x="61.3099%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.69%)</title><rect x="61.0599%" y="213" width="0.6912%" height="15" fill="rgb(215,215,53)" fg:x="265" fg:w="3"/><text x="61.3099%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 1.61%)</title><rect x="61.7512%" y="245" width="1.6129%" height="15" fill="rgb(223,4,10)" fg:x="268" fg:w="7"/><text x="62.0012%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.92%)</title><rect x="62.4424%" y="229" width="0.9217%" height="15" fill="rgb(234,103,6)" fg:x="271" fg:w="4"/><text x="62.6924%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.23%)</title><rect x="63.3641%" y="245" width="0.2304%" height="15" fill="rgb(227,97,0)" fg:x="275" fg:w="1"/><text x="63.6141%" y="255.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (34 samples, 7.83%)</title><rect x="55.9908%" y="261" width="7.8341%" height="15" fill="rgb(234,150,53)" fg:x="243" fg:w="34"/><text x="56.2408%" y="271.50">burst`core:..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.23%)</title><rect x="63.5945%" y="245" width="0.2304%" height="15" fill="rgb(228,201,54)" fg:x="276" fg:w="1"/><text x="63.8445%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.23%)</title><rect x="63.8249%" y="261" width="0.2304%" height="15" fill="rgb(222,22,37)" fg:x="277" fg:w="1"/><text x="64.0749%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 1.38%)</title><rect x="64.0553%" y="261" width="1.3825%" height="15" fill="rgb(237,53,32)" fg:x="278" fg:w="6"/><text x="64.3053%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.46%)</title><rect x="64.9770%" y="245" width="0.4608%" height="15" fill="rgb(233,25,53)" fg:x="282" fg:w="2"/><text x="65.2270%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.23%)</title><rect x="65.4378%" y="261" width="0.2304%" height="15" fill="rgb(210,40,34)" fg:x="284" fg:w="1"/><text x="65.6878%" y="271.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (47 samples, 10.83%)</title><rect x="55.0691%" y="277" width="10.8295%" height="15" fill="rgb(241,220,44)" fg:x="239" fg:w="47"/><text x="55.3191%" y="287.50">burst`core::ptr:..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.23%)</title><rect x="65.6682%" y="261" width="0.2304%" height="15" fill="rgb(235,28,35)" fg:x="285" fg:w="1"/><text x="65.9182%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 1.38%)</title><rect x="65.8986%" y="277" width="1.3825%" height="15" fill="rgb(210,56,17)" fg:x="286" fg:w="6"/><text x="66.1486%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.69%)</title><rect x="66.5899%" y="261" width="0.6912%" height="15" fill="rgb(224,130,29)" fg:x="289" fg:w="3"/><text x="66.8399%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.23%)</title><rect x="67.2811%" y="277" width="0.2304%" height="15" fill="rgb(235,212,8)" fg:x="292" fg:w="1"/><text x="67.5311%" y="287.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (64 samples, 14.75%)</title><rect x="52.9954%" y="293" width="14.7465%" height="15" fill="rgb(223,33,50)" fg:x="230" fg:w="64"/><text x="53.2454%" y="303.50">burst`core::ptr::drop_..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.23%)</title><rect x="67.5115%" y="277" width="0.2304%" height="15" fill="rgb(219,149,13)" fg:x="293" fg:w="1"/><text x="67.7615%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.23%)</title><rect x="67.7419%" y="293" width="0.2304%" height="15" fill="rgb(250,156,29)" fg:x="294" fg:w="1"/><text x="67.9919%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.46%)</title><rect x="67.9724%" y="293" width="0.4608%" height="15" fill="rgb(216,193,19)" fg:x="295" fg:w="2"/><text x="68.2224%" y="303.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::dsl::Dsl&gt; (80 samples, 18.43%)</title><rect x="50.9217%" y="309" width="18.4332%" height="15" fill="rgb(216,135,14)" fg:x="221" fg:w="80"/><text x="51.1717%" y="319.50">burst`core::ptr::drop_in_plac..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.92%)</title><rect x="68.4332%" y="293" width="0.9217%" height="15" fill="rgb(241,47,5)" fg:x="297" fg:w="4"/><text x="68.6832%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (3 samples, 0.69%)</title><rect x="68.6636%" y="277" width="0.6912%" height="15" fill="rgb(233,42,35)" fg:x="298" fg:w="3"/><text x="68.9136%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.69%)</title><rect x="68.6636%" y="261" width="0.6912%" height="15" fill="rgb(231,13,6)" fg:x="298" fg:w="3"/><text x="68.9136%" y="271.50"></text></g><g><title>burst`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.69%)</title><rect x="69.3548%" y="309" width="0.6912%" height="15" fill="rgb(207,181,40)" fg:x="301" fg:w="3"/><text x="69.6048%" y="319.50"></text></g><g><title>burst`hashbrown::map::make_hash (6 samples, 1.38%)</title><rect x="70.0461%" y="309" width="1.3825%" height="15" fill="rgb(254,173,49)" fg:x="304" fg:w="6"/><text x="70.2961%" y="319.50"></text></g><g><title>burst`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5 samples, 1.15%)</title><rect x="71.4286%" y="309" width="1.1521%" height="15" fill="rgb(221,1,38)" fg:x="310" fg:w="5"/><text x="71.6786%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 2.07%)</title><rect x="72.5806%" y="309" width="2.0737%" height="15" fill="rgb(206,124,46)" fg:x="315" fg:w="9"/><text x="72.8306%" y="319.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.69%)</title><rect x="74.6544%" y="309" width="0.6912%" height="15" fill="rgb(249,21,11)" fg:x="324" fg:w="3"/><text x="74.9044%" y="319.50"></text></g><g><title>burst`burst::acceptingrun::_&lt;impl burst::ntfa::NTFABuilder&gt;::get_boring_accepting_run (272 samples, 62.67%)</title><rect x="13.5945%" y="325" width="62.6728%" height="15" fill="rgb(222,201,40)" fg:x="59" fg:w="272"/><text x="13.8445%" y="335.50">burst`burst::acceptingrun::_&lt;impl burst::ntfa::NTFABuilder&gt;::get_boring_accepting_run</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.92%)</title><rect x="75.3456%" y="309" width="0.9217%" height="15" fill="rgb(235,61,29)" fg:x="327" fg:w="4"/><text x="75.5956%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.23%)</title><rect x="76.0369%" y="293" width="0.2304%" height="15" fill="rgb(219,207,3)" fg:x="330" fg:w="1"/><text x="76.2869%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.23%)</title><rect x="76.0369%" y="277" width="0.2304%" height="15" fill="rgb(222,56,46)" fg:x="330" fg:w="1"/><text x="76.2869%" y="287.50"></text></g><g><title>burst`&lt;burst::ntfa::Transition as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.23%)</title><rect x="78.3410%" y="309" width="0.2304%" height="15" fill="rgb(239,76,54)" fg:x="340" fg:w="1"/><text x="78.5910%" y="319.50"></text></g><g><title>burst`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.46%)</title><rect x="78.5714%" y="309" width="0.4608%" height="15" fill="rgb(231,124,27)" fg:x="341" fg:w="2"/><text x="78.8214%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.69%)</title><rect x="79.4931%" y="245" width="0.6912%" height="15" fill="rgb(249,195,6)" fg:x="345" fg:w="3"/><text x="79.7431%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 1.15%)</title><rect x="79.2627%" y="277" width="1.1521%" height="15" fill="rgb(237,174,47)" fg:x="344" fg:w="5"/><text x="79.5127%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.92%)</title><rect x="79.4931%" y="261" width="0.9217%" height="15" fill="rgb(206,201,31)" fg:x="345" fg:w="4"/><text x="79.7431%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.23%)</title><rect x="80.1843%" y="245" width="0.2304%" height="15" fill="rgb(231,57,52)" fg:x="348" fg:w="1"/><text x="80.4343%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.23%)</title><rect x="80.4147%" y="245" width="0.2304%" height="15" fill="rgb(248,177,22)" fg:x="349" fg:w="1"/><text x="80.6647%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.23%)</title><rect x="80.4147%" y="229" width="0.2304%" height="15" fill="rgb(215,211,37)" fg:x="349" fg:w="1"/><text x="80.6647%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.23%)</title><rect x="80.4147%" y="213" width="0.2304%" height="15" fill="rgb(241,128,51)" fg:x="349" fg:w="1"/><text x="80.6647%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.23%)</title><rect x="80.4147%" y="197" width="0.2304%" height="15" fill="rgb(227,165,31)" fg:x="349" fg:w="1"/><text x="80.6647%" y="207.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 1.84%)</title><rect x="79.0323%" y="309" width="1.8433%" height="15" fill="rgb(228,167,24)" fg:x="343" fg:w="8"/><text x="79.2823%" y="319.50">b..</text></g><g><title>burst`alloc::raw_vec::finish_grow (7 samples, 1.61%)</title><rect x="79.2627%" y="293" width="1.6129%" height="15" fill="rgb(228,143,12)" fg:x="344" fg:w="7"/><text x="79.5127%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.46%)</title><rect x="80.4147%" y="277" width="0.4608%" height="15" fill="rgb(249,149,8)" fg:x="349" fg:w="2"/><text x="80.6647%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.46%)</title><rect x="80.4147%" y="261" width="0.4608%" height="15" fill="rgb(243,35,44)" fg:x="349" fg:w="2"/><text x="80.6647%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.23%)</title><rect x="80.6452%" y="245" width="0.2304%" height="15" fill="rgb(246,89,9)" fg:x="350" fg:w="1"/><text x="80.8952%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.23%)</title><rect x="81.7972%" y="261" width="0.2304%" height="15" fill="rgb(233,213,13)" fg:x="355" fg:w="1"/><text x="82.0472%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.23%)</title><rect x="81.7972%" y="245" width="0.2304%" height="15" fill="rgb(233,141,41)" fg:x="355" fg:w="1"/><text x="82.0472%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.23%)</title><rect x="81.7972%" y="229" width="0.2304%" height="15" fill="rgb(239,167,4)" fg:x="355" fg:w="1"/><text x="82.0472%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.23%)</title><rect x="82.0276%" y="261" width="0.2304%" height="15" fill="rgb(209,217,16)" fg:x="356" fg:w="1"/><text x="82.2776%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.23%)</title><rect x="82.0276%" y="245" width="0.2304%" height="15" fill="rgb(219,88,35)" fg:x="356" fg:w="1"/><text x="82.2776%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.23%)</title><rect x="82.0276%" y="229" width="0.2304%" height="15" fill="rgb(220,193,23)" fg:x="356" fg:w="1"/><text x="82.2776%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (1 samples, 0.23%)</title><rect x="82.0276%" y="213" width="0.2304%" height="15" fill="rgb(230,90,52)" fg:x="356" fg:w="1"/><text x="82.2776%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.23%)</title><rect x="82.0276%" y="197" width="0.2304%" height="15" fill="rgb(252,106,19)" fg:x="356" fg:w="1"/><text x="82.2776%" y="207.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.69%)</title><rect x="81.7972%" y="293" width="0.6912%" height="15" fill="rgb(206,74,20)" fg:x="355" fg:w="3"/><text x="82.0472%" y="303.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (3 samples, 0.69%)</title><rect x="81.7972%" y="277" width="0.6912%" height="15" fill="rgb(230,138,44)" fg:x="355" fg:w="3"/><text x="82.0472%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.23%)</title><rect x="82.2581%" y="261" width="0.2304%" height="15" fill="rgb(235,182,43)" fg:x="357" fg:w="1"/><text x="82.5081%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.46%)</title><rect x="83.1797%" y="261" width="0.4608%" height="15" fill="rgb(242,16,51)" fg:x="361" fg:w="2"/><text x="83.4297%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.23%)</title><rect x="83.4101%" y="245" width="0.2304%" height="15" fill="rgb(248,9,4)" fg:x="362" fg:w="1"/><text x="83.6601%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 1.38%)</title><rect x="82.4885%" y="293" width="1.3825%" height="15" fill="rgb(210,31,22)" fg:x="358" fg:w="6"/><text x="82.7385%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.92%)</title><rect x="82.9493%" y="277" width="0.9217%" height="15" fill="rgb(239,54,39)" fg:x="360" fg:w="4"/><text x="83.1993%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.23%)</title><rect x="83.6406%" y="261" width="0.2304%" height="15" fill="rgb(230,99,41)" fg:x="363" fg:w="1"/><text x="83.8906%" y="271.50"></text></g><g><title>burst`burst::intersect::_&lt;impl burst::ntfa::NTFABuilder&gt;::intersect::getmergedvl (14 samples, 3.23%)</title><rect x="80.8756%" y="309" width="3.2258%" height="15" fill="rgb(253,106,12)" fg:x="351" fg:w="14"/><text x="81.1256%" y="319.50">bur..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.23%)</title><rect x="83.8710%" y="293" width="0.2304%" height="15" fill="rgb(213,46,41)" fg:x="364" fg:w="1"/><text x="84.1210%" y="303.50"></text></g><g><title>burst`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.69%)</title><rect x="85.0230%" y="293" width="0.6912%" height="15" fill="rgb(215,133,35)" fg:x="369" fg:w="3"/><text x="85.2730%" y="303.50"></text></g><g><title>burst`burst::ntfa::NTFABuilder::accessibility_cleaning (8 samples, 1.84%)</title><rect x="84.1014%" y="309" width="1.8433%" height="15" fill="rgb(213,28,5)" fg:x="365" fg:w="8"/><text x="84.3514%" y="319.50">b..</text></g><g><title>burst`alloc::vec::Vec&lt;T,A&gt;::retain (1 samples, 0.23%)</title><rect x="85.7143%" y="293" width="0.2304%" height="15" fill="rgb(215,77,49)" fg:x="372" fg:w="1"/><text x="85.9643%" y="303.50"></text></g><g><title>burst`core::slice::sort::recurse (1 samples, 0.23%)</title><rect x="86.1751%" y="277" width="0.2304%" height="15" fill="rgb(248,100,22)" fg:x="374" fg:w="1"/><text x="86.4251%" y="287.50"></text></g><g><title>burst`core::slice::sort::recurse (2 samples, 0.46%)</title><rect x="86.1751%" y="293" width="0.4608%" height="15" fill="rgb(208,67,9)" fg:x="374" fg:w="2"/><text x="86.4251%" y="303.50"></text></g><g><title>burst`core::slice::sort::shift_tail (1 samples, 0.23%)</title><rect x="86.4055%" y="277" width="0.2304%" height="15" fill="rgb(219,133,21)" fg:x="375" fg:w="1"/><text x="86.6555%" y="287.50"></text></g><g><title>burst`burst::ntfa::NTFABuilder::insert_into_placeholder (4 samples, 0.92%)</title><rect x="85.9447%" y="309" width="0.9217%" height="15" fill="rgb(246,46,29)" fg:x="373" fg:w="4"/><text x="86.1947%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.23%)</title><rect x="86.6359%" y="293" width="0.2304%" height="15" fill="rgb(246,185,52)" fg:x="376" fg:w="1"/><text x="86.8859%" y="303.50"></text></g><g><title>burst`hashbrown::map::make_hash (2 samples, 0.46%)</title><rect x="86.8664%" y="309" width="0.4608%" height="15" fill="rgb(252,136,11)" fg:x="377" fg:w="2"/><text x="87.1164%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.69%)</title><rect x="87.3272%" y="309" width="0.6912%" height="15" fill="rgb(219,138,53)" fg:x="379" fg:w="3"/><text x="87.5772%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.23%)</title><rect x="87.7880%" y="293" width="0.2304%" height="15" fill="rgb(211,51,23)" fg:x="381" fg:w="1"/><text x="88.0380%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.23%)</title><rect x="88.0184%" y="309" width="0.2304%" height="15" fill="rgb(247,221,28)" fg:x="382" fg:w="1"/><text x="88.2684%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 1.84%)</title><rect x="88.2488%" y="309" width="1.8433%" height="15" fill="rgb(251,222,45)" fg:x="383" fg:w="8"/><text x="88.4988%" y="319.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (2 samples, 0.46%)</title><rect x="89.6313%" y="293" width="0.4608%" height="15" fill="rgb(217,162,53)" fg:x="389" fg:w="2"/><text x="89.8813%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.46%)</title><rect x="89.6313%" y="277" width="0.4608%" height="15" fill="rgb(229,93,14)" fg:x="389" fg:w="2"/><text x="89.8813%" y="287.50"></text></g><g><title>burst`burst::intersect::_&lt;impl burst::ntfa::NTFABuilder&gt;::intersect (62 samples, 14.29%)</title><rect x="76.2673%" y="325" width="14.2857%" height="15" fill="rgb(209,67,49)" fg:x="331" fg:w="62"/><text x="76.5173%" y="335.50">burst`burst::intersect..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.46%)</title><rect x="90.0922%" y="309" width="0.4608%" height="15" fill="rgb(213,87,29)" fg:x="391" fg:w="2"/><text x="90.3422%" y="319.50"></text></g><g><title>burst`burst::nftabuilder::ExpressionBuilder::get_constructed (3 samples, 0.69%)</title><rect x="90.5530%" y="309" width="0.6912%" height="15" fill="rgb(205,151,52)" fg:x="393" fg:w="3"/><text x="90.8030%" y="319.50"></text></g><g><title>burst`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.46%)</title><rect x="90.7834%" y="293" width="0.4608%" height="15" fill="rgb(253,215,39)" fg:x="394" fg:w="2"/><text x="91.0334%" y="303.50"></text></g><g><title>burst`burst::nftabuilder::_&lt;impl burst::ntfa::NTFABuilder&gt;::build_ntfa (5 samples, 1.15%)</title><rect x="90.5530%" y="325" width="1.1521%" height="15" fill="rgb(221,220,41)" fg:x="393" fg:w="5"/><text x="90.8030%" y="335.50"></text></g><g><title>burst`burst::ntfa::PartialNTFA::add_rule (2 samples, 0.46%)</title><rect x="91.2442%" y="309" width="0.4608%" height="15" fill="rgb(218,133,21)" fg:x="396" fg:w="2"/><text x="91.4942%" y="319.50"></text></g><g><title>burst`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.46%)</title><rect x="91.2442%" y="293" width="0.4608%" height="15" fill="rgb(221,193,43)" fg:x="396" fg:w="2"/><text x="91.4942%" y="303.50"></text></g><g><title>burst`alloc::raw_vec::finish_grow (1 samples, 0.23%)</title><rect x="91.4747%" y="277" width="0.2304%" height="15" fill="rgb(240,128,52)" fg:x="397" fg:w="1"/><text x="91.7247%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.23%)</title><rect x="91.4747%" y="261" width="0.2304%" height="15" fill="rgb(253,114,12)" fg:x="397" fg:w="1"/><text x="91.7247%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.23%)</title><rect x="91.4747%" y="245" width="0.2304%" height="15" fill="rgb(215,223,47)" fg:x="397" fg:w="1"/><text x="91.7247%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.23%)</title><rect x="94.0092%" y="213" width="0.2304%" height="15" fill="rgb(248,225,23)" fg:x="408" fg:w="1"/><text x="94.2592%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 1.61%)</title><rect x="93.0876%" y="245" width="1.6129%" height="15" fill="rgb(250,108,0)" fg:x="404" fg:w="7"/><text x="93.3376%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 1.15%)</title><rect x="93.5484%" y="229" width="1.1521%" height="15" fill="rgb(228,208,7)" fg:x="406" fg:w="5"/><text x="93.7984%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.46%)</title><rect x="94.2396%" y="213" width="0.4608%" height="15" fill="rgb(244,45,10)" fg:x="409" fg:w="2"/><text x="94.4896%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 2.30%)</title><rect x="92.6267%" y="261" width="2.3041%" height="15" fill="rgb(207,125,25)" fg:x="402" fg:w="10"/><text x="92.8767%" y="271.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.23%)</title><rect x="94.7005%" y="245" width="0.2304%" height="15" fill="rgb(210,195,18)" fg:x="411" fg:w="1"/><text x="94.9505%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.23%)</title><rect x="94.7005%" y="229" width="0.2304%" height="15" fill="rgb(249,80,12)" fg:x="411" fg:w="1"/><text x="94.9505%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.23%)</title><rect x="94.7005%" y="213" width="0.2304%" height="15" fill="rgb(221,65,9)" fg:x="411" fg:w="1"/><text x="94.9505%" y="223.50"></text></g><g><title>burst`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 3.46%)</title><rect x="91.7051%" y="277" width="3.4562%" height="15" fill="rgb(235,49,36)" fg:x="398" fg:w="15"/><text x="91.9551%" y="287.50">bur..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.23%)</title><rect x="94.9309%" y="261" width="0.2304%" height="15" fill="rgb(225,32,20)" fg:x="412" fg:w="1"/><text x="95.1809%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.23%)</title><rect x="95.1613%" y="277" width="0.2304%" height="15" fill="rgb(215,141,46)" fg:x="413" fg:w="1"/><text x="95.4113%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.23%)</title><rect x="95.1613%" y="261" width="0.2304%" height="15" fill="rgb(250,160,47)" fg:x="413" fg:w="1"/><text x="95.4113%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.23%)</title><rect x="95.1613%" y="245" width="0.2304%" height="15" fill="rgb(216,222,40)" fg:x="413" fg:w="1"/><text x="95.4113%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.23%)</title><rect x="95.1613%" y="229" width="0.2304%" height="15" fill="rgb(234,217,39)" fg:x="413" fg:w="1"/><text x="95.4113%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.23%)</title><rect x="95.1613%" y="213" width="0.2304%" height="15" fill="rgb(207,178,40)" fg:x="413" fg:w="1"/><text x="95.4113%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.23%)</title><rect x="95.3917%" y="277" width="0.2304%" height="15" fill="rgb(221,136,13)" fg:x="414" fg:w="1"/><text x="95.6417%" y="287.50"></text></g><g><title>burst`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (18 samples, 4.15%)</title><rect x="91.7051%" y="309" width="4.1475%" height="15" fill="rgb(249,199,10)" fg:x="398" fg:w="18"/><text x="91.9551%" y="319.50">burst..</text></g><g><title>burst`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (18 samples, 4.15%)</title><rect x="91.7051%" y="293" width="4.1475%" height="15" fill="rgb(249,222,13)" fg:x="398" fg:w="18"/><text x="91.9551%" y="303.50">burst..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.23%)</title><rect x="95.6221%" y="277" width="0.2304%" height="15" fill="rgb(244,185,38)" fg:x="415" fg:w="1"/><text x="95.8721%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.69%)</title><rect x="95.8525%" y="277" width="0.6912%" height="15" fill="rgb(236,202,9)" fg:x="416" fg:w="3"/><text x="96.1025%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.46%)</title><rect x="96.0829%" y="261" width="0.4608%" height="15" fill="rgb(250,229,37)" fg:x="417" fg:w="2"/><text x="96.3329%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.23%)</title><rect x="96.5438%" y="277" width="0.2304%" height="15" fill="rgb(206,174,23)" fg:x="419" fg:w="1"/><text x="96.7938%" y="287.50"></text></g><g><title>burst`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 1.61%)</title><rect x="95.8525%" y="293" width="1.6129%" height="15" fill="rgb(211,33,43)" fg:x="416" fg:w="7"/><text x="96.1025%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.69%)</title><rect x="96.7742%" y="277" width="0.6912%" height="15" fill="rgb(245,58,50)" fg:x="420" fg:w="3"/><text x="97.0242%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.23%)</title><rect x="97.2350%" y="261" width="0.2304%" height="15" fill="rgb(244,68,36)" fg:x="422" fg:w="1"/><text x="97.4850%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.23%)</title><rect x="97.2350%" y="245" width="0.2304%" height="15" fill="rgb(232,229,15)" fg:x="422" fg:w="1"/><text x="97.4850%" y="255.50"></text></g><g><title>burst`burst::spec::SpecVariant::refine_disjoint (26 samples, 5.99%)</title><rect x="91.7051%" y="325" width="5.9908%" height="15" fill="rgb(254,30,23)" fg:x="398" fg:w="26"/><text x="91.9551%" y="335.50">burst`bu..</text></g><g><title>burst`core::ptr::drop_in_place&lt;(usize,burst::spec::SingleSpecElem)&gt; (8 samples, 1.84%)</title><rect x="95.8525%" y="309" width="1.8433%" height="15" fill="rgb(235,160,14)" fg:x="416" fg:w="8"/><text x="96.1025%" y="319.50">b..</text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.23%)</title><rect x="97.4654%" y="293" width="0.2304%" height="15" fill="rgb(212,155,44)" fg:x="423" fg:w="1"/><text x="97.7154%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.23%)</title><rect x="97.6959%" y="277" width="0.2304%" height="15" fill="rgb(226,2,50)" fg:x="424" fg:w="1"/><text x="97.9459%" y="287.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;burst::queue::QueueElem&lt;burst::spec::SpecVariant&gt;&gt; (2 samples, 0.46%)</title><rect x="97.6959%" y="325" width="0.4608%" height="15" fill="rgb(234,177,6)" fg:x="424" fg:w="2"/><text x="97.9459%" y="335.50"></text></g><g><title>burst`core::ptr::drop_in_place&lt;(usize,burst::spec::SingleSpecElem)&gt; (2 samples, 0.46%)</title><rect x="97.6959%" y="309" width="0.4608%" height="15" fill="rgb(217,24,9)" fg:x="424" fg:w="2"/><text x="97.9459%" y="319.50"></text></g><g><title>burst`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.46%)</title><rect x="97.6959%" y="293" width="0.4608%" height="15" fill="rgb(220,13,46)" fg:x="424" fg:w="2"/><text x="97.9459%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.23%)</title><rect x="97.9263%" y="277" width="0.2304%" height="15" fill="rgb(239,221,27)" fg:x="425" fg:w="1"/><text x="98.1763%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.23%)</title><rect x="97.9263%" y="261" width="0.2304%" height="15" fill="rgb(222,198,25)" fg:x="425" fg:w="1"/><text x="98.1763%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.23%)</title><rect x="97.9263%" y="245" width="0.2304%" height="15" fill="rgb(211,99,13)" fg:x="425" fg:w="1"/><text x="98.1763%" y="255.50"></text></g><g><title>burst`hashbrown::map::make_hash (1 samples, 0.23%)</title><rect x="98.1567%" y="325" width="0.2304%" height="15" fill="rgb(232,111,31)" fg:x="426" fg:w="1"/><text x="98.4067%" y="335.50"></text></g><g><title>burst`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5 samples, 1.15%)</title><rect x="98.3871%" y="325" width="1.1521%" height="15" fill="rgb(245,82,37)" fg:x="427" fg:w="5"/><text x="98.6371%" y="335.50"></text></g><g><title>burst`main (433 samples, 99.77%)</title><rect x="0.0000%" y="421" width="99.7696%" height="15" fill="rgb(227,149,46)" fg:x="0" fg:w="433"/><text x="0.2500%" y="431.50">burst`main</text></g><g><title>burst`std::rt::lang_start_internal (433 samples, 99.77%)</title><rect x="0.0000%" y="405" width="99.7696%" height="15" fill="rgb(218,36,50)" fg:x="0" fg:w="433"/><text x="0.2500%" y="415.50">burst`std::rt::lang_start_internal</text></g><g><title>burst`std::rt::lang_start::_{{closure}} (433 samples, 99.77%)</title><rect x="0.0000%" y="389" width="99.7696%" height="15" fill="rgb(226,80,48)" fg:x="0" fg:w="433"/><text x="0.2500%" y="399.50">burst`std::rt::lang_start::_{{closure}}</text></g><g><title>burst`std::sys_common::backtrace::__rust_begin_short_backtrace (433 samples, 99.77%)</title><rect x="0.0000%" y="373" width="99.7696%" height="15" fill="rgb(238,224,15)" fg:x="0" fg:w="433"/><text x="0.2500%" y="383.50">burst`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>burst`burst::main (433 samples, 99.77%)</title><rect x="0.0000%" y="357" width="99.7696%" height="15" fill="rgb(241,136,10)" fg:x="0" fg:w="433"/><text x="0.2500%" y="367.50">burst`burst::main</text></g><g><title>burst`burst::synthesis::synthesize (432 samples, 99.54%)</title><rect x="0.2304%" y="341" width="99.5392%" height="15" fill="rgb(208,32,45)" fg:x="1" fg:w="432"/><text x="0.4804%" y="351.50">burst`burst::synthesis::synthesize</text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.23%)</title><rect x="99.5392%" y="325" width="0.2304%" height="15" fill="rgb(207,135,9)" fg:x="432" fg:w="1"/><text x="99.7892%" y="335.50"></text></g><g><title>all (434 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(206,86,44)" fg:x="0" fg:w="434"/><text x="0.2500%" y="463.50"></text></g><g><title>dyld`start (434 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(245,177,15)" fg:x="0" fg:w="434"/><text x="0.2500%" y="447.50">dyld`start</text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.23%)</title><rect x="99.7696%" y="421" width="0.2304%" height="15" fill="rgb(206,64,50)" fg:x="433" fg:w="1"/><text x="100.0196%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.23%)</title><rect x="99.7696%" y="405" width="0.2304%" height="15" fill="rgb(234,36,40)" fg:x="433" fg:w="1"/><text x="100.0196%" y="415.50"></text></g></svg></svg>